//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace Modified

open Pulumi.FSharp
open Pulumi.FSharp.Kubernetes

module Types =
    module Inputs =
        module Apps =
            module V1 =
                [<AutoOpen>]
                module DeploymentSpec =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DeploymentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentSpecArgs()
                        member _.Run(_cargs_, _args_: DeploymentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("paused")>]
                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- input paused
                            _cargs_, _args_

                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- io paused
                            _cargs_, _args_

                        [<CustomOperation("progressDeadlineSeconds")>]
                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- input progressDeadlineSeconds
                            _cargs_, _args_

                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- io progressDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DeploymentSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: DeploymentSpecArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DeploymentSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let deploymentSpec = DeploymentSpecBuilder()

module Apps =
    module V1 =

        [<AutoOpen>]
        module Deployment =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type DeploymentBuilder() =
                let mutable kubeResource = KubernetesResource.Zero
                let mutable deployArgs = DeploymentArgs()
                member __.Combine (x, y) = x @ y
                member __.For(a, b) = kubeResource, deployArgs
                member __.Zero() = kubeResource, deployArgs
                member _.Yield _ = kubeResource, deployArgs
                member this.Yield (deploymentSpecArgs: DeploymentSpecArgs) =
                    deployArgs.Spec <- input deploymentSpecArgs
                    kubeResource, deployArgs
                member this.Yield deploymentSpecArgs =
                    deployArgs.Spec <- io deploymentSpecArgs
                    kubeResource, deployArgs

                member _.Run(_cargs_, _args_: DeploymentArgs) = Deployment(kubeResource.Name, deployArgs)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentArgs), name) = { kubeResource with Name = name }, deployArgs

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    kubeResource, deployArgs

                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    kubeResource, deployArgs

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- input kind
                    kubeResource, deployArgs

                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- io kind
                    kubeResource, deployArgs

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    kubeResource, deployArgs

                // [<CustomOperation("spec")>]
                // member _.Spec((_cargs_, _args_: DeploymentArgs), spec) =
                //     _args_.Spec <- input spec
                //     kubeResource, deployArgs

            let deployment = DeploymentBuilder()


//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace Pulumi.FSharp.Kubernetes

open Pulumi.FSharp
open Pulumi.FSharp.Kubernetes

module Types =
    module Inputs =
        module AdmissionRegistration =
            module V1 =
                [<AutoOpen>]
                module MutatingWebhook =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

                    type MutatingWebhookBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MutatingWebhookArgs()
                        member _.Run(_cargs_, _args_: MutatingWebhookArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MutatingWebhookArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("admissionReviewVersions")>]
                        member _.AdmissionReviewVersions((_cargs_, _args_: MutatingWebhookArgs), admissionReviewVersions) =
                            _args_.AdmissionReviewVersions <- inputList admissionReviewVersions
                            _cargs_, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: MutatingWebhookArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("failurePolicy")>]
                        member _.FailurePolicy((_cargs_, _args_: MutatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- input failurePolicy
                            _cargs_, _args_

                        member _.FailurePolicy((_cargs_, _args_: MutatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- io failurePolicy
                            _cargs_, _args_

                        [<CustomOperation("matchPolicy")>]
                        member _.MatchPolicy((_cargs_, _args_: MutatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- input matchPolicy
                            _cargs_, _args_

                        member _.MatchPolicy((_cargs_, _args_: MutatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- io matchPolicy
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: MutatingWebhookArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: MutatingWebhookArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: MutatingWebhookArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("objectSelector")>]
                        member _.ObjectSelector((_cargs_, _args_: MutatingWebhookArgs), objectSelector) =
                            _args_.ObjectSelector <- input objectSelector
                            _cargs_, _args_

                        [<CustomOperation("reinvocationPolicy")>]
                        member _.ReinvocationPolicy((_cargs_, _args_: MutatingWebhookArgs), reinvocationPolicy) =
                            _args_.ReinvocationPolicy <- input reinvocationPolicy
                            _cargs_, _args_

                        member _.ReinvocationPolicy((_cargs_, _args_: MutatingWebhookArgs), reinvocationPolicy) =
                            _args_.ReinvocationPolicy <- io reinvocationPolicy
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: MutatingWebhookArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("sideEffects")>]
                        member _.SideEffects((_cargs_, _args_: MutatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- input sideEffects
                            _cargs_, _args_

                        member _.SideEffects((_cargs_, _args_: MutatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- io sideEffects
                            _cargs_, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: MutatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: MutatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let mutatingWebhook = MutatingWebhookBuilder()

                [<AutoOpen>]
                module RuleWithOperations =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

                    type RuleWithOperationsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RuleWithOperationsArgs()
                        member _.Run(_cargs_, _args_: RuleWithOperationsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RuleWithOperationsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: RuleWithOperationsArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("apiVersions")>]
                        member _.ApiVersions((_cargs_, _args_: RuleWithOperationsArgs), apiVersions) =
                            _args_.ApiVersions <- inputList apiVersions
                            _cargs_, _args_

                        [<CustomOperation("operations")>]
                        member _.Operations((_cargs_, _args_: RuleWithOperationsArgs), operations) =
                            _args_.Operations <- inputList operations
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: RuleWithOperationsArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("scope")>]
                        member _.Scope((_cargs_, _args_: RuleWithOperationsArgs), scope) =
                            _args_.Scope <- input scope
                            _cargs_, _args_

                        member _.Scope((_cargs_, _args_: RuleWithOperationsArgs), scope) =
                            _args_.Scope <- io scope
                            _cargs_, _args_

                    let ruleWithOperations = RuleWithOperationsBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

                [<AutoOpen>]
                module ValidatingWebhook =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

                    type ValidatingWebhookBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookArgs()
                        member _.Run(_cargs_, _args_: ValidatingWebhookArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("admissionReviewVersions")>]
                        member _.AdmissionReviewVersions(
                            (_cargs_, _args_: ValidatingWebhookArgs),
                            admissionReviewVersions)
                            =
                            _args_.AdmissionReviewVersions <- inputList admissionReviewVersions
                            _cargs_, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: ValidatingWebhookArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("failurePolicy")>]
                        member _.FailurePolicy((_cargs_, _args_: ValidatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- input failurePolicy
                            _cargs_, _args_

                        member _.FailurePolicy((_cargs_, _args_: ValidatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- io failurePolicy
                            _cargs_, _args_

                        [<CustomOperation("matchPolicy")>]
                        member _.MatchPolicy((_cargs_, _args_: ValidatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- input matchPolicy
                            _cargs_, _args_

                        member _.MatchPolicy((_cargs_, _args_: ValidatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- io matchPolicy
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: ValidatingWebhookArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("objectSelector")>]
                        member _.ObjectSelector((_cargs_, _args_: ValidatingWebhookArgs), objectSelector) =
                            _args_.ObjectSelector <- input objectSelector
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: ValidatingWebhookArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("sideEffects")>]
                        member _.SideEffects((_cargs_, _args_: ValidatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- input sideEffects
                            _cargs_, _args_

                        member _.SideEffects((_cargs_, _args_: ValidatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- io sideEffects
                            _cargs_, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: ValidatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: ValidatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let validatingWebhook = ValidatingWebhookBuilder()

                [<AutoOpen>]
                module WebhookClientConfig =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

                    type WebhookClientConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookClientConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookClientConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookClientConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: WebhookClientConfigArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let webhookClientConfig = WebhookClientConfigBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module MutatingWebhook =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

                    type MutatingWebhookBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MutatingWebhookArgs()
                        member _.Run(_cargs_, _args_: MutatingWebhookArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MutatingWebhookArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("admissionReviewVersions")>]
                        member _.AdmissionReviewVersions((_cargs_, _args_: MutatingWebhookArgs), admissionReviewVersions) =
                            _args_.AdmissionReviewVersions <- inputList admissionReviewVersions
                            _cargs_, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: MutatingWebhookArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("failurePolicy")>]
                        member _.FailurePolicy((_cargs_, _args_: MutatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- input failurePolicy
                            _cargs_, _args_

                        member _.FailurePolicy((_cargs_, _args_: MutatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- io failurePolicy
                            _cargs_, _args_

                        [<CustomOperation("matchPolicy")>]
                        member _.MatchPolicy((_cargs_, _args_: MutatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- input matchPolicy
                            _cargs_, _args_

                        member _.MatchPolicy((_cargs_, _args_: MutatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- io matchPolicy
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: MutatingWebhookArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: MutatingWebhookArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: MutatingWebhookArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("objectSelector")>]
                        member _.ObjectSelector((_cargs_, _args_: MutatingWebhookArgs), objectSelector) =
                            _args_.ObjectSelector <- input objectSelector
                            _cargs_, _args_

                        [<CustomOperation("reinvocationPolicy")>]
                        member _.ReinvocationPolicy((_cargs_, _args_: MutatingWebhookArgs), reinvocationPolicy) =
                            _args_.ReinvocationPolicy <- input reinvocationPolicy
                            _cargs_, _args_

                        member _.ReinvocationPolicy((_cargs_, _args_: MutatingWebhookArgs), reinvocationPolicy) =
                            _args_.ReinvocationPolicy <- io reinvocationPolicy
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: MutatingWebhookArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("sideEffects")>]
                        member _.SideEffects((_cargs_, _args_: MutatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- input sideEffects
                            _cargs_, _args_

                        member _.SideEffects((_cargs_, _args_: MutatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- io sideEffects
                            _cargs_, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: MutatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: MutatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let mutatingWebhook = MutatingWebhookBuilder()

                [<AutoOpen>]
                module RuleWithOperations =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

                    type RuleWithOperationsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RuleWithOperationsArgs()
                        member _.Run(_cargs_, _args_: RuleWithOperationsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RuleWithOperationsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: RuleWithOperationsArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("apiVersions")>]
                        member _.ApiVersions((_cargs_, _args_: RuleWithOperationsArgs), apiVersions) =
                            _args_.ApiVersions <- inputList apiVersions
                            _cargs_, _args_

                        [<CustomOperation("operations")>]
                        member _.Operations((_cargs_, _args_: RuleWithOperationsArgs), operations) =
                            _args_.Operations <- inputList operations
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: RuleWithOperationsArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("scope")>]
                        member _.Scope((_cargs_, _args_: RuleWithOperationsArgs), scope) =
                            _args_.Scope <- input scope
                            _cargs_, _args_

                        member _.Scope((_cargs_, _args_: RuleWithOperationsArgs), scope) =
                            _args_.Scope <- io scope
                            _cargs_, _args_

                    let ruleWithOperations = RuleWithOperationsBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

                [<AutoOpen>]
                module ValidatingWebhook =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

                    type ValidatingWebhookBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookArgs()
                        member _.Run(_cargs_, _args_: ValidatingWebhookArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("admissionReviewVersions")>]
                        member _.AdmissionReviewVersions(
                            (_cargs_, _args_: ValidatingWebhookArgs),
                            admissionReviewVersions)
                            =
                            _args_.AdmissionReviewVersions <- inputList admissionReviewVersions
                            _cargs_, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: ValidatingWebhookArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("failurePolicy")>]
                        member _.FailurePolicy((_cargs_, _args_: ValidatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- input failurePolicy
                            _cargs_, _args_

                        member _.FailurePolicy((_cargs_, _args_: ValidatingWebhookArgs), failurePolicy) =
                            _args_.FailurePolicy <- io failurePolicy
                            _cargs_, _args_

                        [<CustomOperation("matchPolicy")>]
                        member _.MatchPolicy((_cargs_, _args_: ValidatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- input matchPolicy
                            _cargs_, _args_

                        member _.MatchPolicy((_cargs_, _args_: ValidatingWebhookArgs), matchPolicy) =
                            _args_.MatchPolicy <- io matchPolicy
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ValidatingWebhookArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: ValidatingWebhookArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("objectSelector")>]
                        member _.ObjectSelector((_cargs_, _args_: ValidatingWebhookArgs), objectSelector) =
                            _args_.ObjectSelector <- input objectSelector
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: ValidatingWebhookArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("sideEffects")>]
                        member _.SideEffects((_cargs_, _args_: ValidatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- input sideEffects
                            _cargs_, _args_

                        member _.SideEffects((_cargs_, _args_: ValidatingWebhookArgs), sideEffects) =
                            _args_.SideEffects <- io sideEffects
                            _cargs_, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: ValidatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: ValidatingWebhookArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let validatingWebhook = ValidatingWebhookBuilder()

                [<AutoOpen>]
                module WebhookClientConfig =
                    open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

                    type WebhookClientConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookClientConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookClientConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookClientConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: WebhookClientConfigArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let webhookClientConfig = WebhookClientConfigBuilder()

        module ApiExtensions =
            module V1 =
                [<AutoOpen>]
                module CustomResourceColumnDefinition =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceColumnDefinitionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceColumnDefinitionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceColumnDefinitionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("description")>]
                        member _.Description((_cargs_, _args_: CustomResourceColumnDefinitionArgs), description) =
                            _args_.Description <- input description
                            _cargs_, _args_

                        member _.Description((_cargs_, _args_: CustomResourceColumnDefinitionArgs), description) =
                            _args_.Description <- io description
                            _cargs_, _args_

                        [<CustomOperation("format")>]
                        member _.Format((_cargs_, _args_: CustomResourceColumnDefinitionArgs), format) =
                            _args_.Format <- input format
                            _cargs_, _args_

                        member _.Format((_cargs_, _args_: CustomResourceColumnDefinitionArgs), format) =
                            _args_.Format <- io format
                            _cargs_, _args_

                        [<CustomOperation("jsonPath")>]
                        member _.JsonPath((_cargs_, _args_: CustomResourceColumnDefinitionArgs), jsonPath) =
                            _args_.JsonPath <- input jsonPath
                            _cargs_, _args_

                        member _.JsonPath((_cargs_, _args_: CustomResourceColumnDefinitionArgs), jsonPath) =
                            _args_.JsonPath <- io jsonPath
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("priority")>]
                        member _.Priority((_cargs_, _args_: CustomResourceColumnDefinitionArgs), priority) =
                            _args_.Priority <- input priority
                            _cargs_, _args_

                        member _.Priority((_cargs_, _args_: CustomResourceColumnDefinitionArgs), priority) =
                            _args_.Priority <- io priority
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: CustomResourceColumnDefinitionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: CustomResourceColumnDefinitionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let customResourceColumnDefinition = CustomResourceColumnDefinitionBuilder()

                [<AutoOpen>]
                module CustomResourceConversion =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceConversionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceConversionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceConversionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceConversionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: CustomResourceConversionArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        member _.Strategy((_cargs_, _args_: CustomResourceConversionArgs), strategy) =
                            _args_.Strategy <- io strategy
                            _cargs_, _args_

                        [<CustomOperation("webhook")>]
                        member _.Webhook((_cargs_, _args_: CustomResourceConversionArgs), webhook) =
                            _args_.Webhook <- input webhook
                            _cargs_, _args_

                    let customResourceConversion = CustomResourceConversionBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionCondition =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceDefinitionConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionConditionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: CustomResourceDefinitionConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: CustomResourceDefinitionConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: CustomResourceDefinitionConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: CustomResourceDefinitionConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: CustomResourceDefinitionConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: CustomResourceDefinitionConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: CustomResourceDefinitionConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: CustomResourceDefinitionConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: CustomResourceDefinitionConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: CustomResourceDefinitionConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let customResourceDefinitionCondition =
                        CustomResourceDefinitionConditionBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionNames =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceDefinitionNamesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionNamesArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionNamesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionNamesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("categories")>]
                        member _.Categories((_cargs_, _args_: CustomResourceDefinitionNamesArgs), categories) =
                            _args_.Categories <- inputList categories
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("listKind")>]
                        member _.ListKind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), listKind) =
                            _args_.ListKind <- input listKind
                            _cargs_, _args_

                        member _.ListKind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), listKind) =
                            _args_.ListKind <- io listKind
                            _cargs_, _args_

                        [<CustomOperation("plural")>]
                        member _.Plural((_cargs_, _args_: CustomResourceDefinitionNamesArgs), plural) =
                            _args_.Plural <- input plural
                            _cargs_, _args_

                        member _.Plural((_cargs_, _args_: CustomResourceDefinitionNamesArgs), plural) =
                            _args_.Plural <- io plural
                            _cargs_, _args_

                        [<CustomOperation("shortNames")>]
                        member _.ShortNames((_cargs_, _args_: CustomResourceDefinitionNamesArgs), shortNames) =
                            _args_.ShortNames <- inputList shortNames
                            _cargs_, _args_

                        [<CustomOperation("singular")>]
                        member _.Singular((_cargs_, _args_: CustomResourceDefinitionNamesArgs), singular) =
                            _args_.Singular <- input singular
                            _cargs_, _args_

                        member _.Singular((_cargs_, _args_: CustomResourceDefinitionNamesArgs), singular) =
                            _args_.Singular <- io singular
                            _cargs_, _args_

                    let customResourceDefinitionNames = CustomResourceDefinitionNamesBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionSpec =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceDefinitionSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionSpecArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conversion")>]
                        member _.Conversion((_cargs_, _args_: CustomResourceDefinitionSpecArgs), conversion) =
                            _args_.Conversion <- input conversion
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: CustomResourceDefinitionSpecArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: CustomResourceDefinitionSpecArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("names")>]
                        member _.Names((_cargs_, _args_: CustomResourceDefinitionSpecArgs), names) =
                            _args_.Names <- input names
                            _cargs_, _args_

                        [<CustomOperation("preserveUnknownFields")>]
                        member _.PreserveUnknownFields(
                            (_cargs_, _args_: CustomResourceDefinitionSpecArgs),
                            preserveUnknownFields)
                            =
                            _args_.PreserveUnknownFields <- input preserveUnknownFields
                            _cargs_, _args_

                        member _.PreserveUnknownFields(
                            (_cargs_, _args_: CustomResourceDefinitionSpecArgs),
                            preserveUnknownFields)
                            =
                            _args_.PreserveUnknownFields <- io preserveUnknownFields
                            _cargs_, _args_

                        [<CustomOperation("scope")>]
                        member _.Scope((_cargs_, _args_: CustomResourceDefinitionSpecArgs), scope) =
                            _args_.Scope <- input scope
                            _cargs_, _args_

                        member _.Scope((_cargs_, _args_: CustomResourceDefinitionSpecArgs), scope) =
                            _args_.Scope <- io scope
                            _cargs_, _args_

                        [<CustomOperation("versions")>]
                        member _.Versions((_cargs_, _args_: CustomResourceDefinitionSpecArgs), versions) =
                            _args_.Versions <- inputList versions
                            _cargs_, _args_

                    let customResourceDefinitionSpec = CustomResourceDefinitionSpecBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionStatus =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceDefinitionStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionStatusArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("acceptedNames")>]
                        member _.AcceptedNames((_cargs_, _args_: CustomResourceDefinitionStatusArgs), acceptedNames) =
                            _args_.AcceptedNames <- input acceptedNames
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: CustomResourceDefinitionStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("storedVersions")>]
                        member _.StoredVersions((_cargs_, _args_: CustomResourceDefinitionStatusArgs), storedVersions) =
                            _args_.StoredVersions <- inputList storedVersions
                            _cargs_, _args_

                    let customResourceDefinitionStatus = CustomResourceDefinitionStatusBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionVersion =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceDefinitionVersionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionVersionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionVersionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("additionalPrinterColumns")>]
                        member _.AdditionalPrinterColumns(
                            (_cargs_, _args_: CustomResourceDefinitionVersionArgs),
                            additionalPrinterColumns)
                            =
                            _args_.AdditionalPrinterColumns <- inputList additionalPrinterColumns
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("schema")>]
                        member _.Schema((_cargs_, _args_: CustomResourceDefinitionVersionArgs), schema) =
                            _args_.Schema <- input schema
                            _cargs_, _args_

                        [<CustomOperation("served")>]
                        member _.Served((_cargs_, _args_: CustomResourceDefinitionVersionArgs), served) =
                            _args_.Served <- input served
                            _cargs_, _args_

                        member _.Served((_cargs_, _args_: CustomResourceDefinitionVersionArgs), served) =
                            _args_.Served <- io served
                            _cargs_, _args_

                        [<CustomOperation("storage")>]
                        member _.Storage((_cargs_, _args_: CustomResourceDefinitionVersionArgs), storage) =
                            _args_.Storage <- input storage
                            _cargs_, _args_

                        member _.Storage((_cargs_, _args_: CustomResourceDefinitionVersionArgs), storage) =
                            _args_.Storage <- io storage
                            _cargs_, _args_

                        [<CustomOperation("subresources")>]
                        member _.Subresources((_cargs_, _args_: CustomResourceDefinitionVersionArgs), subresources) =
                            _args_.Subresources <- input subresources
                            _cargs_, _args_

                    let customResourceDefinitionVersion = CustomResourceDefinitionVersionBuilder()

                [<AutoOpen>]
                module CustomResourceSubresourceScale =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceSubresourceScaleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceSubresourceScaleArgs()
                        member _.Run(_cargs_, _args_: CustomResourceSubresourceScaleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceSubresourceScaleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("labelSelectorPath")>]
                        member _.LabelSelectorPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            labelSelectorPath)
                            =
                            _args_.LabelSelectorPath <- input labelSelectorPath
                            _cargs_, _args_

                        member _.LabelSelectorPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            labelSelectorPath)
                            =
                            _args_.LabelSelectorPath <- io labelSelectorPath
                            _cargs_, _args_

                        [<CustomOperation("specReplicasPath")>]
                        member _.SpecReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            specReplicasPath)
                            =
                            _args_.SpecReplicasPath <- input specReplicasPath
                            _cargs_, _args_

                        member _.SpecReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            specReplicasPath)
                            =
                            _args_.SpecReplicasPath <- io specReplicasPath
                            _cargs_, _args_

                        [<CustomOperation("statusReplicasPath")>]
                        member _.StatusReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            statusReplicasPath)
                            =
                            _args_.StatusReplicasPath <- input statusReplicasPath
                            _cargs_, _args_

                        member _.StatusReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            statusReplicasPath)
                            =
                            _args_.StatusReplicasPath <- io statusReplicasPath
                            _cargs_, _args_

                    let customResourceSubresourceScale = CustomResourceSubresourceScaleBuilder()

                [<AutoOpen>]
                module CustomResourceValidation =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type CustomResourceValidationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceValidationArgs()
                        member _.Run(_cargs_, _args_: CustomResourceValidationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceValidationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("openAPIV3Schema")>]
                        member _.OpenAPIV3Schema((_cargs_, _args_: CustomResourceValidationArgs), openAPIV3Schema) =
                            _args_.OpenAPIV3Schema <- input openAPIV3Schema
                            _cargs_, _args_

                    let customResourceValidation = CustomResourceValidationBuilder()

                [<AutoOpen>]
                module ExternalDocumentation =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type ExternalDocumentationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalDocumentationArgs()
                        member _.Run(_cargs_, _args_: ExternalDocumentationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalDocumentationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("description")>]
                        member _.Description((_cargs_, _args_: ExternalDocumentationArgs), description) =
                            _args_.Description <- input description
                            _cargs_, _args_

                        member _.Description((_cargs_, _args_: ExternalDocumentationArgs), description) =
                            _args_.Description <- io description
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: ExternalDocumentationArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: ExternalDocumentationArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let externalDocumentation = ExternalDocumentationBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

                [<AutoOpen>]
                module WebhookClientConfig =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type WebhookClientConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookClientConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookClientConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookClientConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: WebhookClientConfigArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let webhookClientConfig = WebhookClientConfigBuilder()

                [<AutoOpen>]
                module WebhookConversion =
                    open Pulumi.Kubernetes.ApiExtensions.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

                    type WebhookConversionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookConversionArgs()
                        member _.Run(_cargs_, _args_: WebhookConversionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookConversionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: WebhookConversionArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("conversionReviewVersions")>]
                        member _.ConversionReviewVersions(
                            (_cargs_, _args_: WebhookConversionArgs),
                            conversionReviewVersions)
                            =
                            _args_.ConversionReviewVersions <- inputList conversionReviewVersions
                            _cargs_, _args_

                    let webhookConversion = WebhookConversionBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module CustomResourceColumnDefinition =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceColumnDefinitionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceColumnDefinitionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceColumnDefinitionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("jSONPath")>]
                        member _.JSONPath((_cargs_, _args_: CustomResourceColumnDefinitionArgs), jSONPath) =
                            _args_.JSONPath <- input jSONPath
                            _cargs_, _args_

                        member _.JSONPath((_cargs_, _args_: CustomResourceColumnDefinitionArgs), jSONPath) =
                            _args_.JSONPath <- io jSONPath
                            _cargs_, _args_

                        [<CustomOperation("description")>]
                        member _.Description((_cargs_, _args_: CustomResourceColumnDefinitionArgs), description) =
                            _args_.Description <- input description
                            _cargs_, _args_

                        member _.Description((_cargs_, _args_: CustomResourceColumnDefinitionArgs), description) =
                            _args_.Description <- io description
                            _cargs_, _args_

                        [<CustomOperation("format")>]
                        member _.Format((_cargs_, _args_: CustomResourceColumnDefinitionArgs), format) =
                            _args_.Format <- input format
                            _cargs_, _args_

                        member _.Format((_cargs_, _args_: CustomResourceColumnDefinitionArgs), format) =
                            _args_.Format <- io format
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CustomResourceColumnDefinitionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("priority")>]
                        member _.Priority((_cargs_, _args_: CustomResourceColumnDefinitionArgs), priority) =
                            _args_.Priority <- input priority
                            _cargs_, _args_

                        member _.Priority((_cargs_, _args_: CustomResourceColumnDefinitionArgs), priority) =
                            _args_.Priority <- io priority
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: CustomResourceColumnDefinitionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: CustomResourceColumnDefinitionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let customResourceColumnDefinition = CustomResourceColumnDefinitionBuilder()

                [<AutoOpen>]
                module CustomResourceConversion =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceConversionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceConversionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceConversionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceConversionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conversionReviewVersions")>]
                        member _.ConversionReviewVersions(
                            (_cargs_, _args_: CustomResourceConversionArgs),
                            conversionReviewVersions)
                            =
                            _args_.ConversionReviewVersions <- inputList conversionReviewVersions
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: CustomResourceConversionArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        member _.Strategy((_cargs_, _args_: CustomResourceConversionArgs), strategy) =
                            _args_.Strategy <- io strategy
                            _cargs_, _args_

                        [<CustomOperation("webhookClientConfig")>]
                        member _.WebhookClientConfig(
                            (_cargs_, _args_: CustomResourceConversionArgs),
                            webhookClientConfig)
                            =
                            _args_.WebhookClientConfig <- input webhookClientConfig
                            _cargs_, _args_

                    let customResourceConversion = CustomResourceConversionBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionCondition =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceDefinitionConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionConditionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: CustomResourceDefinitionConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: CustomResourceDefinitionConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: CustomResourceDefinitionConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: CustomResourceDefinitionConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: CustomResourceDefinitionConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: CustomResourceDefinitionConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: CustomResourceDefinitionConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: CustomResourceDefinitionConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: CustomResourceDefinitionConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: CustomResourceDefinitionConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let customResourceDefinitionCondition =
                        CustomResourceDefinitionConditionBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionNames =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceDefinitionNamesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionNamesArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionNamesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionNamesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("categories")>]
                        member _.Categories((_cargs_, _args_: CustomResourceDefinitionNamesArgs), categories) =
                            _args_.Categories <- inputList categories
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("listKind")>]
                        member _.ListKind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), listKind) =
                            _args_.ListKind <- input listKind
                            _cargs_, _args_

                        member _.ListKind((_cargs_, _args_: CustomResourceDefinitionNamesArgs), listKind) =
                            _args_.ListKind <- io listKind
                            _cargs_, _args_

                        [<CustomOperation("plural")>]
                        member _.Plural((_cargs_, _args_: CustomResourceDefinitionNamesArgs), plural) =
                            _args_.Plural <- input plural
                            _cargs_, _args_

                        member _.Plural((_cargs_, _args_: CustomResourceDefinitionNamesArgs), plural) =
                            _args_.Plural <- io plural
                            _cargs_, _args_

                        [<CustomOperation("shortNames")>]
                        member _.ShortNames((_cargs_, _args_: CustomResourceDefinitionNamesArgs), shortNames) =
                            _args_.ShortNames <- inputList shortNames
                            _cargs_, _args_

                        [<CustomOperation("singular")>]
                        member _.Singular((_cargs_, _args_: CustomResourceDefinitionNamesArgs), singular) =
                            _args_.Singular <- input singular
                            _cargs_, _args_

                        member _.Singular((_cargs_, _args_: CustomResourceDefinitionNamesArgs), singular) =
                            _args_.Singular <- io singular
                            _cargs_, _args_

                    let customResourceDefinitionNames = CustomResourceDefinitionNamesBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionSpec =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceDefinitionSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionSpecArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("additionalPrinterColumns")>]
                        member _.AdditionalPrinterColumns(
                            (_cargs_, _args_: CustomResourceDefinitionSpecArgs),
                            additionalPrinterColumns)
                            =
                            _args_.AdditionalPrinterColumns <- inputList additionalPrinterColumns
                            _cargs_, _args_

                        [<CustomOperation("conversion")>]
                        member _.Conversion((_cargs_, _args_: CustomResourceDefinitionSpecArgs), conversion) =
                            _args_.Conversion <- input conversion
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: CustomResourceDefinitionSpecArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: CustomResourceDefinitionSpecArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("names")>]
                        member _.Names((_cargs_, _args_: CustomResourceDefinitionSpecArgs), names) =
                            _args_.Names <- input names
                            _cargs_, _args_

                        [<CustomOperation("preserveUnknownFields")>]
                        member _.PreserveUnknownFields(
                            (_cargs_, _args_: CustomResourceDefinitionSpecArgs),
                            preserveUnknownFields)
                            =
                            _args_.PreserveUnknownFields <- input preserveUnknownFields
                            _cargs_, _args_

                        member _.PreserveUnknownFields(
                            (_cargs_, _args_: CustomResourceDefinitionSpecArgs),
                            preserveUnknownFields)
                            =
                            _args_.PreserveUnknownFields <- io preserveUnknownFields
                            _cargs_, _args_

                        [<CustomOperation("scope")>]
                        member _.Scope((_cargs_, _args_: CustomResourceDefinitionSpecArgs), scope) =
                            _args_.Scope <- input scope
                            _cargs_, _args_

                        member _.Scope((_cargs_, _args_: CustomResourceDefinitionSpecArgs), scope) =
                            _args_.Scope <- io scope
                            _cargs_, _args_

                        [<CustomOperation("subresources")>]
                        member _.Subresources((_cargs_, _args_: CustomResourceDefinitionSpecArgs), subresources) =
                            _args_.Subresources <- input subresources
                            _cargs_, _args_

                        [<CustomOperation("validation")>]
                        member _.Validation((_cargs_, _args_: CustomResourceDefinitionSpecArgs), validation) =
                            _args_.Validation <- input validation
                            _cargs_, _args_

                        [<CustomOperation("version")>]
                        member _.Version((_cargs_, _args_: CustomResourceDefinitionSpecArgs), version) =
                            _args_.Version <- input version
                            _cargs_, _args_

                        member _.Version((_cargs_, _args_: CustomResourceDefinitionSpecArgs), version) =
                            _args_.Version <- io version
                            _cargs_, _args_

                        [<CustomOperation("versions")>]
                        member _.Versions((_cargs_, _args_: CustomResourceDefinitionSpecArgs), versions) =
                            _args_.Versions <- inputList versions
                            _cargs_, _args_

                    let customResourceDefinitionSpec = CustomResourceDefinitionSpecBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionStatus =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceDefinitionStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionStatusArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("acceptedNames")>]
                        member _.AcceptedNames((_cargs_, _args_: CustomResourceDefinitionStatusArgs), acceptedNames) =
                            _args_.AcceptedNames <- input acceptedNames
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: CustomResourceDefinitionStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("storedVersions")>]
                        member _.StoredVersions((_cargs_, _args_: CustomResourceDefinitionStatusArgs), storedVersions) =
                            _args_.StoredVersions <- inputList storedVersions
                            _cargs_, _args_

                    let customResourceDefinitionStatus = CustomResourceDefinitionStatusBuilder()

                [<AutoOpen>]
                module CustomResourceDefinitionVersion =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceDefinitionVersionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionVersionArgs()
                        member _.Run(_cargs_, _args_: CustomResourceDefinitionVersionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("additionalPrinterColumns")>]
                        member _.AdditionalPrinterColumns(
                            (_cargs_, _args_: CustomResourceDefinitionVersionArgs),
                            additionalPrinterColumns)
                            =
                            _args_.AdditionalPrinterColumns <- inputList additionalPrinterColumns
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CustomResourceDefinitionVersionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("schema")>]
                        member _.Schema((_cargs_, _args_: CustomResourceDefinitionVersionArgs), schema) =
                            _args_.Schema <- input schema
                            _cargs_, _args_

                        [<CustomOperation("served")>]
                        member _.Served((_cargs_, _args_: CustomResourceDefinitionVersionArgs), served) =
                            _args_.Served <- input served
                            _cargs_, _args_

                        member _.Served((_cargs_, _args_: CustomResourceDefinitionVersionArgs), served) =
                            _args_.Served <- io served
                            _cargs_, _args_

                        [<CustomOperation("storage")>]
                        member _.Storage((_cargs_, _args_: CustomResourceDefinitionVersionArgs), storage) =
                            _args_.Storage <- input storage
                            _cargs_, _args_

                        member _.Storage((_cargs_, _args_: CustomResourceDefinitionVersionArgs), storage) =
                            _args_.Storage <- io storage
                            _cargs_, _args_

                        [<CustomOperation("subresources")>]
                        member _.Subresources((_cargs_, _args_: CustomResourceDefinitionVersionArgs), subresources) =
                            _args_.Subresources <- input subresources
                            _cargs_, _args_

                    let customResourceDefinitionVersion = CustomResourceDefinitionVersionBuilder()

                [<AutoOpen>]
                module CustomResourceSubresourceScale =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceSubresourceScaleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceSubresourceScaleArgs()
                        member _.Run(_cargs_, _args_: CustomResourceSubresourceScaleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceSubresourceScaleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("labelSelectorPath")>]
                        member _.LabelSelectorPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            labelSelectorPath)
                            =
                            _args_.LabelSelectorPath <- input labelSelectorPath
                            _cargs_, _args_

                        member _.LabelSelectorPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            labelSelectorPath)
                            =
                            _args_.LabelSelectorPath <- io labelSelectorPath
                            _cargs_, _args_

                        [<CustomOperation("specReplicasPath")>]
                        member _.SpecReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            specReplicasPath)
                            =
                            _args_.SpecReplicasPath <- input specReplicasPath
                            _cargs_, _args_

                        member _.SpecReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            specReplicasPath)
                            =
                            _args_.SpecReplicasPath <- io specReplicasPath
                            _cargs_, _args_

                        [<CustomOperation("statusReplicasPath")>]
                        member _.StatusReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            statusReplicasPath)
                            =
                            _args_.StatusReplicasPath <- input statusReplicasPath
                            _cargs_, _args_

                        member _.StatusReplicasPath(
                            (_cargs_, _args_: CustomResourceSubresourceScaleArgs),
                            statusReplicasPath)
                            =
                            _args_.StatusReplicasPath <- io statusReplicasPath
                            _cargs_, _args_

                    let customResourceSubresourceScale = CustomResourceSubresourceScaleBuilder()

                [<AutoOpen>]
                module CustomResourceValidation =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type CustomResourceValidationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CustomResourceValidationArgs()
                        member _.Run(_cargs_, _args_: CustomResourceValidationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CustomResourceValidationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("openAPIV3Schema")>]
                        member _.OpenAPIV3Schema((_cargs_, _args_: CustomResourceValidationArgs), openAPIV3Schema) =
                            _args_.OpenAPIV3Schema <- input openAPIV3Schema
                            _cargs_, _args_

                    let customResourceValidation = CustomResourceValidationBuilder()

                [<AutoOpen>]
                module ExternalDocumentation =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type ExternalDocumentationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalDocumentationArgs()
                        member _.Run(_cargs_, _args_: ExternalDocumentationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalDocumentationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("description")>]
                        member _.Description((_cargs_, _args_: ExternalDocumentationArgs), description) =
                            _args_.Description <- input description
                            _cargs_, _args_

                        member _.Description((_cargs_, _args_: ExternalDocumentationArgs), description) =
                            _args_.Description <- io description
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: ExternalDocumentationArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: ExternalDocumentationArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let externalDocumentation = ExternalDocumentationBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

                [<AutoOpen>]
                module WebhookClientConfig =
                    open Pulumi.Kubernetes.ApiExtensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

                    type WebhookClientConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookClientConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookClientConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookClientConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: WebhookClientConfigArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let webhookClientConfig = WebhookClientConfigBuilder()

        module ApiRegistration =
            module V1 =
                [<AutoOpen>]
                module APIServiceCondition =
                    open Pulumi.Kubernetes.ApiRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

                    type APIServiceConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceConditionArgs()
                        member _.Run(_cargs_, _args_: APIServiceConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: APIServiceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: APIServiceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: APIServiceConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: APIServiceConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: APIServiceConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: APIServiceConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: APIServiceConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: APIServiceConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: APIServiceConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: APIServiceConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let aPIServiceCondition = APIServiceConditionBuilder()

                [<AutoOpen>]
                module APIServiceSpec =
                    open Pulumi.Kubernetes.ApiRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

                    type APIServiceSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceSpecArgs()
                        member _.Run(_cargs_, _args_: APIServiceSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: APIServiceSpecArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: APIServiceSpecArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: APIServiceSpecArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: APIServiceSpecArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("groupPriorityMinimum")>]
                        member _.GroupPriorityMinimum((_cargs_, _args_: APIServiceSpecArgs), groupPriorityMinimum) =
                            _args_.GroupPriorityMinimum <- input groupPriorityMinimum
                            _cargs_, _args_

                        member _.GroupPriorityMinimum((_cargs_, _args_: APIServiceSpecArgs), groupPriorityMinimum) =
                            _args_.GroupPriorityMinimum <- io groupPriorityMinimum
                            _cargs_, _args_

                        [<CustomOperation("insecureSkipTLSVerify")>]
                        member _.InsecureSkipTLSVerify((_cargs_, _args_: APIServiceSpecArgs), insecureSkipTLSVerify) =
                            _args_.InsecureSkipTLSVerify <- input insecureSkipTLSVerify
                            _cargs_, _args_

                        member _.InsecureSkipTLSVerify((_cargs_, _args_: APIServiceSpecArgs), insecureSkipTLSVerify) =
                            _args_.InsecureSkipTLSVerify <- io insecureSkipTLSVerify
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: APIServiceSpecArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("version")>]
                        member _.Version((_cargs_, _args_: APIServiceSpecArgs), version) =
                            _args_.Version <- input version
                            _cargs_, _args_

                        member _.Version((_cargs_, _args_: APIServiceSpecArgs), version) =
                            _args_.Version <- io version
                            _cargs_, _args_

                        [<CustomOperation("versionPriority")>]
                        member _.VersionPriority((_cargs_, _args_: APIServiceSpecArgs), versionPriority) =
                            _args_.VersionPriority <- input versionPriority
                            _cargs_, _args_

                        member _.VersionPriority((_cargs_, _args_: APIServiceSpecArgs), versionPriority) =
                            _args_.VersionPriority <- io versionPriority
                            _cargs_, _args_

                    let aPIServiceSpec = APIServiceSpecBuilder()

                [<AutoOpen>]
                module APIServiceStatus =
                    open Pulumi.Kubernetes.ApiRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

                    type APIServiceStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceStatusArgs()
                        member _.Run(_cargs_, _args_: APIServiceStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: APIServiceStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                    let aPIServiceStatus = APIServiceStatusBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.ApiRegistration.V1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module APIServiceCondition =
                    open Pulumi.Kubernetes.ApiRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

                    type APIServiceConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceConditionArgs()
                        member _.Run(_cargs_, _args_: APIServiceConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: APIServiceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: APIServiceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: APIServiceConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: APIServiceConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: APIServiceConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: APIServiceConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: APIServiceConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: APIServiceConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: APIServiceConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: APIServiceConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let aPIServiceCondition = APIServiceConditionBuilder()

                [<AutoOpen>]
                module APIServiceSpec =
                    open Pulumi.Kubernetes.ApiRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

                    type APIServiceSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceSpecArgs()
                        member _.Run(_cargs_, _args_: APIServiceSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: APIServiceSpecArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: APIServiceSpecArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: APIServiceSpecArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: APIServiceSpecArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("groupPriorityMinimum")>]
                        member _.GroupPriorityMinimum((_cargs_, _args_: APIServiceSpecArgs), groupPriorityMinimum) =
                            _args_.GroupPriorityMinimum <- input groupPriorityMinimum
                            _cargs_, _args_

                        member _.GroupPriorityMinimum((_cargs_, _args_: APIServiceSpecArgs), groupPriorityMinimum) =
                            _args_.GroupPriorityMinimum <- io groupPriorityMinimum
                            _cargs_, _args_

                        [<CustomOperation("insecureSkipTLSVerify")>]
                        member _.InsecureSkipTLSVerify((_cargs_, _args_: APIServiceSpecArgs), insecureSkipTLSVerify) =
                            _args_.InsecureSkipTLSVerify <- input insecureSkipTLSVerify
                            _cargs_, _args_

                        member _.InsecureSkipTLSVerify((_cargs_, _args_: APIServiceSpecArgs), insecureSkipTLSVerify) =
                            _args_.InsecureSkipTLSVerify <- io insecureSkipTLSVerify
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: APIServiceSpecArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("version")>]
                        member _.Version((_cargs_, _args_: APIServiceSpecArgs), version) =
                            _args_.Version <- input version
                            _cargs_, _args_

                        member _.Version((_cargs_, _args_: APIServiceSpecArgs), version) =
                            _args_.Version <- io version
                            _cargs_, _args_

                        [<CustomOperation("versionPriority")>]
                        member _.VersionPriority((_cargs_, _args_: APIServiceSpecArgs), versionPriority) =
                            _args_.VersionPriority <- input versionPriority
                            _cargs_, _args_

                        member _.VersionPriority((_cargs_, _args_: APIServiceSpecArgs), versionPriority) =
                            _args_.VersionPriority <- io versionPriority
                            _cargs_, _args_

                    let aPIServiceSpec = APIServiceSpecBuilder()

                [<AutoOpen>]
                module APIServiceStatus =
                    open Pulumi.Kubernetes.ApiRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

                    type APIServiceStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, APIServiceStatusArgs()
                        member _.Run(_cargs_, _args_: APIServiceStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: APIServiceStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: APIServiceStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                    let aPIServiceStatus = APIServiceStatusBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.ApiRegistration.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

        module Apps =
            module V1 =
                [<AutoOpen>]
                module DaemonSetCondition =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DaemonSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetConditionArgs()
                        member _.Run(_cargs_, _args_: DaemonSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetCondition = DaemonSetConditionBuilder()

                [<AutoOpen>]
                module DaemonSetSpec =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DaemonSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetSpecArgs()
                        member _.Run(_cargs_, _args_: DaemonSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DaemonSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DaemonSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: DaemonSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                    let daemonSetSpec = DaemonSetSpecBuilder()

                [<AutoOpen>]
                module DaemonSetStatus =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DaemonSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetStatusArgs()
                        member _.Run(_cargs_, _args_: DaemonSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DaemonSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentNumberScheduled")>]
                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- input currentNumberScheduled
                            _cargs_, _args_

                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- io currentNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("desiredNumberScheduled")>]
                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- input desiredNumberScheduled
                            _cargs_, _args_

                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- io desiredNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("numberAvailable")>]
                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- input numberAvailable
                            _cargs_, _args_

                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- io numberAvailable
                            _cargs_, _args_

                        [<CustomOperation("numberMisscheduled")>]
                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- input numberMisscheduled
                            _cargs_, _args_

                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- io numberMisscheduled
                            _cargs_, _args_

                        [<CustomOperation("numberReady")>]
                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- input numberReady
                            _cargs_, _args_

                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- io numberReady
                            _cargs_, _args_

                        [<CustomOperation("numberUnavailable")>]
                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- input numberUnavailable
                            _cargs_, _args_

                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- io numberUnavailable
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("updatedNumberScheduled")>]
                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- input updatedNumberScheduled
                            _cargs_, _args_

                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- io updatedNumberScheduled
                            _cargs_, _args_

                    let daemonSetStatus = DaemonSetStatusBuilder()

                [<AutoOpen>]
                module DaemonSetUpdateStrategy =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DaemonSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: DaemonSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DaemonSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetUpdateStrategy = DaemonSetUpdateStrategyBuilder()

                [<AutoOpen>]
                module DeploymentCondition =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DeploymentConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentConditionArgs()
                        member _.Run(_cargs_, _args_: DeploymentConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("lastUpdateTime")>]
                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- input lastUpdateTime
                            _cargs_, _args_

                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- io lastUpdateTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentCondition = DeploymentConditionBuilder()

                [<AutoOpen>]
                module DeploymentSpec =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DeploymentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentSpecArgs()
                        member _.Run(_cargs_, _args_: DeploymentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("paused")>]
                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- input paused
                            _cargs_, _args_

                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- io paused
                            _cargs_, _args_

                        [<CustomOperation("progressDeadlineSeconds")>]
                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- input progressDeadlineSeconds
                            _cargs_, _args_

                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- io progressDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DeploymentSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: DeploymentSpecArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DeploymentSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let deploymentSpec = DeploymentSpecBuilder()

                [<AutoOpen>]
                module DeploymentStatus =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DeploymentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStatusArgs()
                        member _.Run(_cargs_, _args_: DeploymentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DeploymentStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("unavailableReplicas")>]
                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- input unavailableReplicas
                            _cargs_, _args_

                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- io unavailableReplicas
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let deploymentStatus = DeploymentStatusBuilder()

                [<AutoOpen>]
                module DeploymentStrategy =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type DeploymentStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStrategyArgs()
                        member _.Run(_cargs_, _args_: DeploymentStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DeploymentStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentStrategy = DeploymentStrategyBuilder()

                [<AutoOpen>]
                module ReplicaSetCondition =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type ReplicaSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetConditionArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let replicaSetCondition = ReplicaSetConditionBuilder()

                [<AutoOpen>]
                module ReplicaSetSpec =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type ReplicaSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetSpecArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ReplicaSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: ReplicaSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let replicaSetSpec = ReplicaSetSpecBuilder()

                [<AutoOpen>]
                module ReplicaSetStatus =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type ReplicaSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetStatusArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: ReplicaSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("fullyLabeledReplicas")>]
                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- input fullyLabeledReplicas
                            _cargs_, _args_

                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- io fullyLabeledReplicas
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                    let replicaSetStatus = ReplicaSetStatusBuilder()

                [<AutoOpen>]
                module RollingUpdateStatefulSetStrategy =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type RollingUpdateStatefulSetStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RollingUpdateStatefulSetStrategyArgs()
                        member _.Run(_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("partition")>]
                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- input partition
                            _cargs_, _args_

                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- io partition
                            _cargs_, _args_

                    let rollingUpdateStatefulSetStrategy =
                        RollingUpdateStatefulSetStrategyBuilder()

                [<AutoOpen>]
                module StatefulSetCondition =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type StatefulSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetConditionArgs()
                        member _.Run(_cargs_, _args_: StatefulSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetCondition = StatefulSetConditionBuilder()

                [<AutoOpen>]
                module StatefulSetSpec =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type StatefulSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetSpecArgs()
                        member _.Run(_cargs_, _args_: StatefulSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podManagementPolicy")>]
                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- input podManagementPolicy
                            _cargs_, _args_

                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- io podManagementPolicy
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: StatefulSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("serviceName")>]
                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- input serviceName
                            _cargs_, _args_

                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- io serviceName
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: StatefulSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: StatefulSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                        [<CustomOperation("volumeClaimTemplates")>]
                        member _.VolumeClaimTemplates((_cargs_, _args_: StatefulSetSpecArgs), volumeClaimTemplates) =
                            _args_.VolumeClaimTemplates <- inputList volumeClaimTemplates
                            _cargs_, _args_

                    let statefulSetSpec = StatefulSetSpecBuilder()

                [<AutoOpen>]
                module StatefulSetStatus =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type StatefulSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetStatusArgs()
                        member _.Run(_cargs_, _args_: StatefulSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: StatefulSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("currentRevision")>]
                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- input currentRevision
                            _cargs_, _args_

                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- io currentRevision
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("updateRevision")>]
                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- input updateRevision
                            _cargs_, _args_

                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- io updateRevision
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let statefulSetStatus = StatefulSetStatusBuilder()

                [<AutoOpen>]
                module StatefulSetUpdateStrategy =
                    open Pulumi.Kubernetes.Apps.V1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1

                    type StatefulSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: StatefulSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: StatefulSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetUpdateStrategy = StatefulSetUpdateStrategyBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module DeploymentCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type DeploymentConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentConditionArgs()
                        member _.Run(_cargs_, _args_: DeploymentConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("lastUpdateTime")>]
                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- input lastUpdateTime
                            _cargs_, _args_

                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- io lastUpdateTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentCondition = DeploymentConditionBuilder()

                [<AutoOpen>]
                module DeploymentSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type DeploymentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentSpecArgs()
                        member _.Run(_cargs_, _args_: DeploymentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("paused")>]
                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- input paused
                            _cargs_, _args_

                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- io paused
                            _cargs_, _args_

                        [<CustomOperation("progressDeadlineSeconds")>]
                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- input progressDeadlineSeconds
                            _cargs_, _args_

                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- io progressDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("rollbackTo")>]
                        member _.RollbackTo((_cargs_, _args_: DeploymentSpecArgs), rollbackTo) =
                            _args_.RollbackTo <- input rollbackTo
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DeploymentSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: DeploymentSpecArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DeploymentSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let deploymentSpec = DeploymentSpecBuilder()

                [<AutoOpen>]
                module DeploymentStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type DeploymentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStatusArgs()
                        member _.Run(_cargs_, _args_: DeploymentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DeploymentStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("unavailableReplicas")>]
                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- input unavailableReplicas
                            _cargs_, _args_

                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- io unavailableReplicas
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let deploymentStatus = DeploymentStatusBuilder()

                [<AutoOpen>]
                module DeploymentStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type DeploymentStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStrategyArgs()
                        member _.Run(_cargs_, _args_: DeploymentStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DeploymentStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentStrategy = DeploymentStrategyBuilder()

                [<AutoOpen>]
                module RollbackConfig =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type RollbackConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RollbackConfigArgs()
                        member _.Run(_cargs_, _args_: RollbackConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RollbackConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("revision")>]
                        member _.Revision((_cargs_, _args_: RollbackConfigArgs), revision) =
                            _args_.Revision <- input revision
                            _cargs_, _args_

                        member _.Revision((_cargs_, _args_: RollbackConfigArgs), revision) =
                            _args_.Revision <- io revision
                            _cargs_, _args_

                    let rollbackConfig = RollbackConfigBuilder()

                [<AutoOpen>]
                module RollingUpdateStatefulSetStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type RollingUpdateStatefulSetStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RollingUpdateStatefulSetStrategyArgs()
                        member _.Run(_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("partition")>]
                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- input partition
                            _cargs_, _args_

                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- io partition
                            _cargs_, _args_

                    let rollingUpdateStatefulSetStrategy =
                        RollingUpdateStatefulSetStrategyBuilder()

                [<AutoOpen>]
                module StatefulSetCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type StatefulSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetConditionArgs()
                        member _.Run(_cargs_, _args_: StatefulSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetCondition = StatefulSetConditionBuilder()

                [<AutoOpen>]
                module StatefulSetSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type StatefulSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetSpecArgs()
                        member _.Run(_cargs_, _args_: StatefulSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podManagementPolicy")>]
                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- input podManagementPolicy
                            _cargs_, _args_

                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- io podManagementPolicy
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: StatefulSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("serviceName")>]
                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- input serviceName
                            _cargs_, _args_

                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- io serviceName
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: StatefulSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: StatefulSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                        [<CustomOperation("volumeClaimTemplates")>]
                        member _.VolumeClaimTemplates((_cargs_, _args_: StatefulSetSpecArgs), volumeClaimTemplates) =
                            _args_.VolumeClaimTemplates <- inputList volumeClaimTemplates
                            _cargs_, _args_

                    let statefulSetSpec = StatefulSetSpecBuilder()

                [<AutoOpen>]
                module StatefulSetStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type StatefulSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetStatusArgs()
                        member _.Run(_cargs_, _args_: StatefulSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: StatefulSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("currentRevision")>]
                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- input currentRevision
                            _cargs_, _args_

                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- io currentRevision
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("updateRevision")>]
                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- input updateRevision
                            _cargs_, _args_

                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- io updateRevision
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let statefulSetStatus = StatefulSetStatusBuilder()

                [<AutoOpen>]
                module StatefulSetUpdateStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

                    type StatefulSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: StatefulSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: StatefulSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetUpdateStrategy = StatefulSetUpdateStrategyBuilder()

            module V1Beta2 =
                [<AutoOpen>]
                module DaemonSetCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DaemonSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetConditionArgs()
                        member _.Run(_cargs_, _args_: DaemonSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetCondition = DaemonSetConditionBuilder()

                [<AutoOpen>]
                module DaemonSetSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DaemonSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetSpecArgs()
                        member _.Run(_cargs_, _args_: DaemonSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DaemonSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DaemonSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: DaemonSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                    let daemonSetSpec = DaemonSetSpecBuilder()

                [<AutoOpen>]
                module DaemonSetStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DaemonSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetStatusArgs()
                        member _.Run(_cargs_, _args_: DaemonSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DaemonSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentNumberScheduled")>]
                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- input currentNumberScheduled
                            _cargs_, _args_

                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- io currentNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("desiredNumberScheduled")>]
                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- input desiredNumberScheduled
                            _cargs_, _args_

                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- io desiredNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("numberAvailable")>]
                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- input numberAvailable
                            _cargs_, _args_

                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- io numberAvailable
                            _cargs_, _args_

                        [<CustomOperation("numberMisscheduled")>]
                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- input numberMisscheduled
                            _cargs_, _args_

                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- io numberMisscheduled
                            _cargs_, _args_

                        [<CustomOperation("numberReady")>]
                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- input numberReady
                            _cargs_, _args_

                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- io numberReady
                            _cargs_, _args_

                        [<CustomOperation("numberUnavailable")>]
                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- input numberUnavailable
                            _cargs_, _args_

                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- io numberUnavailable
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("updatedNumberScheduled")>]
                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- input updatedNumberScheduled
                            _cargs_, _args_

                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- io updatedNumberScheduled
                            _cargs_, _args_

                    let daemonSetStatus = DaemonSetStatusBuilder()

                [<AutoOpen>]
                module DaemonSetUpdateStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DaemonSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: DaemonSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DaemonSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetUpdateStrategy = DaemonSetUpdateStrategyBuilder()

                [<AutoOpen>]
                module DeploymentCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DeploymentConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentConditionArgs()
                        member _.Run(_cargs_, _args_: DeploymentConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("lastUpdateTime")>]
                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- input lastUpdateTime
                            _cargs_, _args_

                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- io lastUpdateTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentCondition = DeploymentConditionBuilder()

                [<AutoOpen>]
                module DeploymentSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DeploymentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentSpecArgs()
                        member _.Run(_cargs_, _args_: DeploymentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("paused")>]
                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- input paused
                            _cargs_, _args_

                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- io paused
                            _cargs_, _args_

                        [<CustomOperation("progressDeadlineSeconds")>]
                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- input progressDeadlineSeconds
                            _cargs_, _args_

                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- io progressDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DeploymentSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: DeploymentSpecArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DeploymentSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let deploymentSpec = DeploymentSpecBuilder()

                [<AutoOpen>]
                module DeploymentStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DeploymentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStatusArgs()
                        member _.Run(_cargs_, _args_: DeploymentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DeploymentStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("unavailableReplicas")>]
                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- input unavailableReplicas
                            _cargs_, _args_

                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- io unavailableReplicas
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let deploymentStatus = DeploymentStatusBuilder()

                [<AutoOpen>]
                module DeploymentStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type DeploymentStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStrategyArgs()
                        member _.Run(_cargs_, _args_: DeploymentStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DeploymentStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentStrategy = DeploymentStrategyBuilder()

                [<AutoOpen>]
                module ReplicaSetCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type ReplicaSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetConditionArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let replicaSetCondition = ReplicaSetConditionBuilder()

                [<AutoOpen>]
                module ReplicaSetSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type ReplicaSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetSpecArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ReplicaSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: ReplicaSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let replicaSetSpec = ReplicaSetSpecBuilder()

                [<AutoOpen>]
                module ReplicaSetStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type ReplicaSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetStatusArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: ReplicaSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("fullyLabeledReplicas")>]
                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- input fullyLabeledReplicas
                            _cargs_, _args_

                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- io fullyLabeledReplicas
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                    let replicaSetStatus = ReplicaSetStatusBuilder()

                [<AutoOpen>]
                module RollingUpdateStatefulSetStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type RollingUpdateStatefulSetStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RollingUpdateStatefulSetStrategyArgs()
                        member _.Run(_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("partition")>]
                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- input partition
                            _cargs_, _args_

                        member _.Partition((_cargs_, _args_: RollingUpdateStatefulSetStrategyArgs), partition) =
                            _args_.Partition <- io partition
                            _cargs_, _args_

                    let rollingUpdateStatefulSetStrategy =
                        RollingUpdateStatefulSetStrategyBuilder()

                [<AutoOpen>]
                module StatefulSetCondition =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type StatefulSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetConditionArgs()
                        member _.Run(_cargs_, _args_: StatefulSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: StatefulSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: StatefulSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: StatefulSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: StatefulSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetCondition = StatefulSetConditionBuilder()

                [<AutoOpen>]
                module StatefulSetSpec =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type StatefulSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetSpecArgs()
                        member _.Run(_cargs_, _args_: StatefulSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podManagementPolicy")>]
                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- input podManagementPolicy
                            _cargs_, _args_

                        member _.PodManagementPolicy((_cargs_, _args_: StatefulSetSpecArgs), podManagementPolicy) =
                            _args_.PodManagementPolicy <- io podManagementPolicy
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: StatefulSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: StatefulSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("serviceName")>]
                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- input serviceName
                            _cargs_, _args_

                        member _.ServiceName((_cargs_, _args_: StatefulSetSpecArgs), serviceName) =
                            _args_.ServiceName <- io serviceName
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: StatefulSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: StatefulSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                        [<CustomOperation("volumeClaimTemplates")>]
                        member _.VolumeClaimTemplates((_cargs_, _args_: StatefulSetSpecArgs), volumeClaimTemplates) =
                            _args_.VolumeClaimTemplates <- inputList volumeClaimTemplates
                            _cargs_, _args_

                    let statefulSetSpec = StatefulSetSpecBuilder()

                [<AutoOpen>]
                module StatefulSetStatus =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type StatefulSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetStatusArgs()
                        member _.Run(_cargs_, _args_: StatefulSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: StatefulSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: StatefulSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: StatefulSetStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("currentRevision")>]
                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- input currentRevision
                            _cargs_, _args_

                        member _.CurrentRevision((_cargs_, _args_: StatefulSetStatusArgs), currentRevision) =
                            _args_.CurrentRevision <- io currentRevision
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: StatefulSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: StatefulSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: StatefulSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("updateRevision")>]
                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- input updateRevision
                            _cargs_, _args_

                        member _.UpdateRevision((_cargs_, _args_: StatefulSetStatusArgs), updateRevision) =
                            _args_.UpdateRevision <- io updateRevision
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: StatefulSetStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let statefulSetStatus = StatefulSetStatusBuilder()

                [<AutoOpen>]
                module StatefulSetUpdateStrategy =
                    open Pulumi.Kubernetes.Apps.V1Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

                    type StatefulSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatefulSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: StatefulSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatefulSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: StatefulSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: StatefulSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let statefulSetUpdateStrategy = StatefulSetUpdateStrategyBuilder()

        module AuditRegistraion =
            module V1Alpha1 =
                [<AutoOpen>]
                module AuditSinkSpec =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type AuditSinkSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AuditSinkSpecArgs()
                        member _.Run(_cargs_, _args_: AuditSinkSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AuditSinkSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("policy")>]
                        member _.Policy((_cargs_, _args_: AuditSinkSpecArgs), policy) =
                            _args_.Policy <- input policy
                            _cargs_, _args_

                        [<CustomOperation("webhook")>]
                        member _.Webhook((_cargs_, _args_: AuditSinkSpecArgs), webhook) =
                            _args_.Webhook <- input webhook
                            _cargs_, _args_

                    let auditSinkSpec = AuditSinkSpecBuilder()

                [<AutoOpen>]
                module Policy =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type PolicyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PolicyArgs()
                        member _.Run(_cargs_, _args_: PolicyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PolicyArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("level")>]
                        member _.Level((_cargs_, _args_: PolicyArgs), level) =
                            _args_.Level <- input level
                            _cargs_, _args_

                        member _.Level((_cargs_, _args_: PolicyArgs), level) =
                            _args_.Level <- io level
                            _cargs_, _args_

                        [<CustomOperation("stages")>]
                        member _.Stages((_cargs_, _args_: PolicyArgs), stages) =
                            _args_.Stages <- inputList stages
                            _cargs_, _args_

                    let policy = PolicyBuilder()

                [<AutoOpen>]
                module ServiceReference =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type ServiceReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceReferenceArgs()
                        member _.Run(_cargs_, _args_: ServiceReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceReferenceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: ServiceReferenceArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let serviceReference = ServiceReferenceBuilder()

                [<AutoOpen>]
                module Webhook =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type WebhookBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookArgs()
                        member _.Run(_cargs_, _args_: WebhookArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clientConfig")>]
                        member _.ClientConfig((_cargs_, _args_: WebhookArgs), clientConfig) =
                            _args_.ClientConfig <- input clientConfig
                            _cargs_, _args_

                        [<CustomOperation("throttle")>]
                        member _.Throttle((_cargs_, _args_: WebhookArgs), throttle) =
                            _args_.Throttle <- input throttle
                            _cargs_, _args_

                    let webhook = WebhookBuilder()

                [<AutoOpen>]
                module WebhookClientConfig =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type WebhookClientConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookClientConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookClientConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookClientConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("caBundle")>]
                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- input caBundle
                            _cargs_, _args_

                        member _.CaBundle((_cargs_, _args_: WebhookClientConfigArgs), caBundle) =
                            _args_.CaBundle <- io caBundle
                            _cargs_, _args_

                        [<CustomOperation("service")>]
                        member _.Service((_cargs_, _args_: WebhookClientConfigArgs), service) =
                            _args_.Service <- input service
                            _cargs_, _args_

                        [<CustomOperation("url")>]
                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- input url
                            _cargs_, _args_

                        member _.Url((_cargs_, _args_: WebhookClientConfigArgs), url) =
                            _args_.Url <- io url
                            _cargs_, _args_

                    let webhookClientConfig = WebhookClientConfigBuilder()

                [<AutoOpen>]
                module WebhookThrottleConfig =
                    open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

                    type WebhookThrottleConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WebhookThrottleConfigArgs()
                        member _.Run(_cargs_, _args_: WebhookThrottleConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WebhookThrottleConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("burst")>]
                        member _.Burst((_cargs_, _args_: WebhookThrottleConfigArgs), burst) =
                            _args_.Burst <- input burst
                            _cargs_, _args_

                        member _.Burst((_cargs_, _args_: WebhookThrottleConfigArgs), burst) =
                            _args_.Burst <- io burst
                            _cargs_, _args_

                        [<CustomOperation("qps")>]
                        member _.Qps((_cargs_, _args_: WebhookThrottleConfigArgs), qps) =
                            _args_.Qps <- input qps
                            _cargs_, _args_

                        member _.Qps((_cargs_, _args_: WebhookThrottleConfigArgs), qps) =
                            _args_.Qps <- io qps
                            _cargs_, _args_

                    let webhookThrottleConfig = WebhookThrottleConfigBuilder()

        module Authentication =
            module V1 =
                [<AutoOpen>]
                module BoundObjectReference =
                    open Pulumi.Kubernetes.Authentication.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authentication.V1

                    type BoundObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, BoundObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: BoundObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: BoundObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: BoundObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: BoundObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: BoundObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: BoundObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: BoundObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: BoundObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: BoundObjectReferenceArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: BoundObjectReferenceArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let boundObjectReference = BoundObjectReferenceBuilder()

                [<AutoOpen>]
                module TokenRequestSpec =
                    open Pulumi.Kubernetes.Authentication.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authentication.V1

                    type TokenRequestSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TokenRequestSpecArgs()
                        member _.Run(_cargs_, _args_: TokenRequestSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TokenRequestSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("audiences")>]
                        member _.Audiences((_cargs_, _args_: TokenRequestSpecArgs), audiences) =
                            _args_.Audiences <- inputList audiences
                            _cargs_, _args_

                        [<CustomOperation("boundObjectRef")>]
                        member _.BoundObjectRef((_cargs_, _args_: TokenRequestSpecArgs), boundObjectRef) =
                            _args_.BoundObjectRef <- input boundObjectRef
                            _cargs_, _args_

                        [<CustomOperation("expirationSeconds")>]
                        member _.ExpirationSeconds((_cargs_, _args_: TokenRequestSpecArgs), expirationSeconds) =
                            _args_.ExpirationSeconds <- input expirationSeconds
                            _cargs_, _args_

                        member _.ExpirationSeconds((_cargs_, _args_: TokenRequestSpecArgs), expirationSeconds) =
                            _args_.ExpirationSeconds <- io expirationSeconds
                            _cargs_, _args_

                    let tokenRequestSpec = TokenRequestSpecBuilder()

                [<AutoOpen>]
                module TokenReviewSpec =
                    open Pulumi.Kubernetes.Authentication.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authentication.V1

                    type TokenReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TokenReviewSpecArgs()
                        member _.Run(_cargs_, _args_: TokenReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TokenReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("audiences")>]
                        member _.Audiences((_cargs_, _args_: TokenReviewSpecArgs), audiences) =
                            _args_.Audiences <- inputList audiences
                            _cargs_, _args_

                        [<CustomOperation("token")>]
                        member _.Token((_cargs_, _args_: TokenReviewSpecArgs), token) =
                            _args_.Token <- input token
                            _cargs_, _args_

                        member _.Token((_cargs_, _args_: TokenReviewSpecArgs), token) =
                            _args_.Token <- io token
                            _cargs_, _args_

                    let tokenReviewSpec = TokenReviewSpecBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module TokenReviewSpec =
                    open Pulumi.Kubernetes.Authentication.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authentication.V1Beta1

                    type TokenReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TokenReviewSpecArgs()
                        member _.Run(_cargs_, _args_: TokenReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TokenReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("audiences")>]
                        member _.Audiences((_cargs_, _args_: TokenReviewSpecArgs), audiences) =
                            _args_.Audiences <- inputList audiences
                            _cargs_, _args_

                        [<CustomOperation("token")>]
                        member _.Token((_cargs_, _args_: TokenReviewSpecArgs), token) =
                            _args_.Token <- input token
                            _cargs_, _args_

                        member _.Token((_cargs_, _args_: TokenReviewSpecArgs), token) =
                            _args_.Token <- io token
                            _cargs_, _args_

                    let tokenReviewSpec = TokenReviewSpecBuilder()

        module Authorization =
            module V1 =
                [<AutoOpen>]
                module NonResourceAttributes =
                    open Pulumi.Kubernetes.Authorization.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

                    type NonResourceAttributesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NonResourceAttributesArgs()
                        member _.Run(_cargs_, _args_: NonResourceAttributesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NonResourceAttributesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: NonResourceAttributesArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: NonResourceAttributesArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("verb")>]
                        member _.Verb((_cargs_, _args_: NonResourceAttributesArgs), verb) =
                            _args_.Verb <- input verb
                            _cargs_, _args_

                        member _.Verb((_cargs_, _args_: NonResourceAttributesArgs), verb) =
                            _args_.Verb <- io verb
                            _cargs_, _args_

                    let nonResourceAttributes = NonResourceAttributesBuilder()

                [<AutoOpen>]
                module ResourceAttributes =
                    open Pulumi.Kubernetes.Authorization.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

                    type ResourceAttributesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceAttributesArgs()
                        member _.Run(_cargs_, _args_: ResourceAttributesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceAttributesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: ResourceAttributesArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: ResourceAttributesArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceAttributesArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceAttributesArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ResourceAttributesArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ResourceAttributesArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: ResourceAttributesArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        member _.Resource((_cargs_, _args_: ResourceAttributesArgs), resource) =
                            _args_.Resource <- io resource
                            _cargs_, _args_

                        [<CustomOperation("subresource")>]
                        member _.Subresource((_cargs_, _args_: ResourceAttributesArgs), subresource) =
                            _args_.Subresource <- input subresource
                            _cargs_, _args_

                        member _.Subresource((_cargs_, _args_: ResourceAttributesArgs), subresource) =
                            _args_.Subresource <- io subresource
                            _cargs_, _args_

                        [<CustomOperation("verb")>]
                        member _.Verb((_cargs_, _args_: ResourceAttributesArgs), verb) =
                            _args_.Verb <- input verb
                            _cargs_, _args_

                        member _.Verb((_cargs_, _args_: ResourceAttributesArgs), verb) =
                            _args_.Verb <- io verb
                            _cargs_, _args_

                        [<CustomOperation("version")>]
                        member _.Version((_cargs_, _args_: ResourceAttributesArgs), version) =
                            _args_.Version <- input version
                            _cargs_, _args_

                        member _.Version((_cargs_, _args_: ResourceAttributesArgs), version) =
                            _args_.Version <- io version
                            _cargs_, _args_

                    let resourceAttributes = ResourceAttributesBuilder()

                [<AutoOpen>]
                module SelfSubjectAccessReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

                    type SelfSubjectAccessReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SelfSubjectAccessReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SelfSubjectAccessReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SelfSubjectAccessReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nonResourceAttributes")>]
                        member _.NonResourceAttributes(
                            (_cargs_, _args_: SelfSubjectAccessReviewSpecArgs),
                            nonResourceAttributes)
                            =
                            _args_.NonResourceAttributes <- input nonResourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("resourceAttributes")>]
                        member _.ResourceAttributes(
                            (_cargs_, _args_: SelfSubjectAccessReviewSpecArgs),
                            resourceAttributes)
                            =
                            _args_.ResourceAttributes <- input resourceAttributes
                            _cargs_, _args_

                    let selfSubjectAccessReviewSpec = SelfSubjectAccessReviewSpecBuilder()

                [<AutoOpen>]
                module SelfSubjectRulesReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

                    type SelfSubjectRulesReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SelfSubjectRulesReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SelfSubjectRulesReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let selfSubjectRulesReviewSpec = SelfSubjectRulesReviewSpecBuilder()

                [<AutoOpen>]
                module SubjectAccessReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

                    type SubjectAccessReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectAccessReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SubjectAccessReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectAccessReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("extra")>]
                        member _.Extra((_cargs_, _args_: SubjectAccessReviewSpecArgs), extra) =
                            _args_.Extra <- inputMap extra
                            _cargs_, _args_

                        [<CustomOperation("groups")>]
                        member _.Groups((_cargs_, _args_: SubjectAccessReviewSpecArgs), groups) =
                            _args_.Groups <- inputList groups
                            _cargs_, _args_

                        [<CustomOperation("nonResourceAttributes")>]
                        member _.NonResourceAttributes(
                            (_cargs_, _args_: SubjectAccessReviewSpecArgs),
                            nonResourceAttributes)
                            =
                            _args_.NonResourceAttributes <- input nonResourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("resourceAttributes")>]
                        member _.ResourceAttributes((_cargs_, _args_: SubjectAccessReviewSpecArgs), resourceAttributes) =
                            _args_.ResourceAttributes <- input resourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: SubjectAccessReviewSpecArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: SubjectAccessReviewSpecArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: SubjectAccessReviewSpecArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: SubjectAccessReviewSpecArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let subjectAccessReviewSpec = SubjectAccessReviewSpecBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module NonResourceAttributes =
                    open Pulumi.Kubernetes.Authorization.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

                    type NonResourceAttributesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NonResourceAttributesArgs()
                        member _.Run(_cargs_, _args_: NonResourceAttributesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NonResourceAttributesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: NonResourceAttributesArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: NonResourceAttributesArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("verb")>]
                        member _.Verb((_cargs_, _args_: NonResourceAttributesArgs), verb) =
                            _args_.Verb <- input verb
                            _cargs_, _args_

                        member _.Verb((_cargs_, _args_: NonResourceAttributesArgs), verb) =
                            _args_.Verb <- io verb
                            _cargs_, _args_

                    let nonResourceAttributes = NonResourceAttributesBuilder()

                [<AutoOpen>]
                module ResourceAttributes =
                    open Pulumi.Kubernetes.Authorization.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

                    type ResourceAttributesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceAttributesArgs()
                        member _.Run(_cargs_, _args_: ResourceAttributesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceAttributesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: ResourceAttributesArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: ResourceAttributesArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceAttributesArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceAttributesArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ResourceAttributesArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ResourceAttributesArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: ResourceAttributesArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        member _.Resource((_cargs_, _args_: ResourceAttributesArgs), resource) =
                            _args_.Resource <- io resource
                            _cargs_, _args_

                        [<CustomOperation("subresource")>]
                        member _.Subresource((_cargs_, _args_: ResourceAttributesArgs), subresource) =
                            _args_.Subresource <- input subresource
                            _cargs_, _args_

                        member _.Subresource((_cargs_, _args_: ResourceAttributesArgs), subresource) =
                            _args_.Subresource <- io subresource
                            _cargs_, _args_

                        [<CustomOperation("verb")>]
                        member _.Verb((_cargs_, _args_: ResourceAttributesArgs), verb) =
                            _args_.Verb <- input verb
                            _cargs_, _args_

                        member _.Verb((_cargs_, _args_: ResourceAttributesArgs), verb) =
                            _args_.Verb <- io verb
                            _cargs_, _args_

                        [<CustomOperation("version")>]
                        member _.Version((_cargs_, _args_: ResourceAttributesArgs), version) =
                            _args_.Version <- input version
                            _cargs_, _args_

                        member _.Version((_cargs_, _args_: ResourceAttributesArgs), version) =
                            _args_.Version <- io version
                            _cargs_, _args_

                    let resourceAttributes = ResourceAttributesBuilder()

                [<AutoOpen>]
                module SelfSubjectAccessReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

                    type SelfSubjectAccessReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SelfSubjectAccessReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SelfSubjectAccessReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SelfSubjectAccessReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nonResourceAttributes")>]
                        member _.NonResourceAttributes(
                            (_cargs_, _args_: SelfSubjectAccessReviewSpecArgs),
                            nonResourceAttributes)
                            =
                            _args_.NonResourceAttributes <- input nonResourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("resourceAttributes")>]
                        member _.ResourceAttributes(
                            (_cargs_, _args_: SelfSubjectAccessReviewSpecArgs),
                            resourceAttributes)
                            =
                            _args_.ResourceAttributes <- input resourceAttributes
                            _cargs_, _args_

                    let selfSubjectAccessReviewSpec = SelfSubjectAccessReviewSpecBuilder()

                [<AutoOpen>]
                module SelfSubjectRulesReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

                    type SelfSubjectRulesReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SelfSubjectRulesReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SelfSubjectRulesReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SelfSubjectRulesReviewSpecArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let selfSubjectRulesReviewSpec = SelfSubjectRulesReviewSpecBuilder()

                [<AutoOpen>]
                module SubjectAccessReviewSpec =
                    open Pulumi.Kubernetes.Authorization.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

                    type SubjectAccessReviewSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectAccessReviewSpecArgs()
                        member _.Run(_cargs_, _args_: SubjectAccessReviewSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectAccessReviewSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("extra")>]
                        member _.Extra((_cargs_, _args_: SubjectAccessReviewSpecArgs), extra) =
                            _args_.Extra <- inputMap extra
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: SubjectAccessReviewSpecArgs), group) =
                            _args_.Group <- inputList group
                            _cargs_, _args_

                        [<CustomOperation("nonResourceAttributes")>]
                        member _.NonResourceAttributes(
                            (_cargs_, _args_: SubjectAccessReviewSpecArgs),
                            nonResourceAttributes)
                            =
                            _args_.NonResourceAttributes <- input nonResourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("resourceAttributes")>]
                        member _.ResourceAttributes((_cargs_, _args_: SubjectAccessReviewSpecArgs), resourceAttributes) =
                            _args_.ResourceAttributes <- input resourceAttributes
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: SubjectAccessReviewSpecArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: SubjectAccessReviewSpecArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: SubjectAccessReviewSpecArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: SubjectAccessReviewSpecArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let subjectAccessReviewSpec = SubjectAccessReviewSpecBuilder()

        module Autoscaling =
            module V1 =
                [<AutoOpen>]
                module CrossVersionObjectReference =
                    open Pulumi.Kubernetes.Autoscaling.V1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V1

                    type CrossVersionObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CrossVersionObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: CrossVersionObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let crossVersionObjectReference = CrossVersionObjectReferenceBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerSpec =
                    open Pulumi.Kubernetes.Autoscaling.V1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V1

                    type HorizontalPodAutoscalerSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerSpecArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("maxReplicas")>]
                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- input maxReplicas
                            _cargs_, _args_

                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- io maxReplicas
                            _cargs_, _args_

                        [<CustomOperation("minReplicas")>]
                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- input minReplicas
                            _cargs_, _args_

                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- io minReplicas
                            _cargs_, _args_

                        [<CustomOperation("scaleTargetRef")>]
                        member _.ScaleTargetRef((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), scaleTargetRef) =
                            _args_.ScaleTargetRef <- input scaleTargetRef
                            _cargs_, _args_

                        [<CustomOperation("targetCPUUtilizationPercentage")>]
                        member _.TargetCPUUtilizationPercentage(
                            (_cargs_, _args_: HorizontalPodAutoscalerSpecArgs),
                            targetCPUUtilizationPercentage)
                            =
                            _args_.TargetCPUUtilizationPercentage <- input targetCPUUtilizationPercentage
                            _cargs_, _args_

                        member _.TargetCPUUtilizationPercentage(
                            (_cargs_, _args_: HorizontalPodAutoscalerSpecArgs),
                            targetCPUUtilizationPercentage)
                            =
                            _args_.TargetCPUUtilizationPercentage <- io targetCPUUtilizationPercentage
                            _cargs_, _args_

                    let horizontalPodAutoscalerSpec = HorizontalPodAutoscalerSpecBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerStatus =
                    open Pulumi.Kubernetes.Autoscaling.V1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V1

                    type HorizontalPodAutoscalerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerStatusArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("currentCPUUtilizationPercentage")>]
                        member _.CurrentCPUUtilizationPercentage(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            currentCPUUtilizationPercentage)
                            =
                            _args_.CurrentCPUUtilizationPercentage <- input currentCPUUtilizationPercentage
                            _cargs_, _args_

                        member _.CurrentCPUUtilizationPercentage(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            currentCPUUtilizationPercentage)
                            =
                            _args_.CurrentCPUUtilizationPercentage <- io currentCPUUtilizationPercentage
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("desiredReplicas")>]
                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- input desiredReplicas
                            _cargs_, _args_

                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- io desiredReplicas
                            _cargs_, _args_

                        [<CustomOperation("lastScaleTime")>]
                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- input lastScaleTime
                            _cargs_, _args_

                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- io lastScaleTime
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                    let horizontalPodAutoscalerStatus = HorizontalPodAutoscalerStatusBuilder()

            module V2Beta1 =
                [<AutoOpen>]
                module CrossVersionObjectReference =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type CrossVersionObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CrossVersionObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: CrossVersionObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let crossVersionObjectReference = CrossVersionObjectReferenceBuilder()

                [<AutoOpen>]
                module ExternalMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ExternalMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ExternalMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: ExternalMetricSourceArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: ExternalMetricSourceArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("metricSelector")>]
                        member _.MetricSelector((_cargs_, _args_: ExternalMetricSourceArgs), metricSelector) =
                            _args_.MetricSelector <- input metricSelector
                            _cargs_, _args_

                        [<CustomOperation("targetAverageValue")>]
                        member _.TargetAverageValue((_cargs_, _args_: ExternalMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- input targetAverageValue
                            _cargs_, _args_

                        member _.TargetAverageValue((_cargs_, _args_: ExternalMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- io targetAverageValue
                            _cargs_, _args_

                        [<CustomOperation("targetValue")>]
                        member _.TargetValue((_cargs_, _args_: ExternalMetricSourceArgs), targetValue) =
                            _args_.TargetValue <- input targetValue
                            _cargs_, _args_

                        member _.TargetValue((_cargs_, _args_: ExternalMetricSourceArgs), targetValue) =
                            _args_.TargetValue <- io targetValue
                            _cargs_, _args_

                    let externalMetricSource = ExternalMetricSourceBuilder()

                [<AutoOpen>]
                module ExternalMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ExternalMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ExternalMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("currentAverageValue")>]
                        member _.CurrentAverageValue((_cargs_, _args_: ExternalMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- input currentAverageValue
                            _cargs_, _args_

                        member _.CurrentAverageValue((_cargs_, _args_: ExternalMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- io currentAverageValue
                            _cargs_, _args_

                        [<CustomOperation("currentValue")>]
                        member _.CurrentValue((_cargs_, _args_: ExternalMetricStatusArgs), currentValue) =
                            _args_.CurrentValue <- input currentValue
                            _cargs_, _args_

                        member _.CurrentValue((_cargs_, _args_: ExternalMetricStatusArgs), currentValue) =
                            _args_.CurrentValue <- io currentValue
                            _cargs_, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: ExternalMetricStatusArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: ExternalMetricStatusArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("metricSelector")>]
                        member _.MetricSelector((_cargs_, _args_: ExternalMetricStatusArgs), metricSelector) =
                            _args_.MetricSelector <- input metricSelector
                            _cargs_, _args_

                    let externalMetricStatus = ExternalMetricStatusBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerCondition =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type HorizontalPodAutoscalerConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerConditionArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: HorizontalPodAutoscalerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: HorizontalPodAutoscalerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let horizontalPodAutoscalerCondition =
                        HorizontalPodAutoscalerConditionBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerSpec =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type HorizontalPodAutoscalerSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerSpecArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("maxReplicas")>]
                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- input maxReplicas
                            _cargs_, _args_

                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- io maxReplicas
                            _cargs_, _args_

                        [<CustomOperation("metrics")>]
                        member _.Metrics((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), metrics) =
                            _args_.Metrics <- inputList metrics
                            _cargs_, _args_

                        [<CustomOperation("minReplicas")>]
                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- input minReplicas
                            _cargs_, _args_

                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- io minReplicas
                            _cargs_, _args_

                        [<CustomOperation("scaleTargetRef")>]
                        member _.ScaleTargetRef((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), scaleTargetRef) =
                            _args_.ScaleTargetRef <- input scaleTargetRef
                            _cargs_, _args_

                    let horizontalPodAutoscalerSpec = HorizontalPodAutoscalerSpecBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type HorizontalPodAutoscalerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerStatusArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentMetrics")>]
                        member _.CurrentMetrics((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentMetrics) =
                            _args_.CurrentMetrics <- inputList currentMetrics
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("desiredReplicas")>]
                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- input desiredReplicas
                            _cargs_, _args_

                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- io desiredReplicas
                            _cargs_, _args_

                        [<CustomOperation("lastScaleTime")>]
                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- input lastScaleTime
                            _cargs_, _args_

                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- io lastScaleTime
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                    let horizontalPodAutoscalerStatus = HorizontalPodAutoscalerStatusBuilder()

                [<AutoOpen>]
                module MetricSpec =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type MetricSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricSpecArgs()
                        member _.Run(_cargs_, _args_: MetricSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("external")>]
                        member _.External((_cargs_, _args_: MetricSpecArgs), external) =
                            _args_.External <- input external
                            _cargs_, _args_

                        [<CustomOperation("object")>]
                        member _.Object((_cargs_, _args_: MetricSpecArgs), object) =
                            _args_.Object <- input object
                            _cargs_, _args_

                        [<CustomOperation("pods")>]
                        member _.Pods((_cargs_, _args_: MetricSpecArgs), pods) =
                            _args_.Pods <- input pods
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: MetricSpecArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: MetricSpecArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: MetricSpecArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let metricSpec = MetricSpecBuilder()

                [<AutoOpen>]
                module MetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type MetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricStatusArgs()
                        member _.Run(_cargs_, _args_: MetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("external")>]
                        member _.External((_cargs_, _args_: MetricStatusArgs), external) =
                            _args_.External <- input external
                            _cargs_, _args_

                        [<CustomOperation("object")>]
                        member _.Object((_cargs_, _args_: MetricStatusArgs), object) =
                            _args_.Object <- input object
                            _cargs_, _args_

                        [<CustomOperation("pods")>]
                        member _.Pods((_cargs_, _args_: MetricStatusArgs), pods) =
                            _args_.Pods <- input pods
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: MetricStatusArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: MetricStatusArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: MetricStatusArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let metricStatus = MetricStatusBuilder()

                [<AutoOpen>]
                module ObjectMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ObjectMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ObjectMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("averageValue")>]
                        member _.AverageValue((_cargs_, _args_: ObjectMetricSourceArgs), averageValue) =
                            _args_.AverageValue <- input averageValue
                            _cargs_, _args_

                        member _.AverageValue((_cargs_, _args_: ObjectMetricSourceArgs), averageValue) =
                            _args_.AverageValue <- io averageValue
                            _cargs_, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: ObjectMetricSourceArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: ObjectMetricSourceArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ObjectMetricSourceArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: ObjectMetricSourceArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                        [<CustomOperation("targetValue")>]
                        member _.TargetValue((_cargs_, _args_: ObjectMetricSourceArgs), targetValue) =
                            _args_.TargetValue <- input targetValue
                            _cargs_, _args_

                        member _.TargetValue((_cargs_, _args_: ObjectMetricSourceArgs), targetValue) =
                            _args_.TargetValue <- io targetValue
                            _cargs_, _args_

                    let objectMetricSource = ObjectMetricSourceBuilder()

                [<AutoOpen>]
                module ObjectMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ObjectMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ObjectMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("averageValue")>]
                        member _.AverageValue((_cargs_, _args_: ObjectMetricStatusArgs), averageValue) =
                            _args_.AverageValue <- input averageValue
                            _cargs_, _args_

                        member _.AverageValue((_cargs_, _args_: ObjectMetricStatusArgs), averageValue) =
                            _args_.AverageValue <- io averageValue
                            _cargs_, _args_

                        [<CustomOperation("currentValue")>]
                        member _.CurrentValue((_cargs_, _args_: ObjectMetricStatusArgs), currentValue) =
                            _args_.CurrentValue <- input currentValue
                            _cargs_, _args_

                        member _.CurrentValue((_cargs_, _args_: ObjectMetricStatusArgs), currentValue) =
                            _args_.CurrentValue <- io currentValue
                            _cargs_, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: ObjectMetricStatusArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: ObjectMetricStatusArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ObjectMetricStatusArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: ObjectMetricStatusArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                    let objectMetricStatus = ObjectMetricStatusBuilder()

                [<AutoOpen>]
                module PodsMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type PodsMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodsMetricSourceArgs()
                        member _.Run(_cargs_, _args_: PodsMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodsMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: PodsMetricSourceArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: PodsMetricSourceArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: PodsMetricSourceArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("targetAverageValue")>]
                        member _.TargetAverageValue((_cargs_, _args_: PodsMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- input targetAverageValue
                            _cargs_, _args_

                        member _.TargetAverageValue((_cargs_, _args_: PodsMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- io targetAverageValue
                            _cargs_, _args_

                    let podsMetricSource = PodsMetricSourceBuilder()

                [<AutoOpen>]
                module PodsMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type PodsMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodsMetricStatusArgs()
                        member _.Run(_cargs_, _args_: PodsMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodsMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("currentAverageValue")>]
                        member _.CurrentAverageValue((_cargs_, _args_: PodsMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- input currentAverageValue
                            _cargs_, _args_

                        member _.CurrentAverageValue((_cargs_, _args_: PodsMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- io currentAverageValue
                            _cargs_, _args_

                        [<CustomOperation("metricName")>]
                        member _.MetricName((_cargs_, _args_: PodsMetricStatusArgs), metricName) =
                            _args_.MetricName <- input metricName
                            _cargs_, _args_

                        member _.MetricName((_cargs_, _args_: PodsMetricStatusArgs), metricName) =
                            _args_.MetricName <- io metricName
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: PodsMetricStatusArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                    let podsMetricStatus = PodsMetricStatusBuilder()

                [<AutoOpen>]
                module ResourceMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ResourceMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ResourceMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("targetAverageUtilization")>]
                        member _.TargetAverageUtilization(
                            (_cargs_, _args_: ResourceMetricSourceArgs),
                            targetAverageUtilization)
                            =
                            _args_.TargetAverageUtilization <- input targetAverageUtilization
                            _cargs_, _args_

                        member _.TargetAverageUtilization(
                            (_cargs_, _args_: ResourceMetricSourceArgs),
                            targetAverageUtilization)
                            =
                            _args_.TargetAverageUtilization <- io targetAverageUtilization
                            _cargs_, _args_

                        [<CustomOperation("targetAverageValue")>]
                        member _.TargetAverageValue((_cargs_, _args_: ResourceMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- input targetAverageValue
                            _cargs_, _args_

                        member _.TargetAverageValue((_cargs_, _args_: ResourceMetricSourceArgs), targetAverageValue) =
                            _args_.TargetAverageValue <- io targetAverageValue
                            _cargs_, _args_

                    let resourceMetricSource = ResourceMetricSourceBuilder()

                [<AutoOpen>]
                module ResourceMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

                    type ResourceMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ResourceMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("currentAverageUtilization")>]
                        member _.CurrentAverageUtilization(
                            (_cargs_, _args_: ResourceMetricStatusArgs),
                            currentAverageUtilization)
                            =
                            _args_.CurrentAverageUtilization <- input currentAverageUtilization
                            _cargs_, _args_

                        member _.CurrentAverageUtilization(
                            (_cargs_, _args_: ResourceMetricStatusArgs),
                            currentAverageUtilization)
                            =
                            _args_.CurrentAverageUtilization <- io currentAverageUtilization
                            _cargs_, _args_

                        [<CustomOperation("currentAverageValue")>]
                        member _.CurrentAverageValue((_cargs_, _args_: ResourceMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- input currentAverageValue
                            _cargs_, _args_

                        member _.CurrentAverageValue((_cargs_, _args_: ResourceMetricStatusArgs), currentAverageValue) =
                            _args_.CurrentAverageValue <- io currentAverageValue
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let resourceMetricStatus = ResourceMetricStatusBuilder()

            module V2Beta2 =
                [<AutoOpen>]
                module CrossVersionObjectReference =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type CrossVersionObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CrossVersionObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: CrossVersionObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: CrossVersionObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: CrossVersionObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CrossVersionObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let crossVersionObjectReference = CrossVersionObjectReferenceBuilder()

                [<AutoOpen>]
                module ExternalMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ExternalMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ExternalMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: ExternalMetricSourceArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: ExternalMetricSourceArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                    let externalMetricSource = ExternalMetricSourceBuilder()

                [<AutoOpen>]
                module ExternalMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ExternalMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExternalMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ExternalMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExternalMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("current")>]
                        member _.Current((_cargs_, _args_: ExternalMetricStatusArgs), current) =
                            _args_.Current <- input current
                            _cargs_, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: ExternalMetricStatusArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                    let externalMetricStatus = ExternalMetricStatusBuilder()

                [<AutoOpen>]
                module HPAScalingPolicy =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HPAScalingPolicyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HPAScalingPolicyArgs()
                        member _.Run(_cargs_, _args_: HPAScalingPolicyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HPAScalingPolicyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("periodSeconds")>]
                        member _.PeriodSeconds((_cargs_, _args_: HPAScalingPolicyArgs), periodSeconds) =
                            _args_.PeriodSeconds <- input periodSeconds
                            _cargs_, _args_

                        member _.PeriodSeconds((_cargs_, _args_: HPAScalingPolicyArgs), periodSeconds) =
                            _args_.PeriodSeconds <- io periodSeconds
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: HPAScalingPolicyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: HPAScalingPolicyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: HPAScalingPolicyArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: HPAScalingPolicyArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let hPAScalingPolicy = HPAScalingPolicyBuilder()

                [<AutoOpen>]
                module HPAScalingRules =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HPAScalingRulesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HPAScalingRulesArgs()
                        member _.Run(_cargs_, _args_: HPAScalingRulesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HPAScalingRulesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("policies")>]
                        member _.Policies((_cargs_, _args_: HPAScalingRulesArgs), policies) =
                            _args_.Policies <- inputList policies
                            _cargs_, _args_

                        [<CustomOperation("selectPolicy")>]
                        member _.SelectPolicy((_cargs_, _args_: HPAScalingRulesArgs), selectPolicy) =
                            _args_.SelectPolicy <- input selectPolicy
                            _cargs_, _args_

                        member _.SelectPolicy((_cargs_, _args_: HPAScalingRulesArgs), selectPolicy) =
                            _args_.SelectPolicy <- io selectPolicy
                            _cargs_, _args_

                        [<CustomOperation("stabilizationWindowSeconds")>]
                        member _.StabilizationWindowSeconds(
                            (_cargs_, _args_: HPAScalingRulesArgs),
                            stabilizationWindowSeconds)
                            =
                            _args_.StabilizationWindowSeconds <- input stabilizationWindowSeconds
                            _cargs_, _args_

                        member _.StabilizationWindowSeconds(
                            (_cargs_, _args_: HPAScalingRulesArgs),
                            stabilizationWindowSeconds)
                            =
                            _args_.StabilizationWindowSeconds <- io stabilizationWindowSeconds
                            _cargs_, _args_

                    let hPAScalingRules = HPAScalingRulesBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerBehavior =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HorizontalPodAutoscalerBehaviorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerBehaviorArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerBehaviorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerBehaviorArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("scaleDown")>]
                        member _.ScaleDown((_cargs_, _args_: HorizontalPodAutoscalerBehaviorArgs), scaleDown) =
                            _args_.ScaleDown <- input scaleDown
                            _cargs_, _args_

                        [<CustomOperation("scaleUp")>]
                        member _.ScaleUp((_cargs_, _args_: HorizontalPodAutoscalerBehaviorArgs), scaleUp) =
                            _args_.ScaleUp <- input scaleUp
                            _cargs_, _args_

                    let horizontalPodAutoscalerBehavior = HorizontalPodAutoscalerBehaviorBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerCondition =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HorizontalPodAutoscalerConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerConditionArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: HorizontalPodAutoscalerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: HorizontalPodAutoscalerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: HorizontalPodAutoscalerConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let horizontalPodAutoscalerCondition =
                        HorizontalPodAutoscalerConditionBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerSpec =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HorizontalPodAutoscalerSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerSpecArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("behavior")>]
                        member _.Behavior((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), behavior) =
                            _args_.Behavior <- input behavior
                            _cargs_, _args_

                        [<CustomOperation("maxReplicas")>]
                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- input maxReplicas
                            _cargs_, _args_

                        member _.MaxReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), maxReplicas) =
                            _args_.MaxReplicas <- io maxReplicas
                            _cargs_, _args_

                        [<CustomOperation("metrics")>]
                        member _.Metrics((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), metrics) =
                            _args_.Metrics <- inputList metrics
                            _cargs_, _args_

                        [<CustomOperation("minReplicas")>]
                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- input minReplicas
                            _cargs_, _args_

                        member _.MinReplicas((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), minReplicas) =
                            _args_.MinReplicas <- io minReplicas
                            _cargs_, _args_

                        [<CustomOperation("scaleTargetRef")>]
                        member _.ScaleTargetRef((_cargs_, _args_: HorizontalPodAutoscalerSpecArgs), scaleTargetRef) =
                            _args_.ScaleTargetRef <- input scaleTargetRef
                            _cargs_, _args_

                    let horizontalPodAutoscalerSpec = HorizontalPodAutoscalerSpecBuilder()

                [<AutoOpen>]
                module HorizontalPodAutoscalerStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type HorizontalPodAutoscalerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerStatusArgs()
                        member _.Run(_cargs_, _args_: HorizontalPodAutoscalerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentMetrics")>]
                        member _.CurrentMetrics((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentMetrics) =
                            _args_.CurrentMetrics <- inputList currentMetrics
                            _cargs_, _args_

                        [<CustomOperation("currentReplicas")>]
                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- input currentReplicas
                            _cargs_, _args_

                        member _.CurrentReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), currentReplicas) =
                            _args_.CurrentReplicas <- io currentReplicas
                            _cargs_, _args_

                        [<CustomOperation("desiredReplicas")>]
                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- input desiredReplicas
                            _cargs_, _args_

                        member _.DesiredReplicas((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), desiredReplicas) =
                            _args_.DesiredReplicas <- io desiredReplicas
                            _cargs_, _args_

                        [<CustomOperation("lastScaleTime")>]
                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- input lastScaleTime
                            _cargs_, _args_

                        member _.LastScaleTime((_cargs_, _args_: HorizontalPodAutoscalerStatusArgs), lastScaleTime) =
                            _args_.LastScaleTime <- io lastScaleTime
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration(
                            (_cargs_, _args_: HorizontalPodAutoscalerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                    let horizontalPodAutoscalerStatus = HorizontalPodAutoscalerStatusBuilder()

                [<AutoOpen>]
                module MetricIdentifier =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type MetricIdentifierBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricIdentifierArgs()
                        member _.Run(_cargs_, _args_: MetricIdentifierArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricIdentifierArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: MetricIdentifierArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: MetricIdentifierArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: MetricIdentifierArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                    let metricIdentifier = MetricIdentifierBuilder()

                [<AutoOpen>]
                module MetricSpec =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type MetricSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricSpecArgs()
                        member _.Run(_cargs_, _args_: MetricSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("external")>]
                        member _.External((_cargs_, _args_: MetricSpecArgs), external) =
                            _args_.External <- input external
                            _cargs_, _args_

                        [<CustomOperation("object")>]
                        member _.Object((_cargs_, _args_: MetricSpecArgs), object) =
                            _args_.Object <- input object
                            _cargs_, _args_

                        [<CustomOperation("pods")>]
                        member _.Pods((_cargs_, _args_: MetricSpecArgs), pods) =
                            _args_.Pods <- input pods
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: MetricSpecArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: MetricSpecArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: MetricSpecArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let metricSpec = MetricSpecBuilder()

                [<AutoOpen>]
                module MetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type MetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricStatusArgs()
                        member _.Run(_cargs_, _args_: MetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("external")>]
                        member _.External((_cargs_, _args_: MetricStatusArgs), external) =
                            _args_.External <- input external
                            _cargs_, _args_

                        [<CustomOperation("object")>]
                        member _.Object((_cargs_, _args_: MetricStatusArgs), object) =
                            _args_.Object <- input object
                            _cargs_, _args_

                        [<CustomOperation("pods")>]
                        member _.Pods((_cargs_, _args_: MetricStatusArgs), pods) =
                            _args_.Pods <- input pods
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: MetricStatusArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: MetricStatusArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: MetricStatusArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let metricStatus = MetricStatusBuilder()

                [<AutoOpen>]
                module MetricTarget =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type MetricTargetBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricTargetArgs()
                        member _.Run(_cargs_, _args_: MetricTargetArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricTargetArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("averageUtilization")>]
                        member _.AverageUtilization((_cargs_, _args_: MetricTargetArgs), averageUtilization) =
                            _args_.AverageUtilization <- input averageUtilization
                            _cargs_, _args_

                        member _.AverageUtilization((_cargs_, _args_: MetricTargetArgs), averageUtilization) =
                            _args_.AverageUtilization <- io averageUtilization
                            _cargs_, _args_

                        [<CustomOperation("averageValue")>]
                        member _.AverageValue((_cargs_, _args_: MetricTargetArgs), averageValue) =
                            _args_.AverageValue <- input averageValue
                            _cargs_, _args_

                        member _.AverageValue((_cargs_, _args_: MetricTargetArgs), averageValue) =
                            _args_.AverageValue <- io averageValue
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: MetricTargetArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: MetricTargetArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: MetricTargetArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: MetricTargetArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let metricTarget = MetricTargetBuilder()

                [<AutoOpen>]
                module MetricValueStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type MetricValueStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, MetricValueStatusArgs()
                        member _.Run(_cargs_, _args_: MetricValueStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: MetricValueStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("averageUtilization")>]
                        member _.AverageUtilization((_cargs_, _args_: MetricValueStatusArgs), averageUtilization) =
                            _args_.AverageUtilization <- input averageUtilization
                            _cargs_, _args_

                        member _.AverageUtilization((_cargs_, _args_: MetricValueStatusArgs), averageUtilization) =
                            _args_.AverageUtilization <- io averageUtilization
                            _cargs_, _args_

                        [<CustomOperation("averageValue")>]
                        member _.AverageValue((_cargs_, _args_: MetricValueStatusArgs), averageValue) =
                            _args_.AverageValue <- input averageValue
                            _cargs_, _args_

                        member _.AverageValue((_cargs_, _args_: MetricValueStatusArgs), averageValue) =
                            _args_.AverageValue <- io averageValue
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: MetricValueStatusArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: MetricValueStatusArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let metricValueStatus = MetricValueStatusBuilder()

                [<AutoOpen>]
                module ObjectMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ObjectMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ObjectMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("describedObject")>]
                        member _.DescribedObject((_cargs_, _args_: ObjectMetricSourceArgs), describedObject) =
                            _args_.DescribedObject <- input describedObject
                            _cargs_, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: ObjectMetricSourceArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: ObjectMetricSourceArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                    let objectMetricSource = ObjectMetricSourceBuilder()

                [<AutoOpen>]
                module ObjectMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ObjectMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ObjectMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("current")>]
                        member _.Current((_cargs_, _args_: ObjectMetricStatusArgs), current) =
                            _args_.Current <- input current
                            _cargs_, _args_

                        [<CustomOperation("describedObject")>]
                        member _.DescribedObject((_cargs_, _args_: ObjectMetricStatusArgs), describedObject) =
                            _args_.DescribedObject <- input describedObject
                            _cargs_, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: ObjectMetricStatusArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                    let objectMetricStatus = ObjectMetricStatusBuilder()

                [<AutoOpen>]
                module PodsMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type PodsMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodsMetricSourceArgs()
                        member _.Run(_cargs_, _args_: PodsMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodsMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: PodsMetricSourceArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: PodsMetricSourceArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                    let podsMetricSource = PodsMetricSourceBuilder()

                [<AutoOpen>]
                module PodsMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type PodsMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodsMetricStatusArgs()
                        member _.Run(_cargs_, _args_: PodsMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodsMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("current")>]
                        member _.Current((_cargs_, _args_: PodsMetricStatusArgs), current) =
                            _args_.Current <- input current
                            _cargs_, _args_

                        [<CustomOperation("metric")>]
                        member _.Metric((_cargs_, _args_: PodsMetricStatusArgs), metric) =
                            _args_.Metric <- input metric
                            _cargs_, _args_

                    let podsMetricStatus = PodsMetricStatusBuilder()

                [<AutoOpen>]
                module ResourceMetricSource =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ResourceMetricSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceMetricSourceArgs()
                        member _.Run(_cargs_, _args_: ResourceMetricSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceMetricSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("target")>]
                        member _.Target((_cargs_, _args_: ResourceMetricSourceArgs), target) =
                            _args_.Target <- input target
                            _cargs_, _args_

                    let resourceMetricSource = ResourceMetricSourceBuilder()

                [<AutoOpen>]
                module ResourceMetricStatus =
                    open Pulumi.Kubernetes.Autoscaling.V2Beta2
                    open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

                    type ResourceMetricStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceMetricStatusArgs()
                        member _.Run(_cargs_, _args_: ResourceMetricStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("current")>]
                        member _.Current((_cargs_, _args_: ResourceMetricStatusArgs), current) =
                            _args_.Current <- input current
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ResourceMetricStatusArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let resourceMetricStatus = ResourceMetricStatusBuilder()

        module Batch =
            module V1 =
                [<AutoOpen>]
                module JobCondition =
                    open Pulumi.Kubernetes.Batch.V1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1

                    type JobConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, JobConditionArgs()
                        member _.Run(_cargs_, _args_: JobConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: JobConditionArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastProbeTime")>]
                        member _.LastProbeTime((_cargs_, _args_: JobConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- input lastProbeTime
                            _cargs_, _args_

                        member _.LastProbeTime((_cargs_, _args_: JobConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- io lastProbeTime
                            _cargs_, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: JobConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: JobConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: JobConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: JobConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: JobConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: JobConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: JobConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: JobConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: JobConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: JobConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let jobCondition = JobConditionBuilder()

                [<AutoOpen>]
                module JobSpec =
                    open Pulumi.Kubernetes.Batch.V1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1

                    type JobSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, JobSpecArgs()
                        member _.Run(_cargs_, _args_: JobSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: JobSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("activeDeadlineSeconds")>]
                        member _.ActiveDeadlineSeconds((_cargs_, _args_: JobSpecArgs), activeDeadlineSeconds) =
                            _args_.ActiveDeadlineSeconds <- input activeDeadlineSeconds
                            _cargs_, _args_

                        member _.ActiveDeadlineSeconds((_cargs_, _args_: JobSpecArgs), activeDeadlineSeconds) =
                            _args_.ActiveDeadlineSeconds <- io activeDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("backoffLimit")>]
                        member _.BackoffLimit((_cargs_, _args_: JobSpecArgs), backoffLimit) =
                            _args_.BackoffLimit <- input backoffLimit
                            _cargs_, _args_

                        member _.BackoffLimit((_cargs_, _args_: JobSpecArgs), backoffLimit) =
                            _args_.BackoffLimit <- io backoffLimit
                            _cargs_, _args_

                        [<CustomOperation("completions")>]
                        member _.Completions((_cargs_, _args_: JobSpecArgs), completions) =
                            _args_.Completions <- input completions
                            _cargs_, _args_

                        member _.Completions((_cargs_, _args_: JobSpecArgs), completions) =
                            _args_.Completions <- io completions
                            _cargs_, _args_

                        [<CustomOperation("manualSelector")>]
                        member _.ManualSelector((_cargs_, _args_: JobSpecArgs), manualSelector) =
                            _args_.ManualSelector <- input manualSelector
                            _cargs_, _args_

                        member _.ManualSelector((_cargs_, _args_: JobSpecArgs), manualSelector) =
                            _args_.ManualSelector <- io manualSelector
                            _cargs_, _args_

                        [<CustomOperation("parallelism")>]
                        member _.Parallelism((_cargs_, _args_: JobSpecArgs), parallelism) =
                            _args_.Parallelism <- input parallelism
                            _cargs_, _args_

                        member _.Parallelism((_cargs_, _args_: JobSpecArgs), parallelism) =
                            _args_.Parallelism <- io parallelism
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: JobSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: JobSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("ttlSecondsAfterFinished")>]
                        member _.TtlSecondsAfterFinished((_cargs_, _args_: JobSpecArgs), ttlSecondsAfterFinished) =
                            _args_.TtlSecondsAfterFinished <- input ttlSecondsAfterFinished
                            _cargs_, _args_

                        member _.TtlSecondsAfterFinished((_cargs_, _args_: JobSpecArgs), ttlSecondsAfterFinished) =
                            _args_.TtlSecondsAfterFinished <- io ttlSecondsAfterFinished
                            _cargs_, _args_

                    let jobSpec = JobSpecBuilder()

                [<AutoOpen>]
                module JobStatus =
                    open Pulumi.Kubernetes.Batch.V1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1

                    type JobStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, JobStatusArgs()
                        member _.Run(_cargs_, _args_: JobStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: JobStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("active")>]
                        member _.Active((_cargs_, _args_: JobStatusArgs), active) =
                            _args_.Active <- input active
                            _cargs_, _args_

                        member _.Active((_cargs_, _args_: JobStatusArgs), active) =
                            _args_.Active <- io active
                            _cargs_, _args_

                        [<CustomOperation("completionTime")>]
                        member _.CompletionTime((_cargs_, _args_: JobStatusArgs), completionTime) =
                            _args_.CompletionTime <- input completionTime
                            _cargs_, _args_

                        member _.CompletionTime((_cargs_, _args_: JobStatusArgs), completionTime) =
                            _args_.CompletionTime <- io completionTime
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: JobStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("failed")>]
                        member _.Failed((_cargs_, _args_: JobStatusArgs), failed) =
                            _args_.Failed <- input failed
                            _cargs_, _args_

                        member _.Failed((_cargs_, _args_: JobStatusArgs), failed) =
                            _args_.Failed <- io failed
                            _cargs_, _args_

                        [<CustomOperation("startTime")>]
                        member _.StartTime((_cargs_, _args_: JobStatusArgs), startTime) =
                            _args_.StartTime <- input startTime
                            _cargs_, _args_

                        member _.StartTime((_cargs_, _args_: JobStatusArgs), startTime) =
                            _args_.StartTime <- io startTime
                            _cargs_, _args_

                        [<CustomOperation("succeeded")>]
                        member _.Succeeded((_cargs_, _args_: JobStatusArgs), succeeded) =
                            _args_.Succeeded <- input succeeded
                            _cargs_, _args_

                        member _.Succeeded((_cargs_, _args_: JobStatusArgs), succeeded) =
                            _args_.Succeeded <- io succeeded
                            _cargs_, _args_

                    let jobStatus = JobStatusBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module CronJobSpec =
                    open Pulumi.Kubernetes.Batch.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1Beta1

                    type CronJobSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CronJobSpecArgs()
                        member _.Run(_cargs_, _args_: CronJobSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CronJobSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("concurrencyPolicy")>]
                        member _.ConcurrencyPolicy((_cargs_, _args_: CronJobSpecArgs), concurrencyPolicy) =
                            _args_.ConcurrencyPolicy <- input concurrencyPolicy
                            _cargs_, _args_

                        member _.ConcurrencyPolicy((_cargs_, _args_: CronJobSpecArgs), concurrencyPolicy) =
                            _args_.ConcurrencyPolicy <- io concurrencyPolicy
                            _cargs_, _args_

                        [<CustomOperation("failedJobsHistoryLimit")>]
                        member _.FailedJobsHistoryLimit((_cargs_, _args_: CronJobSpecArgs), failedJobsHistoryLimit) =
                            _args_.FailedJobsHistoryLimit <- input failedJobsHistoryLimit
                            _cargs_, _args_

                        member _.FailedJobsHistoryLimit((_cargs_, _args_: CronJobSpecArgs), failedJobsHistoryLimit) =
                            _args_.FailedJobsHistoryLimit <- io failedJobsHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("jobTemplate")>]
                        member _.JobTemplate((_cargs_, _args_: CronJobSpecArgs), jobTemplate) =
                            _args_.JobTemplate <- input jobTemplate
                            _cargs_, _args_

                        [<CustomOperation("schedule")>]
                        member _.Schedule((_cargs_, _args_: CronJobSpecArgs), schedule) =
                            _args_.Schedule <- input schedule
                            _cargs_, _args_

                        member _.Schedule((_cargs_, _args_: CronJobSpecArgs), schedule) =
                            _args_.Schedule <- io schedule
                            _cargs_, _args_

                        [<CustomOperation("startingDeadlineSeconds")>]
                        member _.StartingDeadlineSeconds((_cargs_, _args_: CronJobSpecArgs), startingDeadlineSeconds) =
                            _args_.StartingDeadlineSeconds <- input startingDeadlineSeconds
                            _cargs_, _args_

                        member _.StartingDeadlineSeconds((_cargs_, _args_: CronJobSpecArgs), startingDeadlineSeconds) =
                            _args_.StartingDeadlineSeconds <- io startingDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("successfulJobsHistoryLimit")>]
                        member _.SuccessfulJobsHistoryLimit(
                            (_cargs_, _args_: CronJobSpecArgs),
                            successfulJobsHistoryLimit)
                            =
                            _args_.SuccessfulJobsHistoryLimit <- input successfulJobsHistoryLimit
                            _cargs_, _args_

                        member _.SuccessfulJobsHistoryLimit(
                            (_cargs_, _args_: CronJobSpecArgs),
                            successfulJobsHistoryLimit)
                            =
                            _args_.SuccessfulJobsHistoryLimit <- io successfulJobsHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("suspend")>]
                        member _.Suspend((_cargs_, _args_: CronJobSpecArgs), suspend) =
                            _args_.Suspend <- input suspend
                            _cargs_, _args_

                        member _.Suspend((_cargs_, _args_: CronJobSpecArgs), suspend) =
                            _args_.Suspend <- io suspend
                            _cargs_, _args_

                    let cronJobSpec = CronJobSpecBuilder()

                [<AutoOpen>]
                module CronJobStatus =
                    open Pulumi.Kubernetes.Batch.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1Beta1

                    type CronJobStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CronJobStatusArgs()
                        member _.Run(_cargs_, _args_: CronJobStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CronJobStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("active")>]
                        member _.Active((_cargs_, _args_: CronJobStatusArgs), active) =
                            _args_.Active <- inputList active
                            _cargs_, _args_

                        [<CustomOperation("lastScheduleTime")>]
                        member _.LastScheduleTime((_cargs_, _args_: CronJobStatusArgs), lastScheduleTime) =
                            _args_.LastScheduleTime <- input lastScheduleTime
                            _cargs_, _args_

                        member _.LastScheduleTime((_cargs_, _args_: CronJobStatusArgs), lastScheduleTime) =
                            _args_.LastScheduleTime <- io lastScheduleTime
                            _cargs_, _args_

                    let cronJobStatus = CronJobStatusBuilder()

                [<AutoOpen>]
                module JobTemplateSpec =
                    open Pulumi.Kubernetes.Batch.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V1Beta1

                    type JobTemplateSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, JobTemplateSpecArgs()
                        member _.Run(_cargs_, _args_: JobTemplateSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: JobTemplateSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metadata")>]
                        member _.Metadata((_cargs_, _args_: JobTemplateSpecArgs), metadata) =
                            _args_.Metadata <- input metadata
                            _cargs_, _args_

                        [<CustomOperation("spec")>]
                        member _.Spec((_cargs_, _args_: JobTemplateSpecArgs), spec) =
                            _args_.Spec <- input spec
                            _cargs_, _args_

                    let jobTemplateSpec = JobTemplateSpecBuilder()

            module V2Alpha1 =
                [<AutoOpen>]
                module CronJobSpec =
                    open Pulumi.Kubernetes.Batch.V2Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V2Alpha1

                    type CronJobSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CronJobSpecArgs()
                        member _.Run(_cargs_, _args_: CronJobSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CronJobSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("concurrencyPolicy")>]
                        member _.ConcurrencyPolicy((_cargs_, _args_: CronJobSpecArgs), concurrencyPolicy) =
                            _args_.ConcurrencyPolicy <- input concurrencyPolicy
                            _cargs_, _args_

                        member _.ConcurrencyPolicy((_cargs_, _args_: CronJobSpecArgs), concurrencyPolicy) =
                            _args_.ConcurrencyPolicy <- io concurrencyPolicy
                            _cargs_, _args_

                        [<CustomOperation("failedJobsHistoryLimit")>]
                        member _.FailedJobsHistoryLimit((_cargs_, _args_: CronJobSpecArgs), failedJobsHistoryLimit) =
                            _args_.FailedJobsHistoryLimit <- input failedJobsHistoryLimit
                            _cargs_, _args_

                        member _.FailedJobsHistoryLimit((_cargs_, _args_: CronJobSpecArgs), failedJobsHistoryLimit) =
                            _args_.FailedJobsHistoryLimit <- io failedJobsHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("jobTemplate")>]
                        member _.JobTemplate((_cargs_, _args_: CronJobSpecArgs), jobTemplate) =
                            _args_.JobTemplate <- input jobTemplate
                            _cargs_, _args_

                        [<CustomOperation("schedule")>]
                        member _.Schedule((_cargs_, _args_: CronJobSpecArgs), schedule) =
                            _args_.Schedule <- input schedule
                            _cargs_, _args_

                        member _.Schedule((_cargs_, _args_: CronJobSpecArgs), schedule) =
                            _args_.Schedule <- io schedule
                            _cargs_, _args_

                        [<CustomOperation("startingDeadlineSeconds")>]
                        member _.StartingDeadlineSeconds((_cargs_, _args_: CronJobSpecArgs), startingDeadlineSeconds) =
                            _args_.StartingDeadlineSeconds <- input startingDeadlineSeconds
                            _cargs_, _args_

                        member _.StartingDeadlineSeconds((_cargs_, _args_: CronJobSpecArgs), startingDeadlineSeconds) =
                            _args_.StartingDeadlineSeconds <- io startingDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("successfulJobsHistoryLimit")>]
                        member _.SuccessfulJobsHistoryLimit(
                            (_cargs_, _args_: CronJobSpecArgs),
                            successfulJobsHistoryLimit)
                            =
                            _args_.SuccessfulJobsHistoryLimit <- input successfulJobsHistoryLimit
                            _cargs_, _args_

                        member _.SuccessfulJobsHistoryLimit(
                            (_cargs_, _args_: CronJobSpecArgs),
                            successfulJobsHistoryLimit)
                            =
                            _args_.SuccessfulJobsHistoryLimit <- io successfulJobsHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("suspend")>]
                        member _.Suspend((_cargs_, _args_: CronJobSpecArgs), suspend) =
                            _args_.Suspend <- input suspend
                            _cargs_, _args_

                        member _.Suspend((_cargs_, _args_: CronJobSpecArgs), suspend) =
                            _args_.Suspend <- io suspend
                            _cargs_, _args_

                    let cronJobSpec = CronJobSpecBuilder()

                [<AutoOpen>]
                module CronJobStatus =
                    open Pulumi.Kubernetes.Batch.V2Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V2Alpha1

                    type CronJobStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CronJobStatusArgs()
                        member _.Run(_cargs_, _args_: CronJobStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CronJobStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("active")>]
                        member _.Active((_cargs_, _args_: CronJobStatusArgs), active) =
                            _args_.Active <- inputList active
                            _cargs_, _args_

                        [<CustomOperation("lastScheduleTime")>]
                        member _.LastScheduleTime((_cargs_, _args_: CronJobStatusArgs), lastScheduleTime) =
                            _args_.LastScheduleTime <- input lastScheduleTime
                            _cargs_, _args_

                        member _.LastScheduleTime((_cargs_, _args_: CronJobStatusArgs), lastScheduleTime) =
                            _args_.LastScheduleTime <- io lastScheduleTime
                            _cargs_, _args_

                    let cronJobStatus = CronJobStatusBuilder()

                [<AutoOpen>]
                module JobTemplateSpec =
                    open Pulumi.Kubernetes.Batch.V2Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Batch.V2Alpha1

                    type JobTemplateSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, JobTemplateSpecArgs()
                        member _.Run(_cargs_, _args_: JobTemplateSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: JobTemplateSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metadata")>]
                        member _.Metadata((_cargs_, _args_: JobTemplateSpecArgs), metadata) =
                            _args_.Metadata <- input metadata
                            _cargs_, _args_

                        [<CustomOperation("spec")>]
                        member _.Spec((_cargs_, _args_: JobTemplateSpecArgs), spec) =
                            _args_.Spec <- input spec
                            _cargs_, _args_

                    let jobTemplateSpec = JobTemplateSpecBuilder()

        module Certificates =
            module V1Beta1 =
                [<AutoOpen>]
                module CertificateSigningRequestCondition =
                    open Pulumi.Kubernetes.Certificates.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Certificates.V1Beta1

                    type CertificateSigningRequestConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CertificateSigningRequestConditionArgs()
                        member _.Run(_cargs_, _args_: CertificateSigningRequestConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CertificateSigningRequestConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastUpdateTime")>]
                        member _.LastUpdateTime(
                            (_cargs_, _args_: CertificateSigningRequestConditionArgs),
                            lastUpdateTime)
                            =
                            _args_.LastUpdateTime <- input lastUpdateTime
                            _cargs_, _args_

                        member _.LastUpdateTime(
                            (_cargs_, _args_: CertificateSigningRequestConditionArgs),
                            lastUpdateTime)
                            =
                            _args_.LastUpdateTime <- io lastUpdateTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: CertificateSigningRequestConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: CertificateSigningRequestConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: CertificateSigningRequestConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: CertificateSigningRequestConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: CertificateSigningRequestConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: CertificateSigningRequestConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let certificateSigningRequestCondition =
                        CertificateSigningRequestConditionBuilder()

                [<AutoOpen>]
                module CertificateSigningRequestSpec =
                    open Pulumi.Kubernetes.Certificates.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Certificates.V1Beta1

                    type CertificateSigningRequestSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CertificateSigningRequestSpecArgs()
                        member _.Run(_cargs_, _args_: CertificateSigningRequestSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CertificateSigningRequestSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("extra")>]
                        member _.Extra((_cargs_, _args_: CertificateSigningRequestSpecArgs), extra) =
                            _args_.Extra <- inputMap extra
                            _cargs_, _args_

                        [<CustomOperation("groups")>]
                        member _.Groups((_cargs_, _args_: CertificateSigningRequestSpecArgs), groups) =
                            _args_.Groups <- inputList groups
                            _cargs_, _args_

                        [<CustomOperation("request")>]
                        member _.Request((_cargs_, _args_: CertificateSigningRequestSpecArgs), request) =
                            _args_.Request <- input request
                            _cargs_, _args_

                        member _.Request((_cargs_, _args_: CertificateSigningRequestSpecArgs), request) =
                            _args_.Request <- io request
                            _cargs_, _args_

                        [<CustomOperation("signerName")>]
                        member _.SignerName((_cargs_, _args_: CertificateSigningRequestSpecArgs), signerName) =
                            _args_.SignerName <- input signerName
                            _cargs_, _args_

                        member _.SignerName((_cargs_, _args_: CertificateSigningRequestSpecArgs), signerName) =
                            _args_.SignerName <- io signerName
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: CertificateSigningRequestSpecArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: CertificateSigningRequestSpecArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                        [<CustomOperation("usages")>]
                        member _.Usages((_cargs_, _args_: CertificateSigningRequestSpecArgs), usages) =
                            _args_.Usages <- inputList usages
                            _cargs_, _args_

                        [<CustomOperation("username")>]
                        member _.Username((_cargs_, _args_: CertificateSigningRequestSpecArgs), username) =
                            _args_.Username <- input username
                            _cargs_, _args_

                        member _.Username((_cargs_, _args_: CertificateSigningRequestSpecArgs), username) =
                            _args_.Username <- io username
                            _cargs_, _args_

                    let certificateSigningRequestSpec = CertificateSigningRequestSpecBuilder()

                [<AutoOpen>]
                module CertificateSigningRequestStatus =
                    open Pulumi.Kubernetes.Certificates.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Certificates.V1Beta1

                    type CertificateSigningRequestStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CertificateSigningRequestStatusArgs()
                        member _.Run(_cargs_, _args_: CertificateSigningRequestStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CertificateSigningRequestStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("certificate")>]
                        member _.Certificate((_cargs_, _args_: CertificateSigningRequestStatusArgs), certificate) =
                            _args_.Certificate <- input certificate
                            _cargs_, _args_

                        member _.Certificate((_cargs_, _args_: CertificateSigningRequestStatusArgs), certificate) =
                            _args_.Certificate <- io certificate
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: CertificateSigningRequestStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                    let certificateSigningRequestStatus = CertificateSigningRequestStatusBuilder()

        module Coordination =
            module V1 =
                [<AutoOpen>]
                module LeaseSpec =
                    open Pulumi.Kubernetes.Coordination.V1
                    open Pulumi.Kubernetes.Types.Inputs.Coordination.V1

                    type LeaseSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LeaseSpecArgs()
                        member _.Run(_cargs_, _args_: LeaseSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LeaseSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("acquireTime")>]
                        member _.AcquireTime((_cargs_, _args_: LeaseSpecArgs), acquireTime) =
                            _args_.AcquireTime <- input acquireTime
                            _cargs_, _args_

                        member _.AcquireTime((_cargs_, _args_: LeaseSpecArgs), acquireTime) =
                            _args_.AcquireTime <- io acquireTime
                            _cargs_, _args_

                        [<CustomOperation("holderIdentity")>]
                        member _.HolderIdentity((_cargs_, _args_: LeaseSpecArgs), holderIdentity) =
                            _args_.HolderIdentity <- input holderIdentity
                            _cargs_, _args_

                        member _.HolderIdentity((_cargs_, _args_: LeaseSpecArgs), holderIdentity) =
                            _args_.HolderIdentity <- io holderIdentity
                            _cargs_, _args_

                        [<CustomOperation("leaseDurationSeconds")>]
                        member _.LeaseDurationSeconds((_cargs_, _args_: LeaseSpecArgs), leaseDurationSeconds) =
                            _args_.LeaseDurationSeconds <- input leaseDurationSeconds
                            _cargs_, _args_

                        member _.LeaseDurationSeconds((_cargs_, _args_: LeaseSpecArgs), leaseDurationSeconds) =
                            _args_.LeaseDurationSeconds <- io leaseDurationSeconds
                            _cargs_, _args_

                        [<CustomOperation("leaseTransitions")>]
                        member _.LeaseTransitions((_cargs_, _args_: LeaseSpecArgs), leaseTransitions) =
                            _args_.LeaseTransitions <- input leaseTransitions
                            _cargs_, _args_

                        member _.LeaseTransitions((_cargs_, _args_: LeaseSpecArgs), leaseTransitions) =
                            _args_.LeaseTransitions <- io leaseTransitions
                            _cargs_, _args_

                        [<CustomOperation("renewTime")>]
                        member _.RenewTime((_cargs_, _args_: LeaseSpecArgs), renewTime) =
                            _args_.RenewTime <- input renewTime
                            _cargs_, _args_

                        member _.RenewTime((_cargs_, _args_: LeaseSpecArgs), renewTime) =
                            _args_.RenewTime <- io renewTime
                            _cargs_, _args_

                    let leaseSpec = LeaseSpecBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module LeaseSpec =
                    open Pulumi.Kubernetes.Coordination.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Coordination.V1Beta1

                    type LeaseSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LeaseSpecArgs()
                        member _.Run(_cargs_, _args_: LeaseSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LeaseSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("acquireTime")>]
                        member _.AcquireTime((_cargs_, _args_: LeaseSpecArgs), acquireTime) =
                            _args_.AcquireTime <- input acquireTime
                            _cargs_, _args_

                        member _.AcquireTime((_cargs_, _args_: LeaseSpecArgs), acquireTime) =
                            _args_.AcquireTime <- io acquireTime
                            _cargs_, _args_

                        [<CustomOperation("holderIdentity")>]
                        member _.HolderIdentity((_cargs_, _args_: LeaseSpecArgs), holderIdentity) =
                            _args_.HolderIdentity <- input holderIdentity
                            _cargs_, _args_

                        member _.HolderIdentity((_cargs_, _args_: LeaseSpecArgs), holderIdentity) =
                            _args_.HolderIdentity <- io holderIdentity
                            _cargs_, _args_

                        [<CustomOperation("leaseDurationSeconds")>]
                        member _.LeaseDurationSeconds((_cargs_, _args_: LeaseSpecArgs), leaseDurationSeconds) =
                            _args_.LeaseDurationSeconds <- input leaseDurationSeconds
                            _cargs_, _args_

                        member _.LeaseDurationSeconds((_cargs_, _args_: LeaseSpecArgs), leaseDurationSeconds) =
                            _args_.LeaseDurationSeconds <- io leaseDurationSeconds
                            _cargs_, _args_

                        [<CustomOperation("leaseTransitions")>]
                        member _.LeaseTransitions((_cargs_, _args_: LeaseSpecArgs), leaseTransitions) =
                            _args_.LeaseTransitions <- input leaseTransitions
                            _cargs_, _args_

                        member _.LeaseTransitions((_cargs_, _args_: LeaseSpecArgs), leaseTransitions) =
                            _args_.LeaseTransitions <- io leaseTransitions
                            _cargs_, _args_

                        [<CustomOperation("renewTime")>]
                        member _.RenewTime((_cargs_, _args_: LeaseSpecArgs), renewTime) =
                            _args_.RenewTime <- input renewTime
                            _cargs_, _args_

                        member _.RenewTime((_cargs_, _args_: LeaseSpecArgs), renewTime) =
                            _args_.RenewTime <- io renewTime
                            _cargs_, _args_

                    let leaseSpec = LeaseSpecBuilder()

        module Core =
            module V1 =
                [<AutoOpen>]
                module AWSElasticBlockStoreVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AWSElasticBlockStoreVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AWSElasticBlockStoreVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("partition")>]
                        member _.Partition((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), partition) =
                            _args_.Partition <- input partition
                            _cargs_, _args_

                        member _.Partition((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), partition) =
                            _args_.Partition <- io partition
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("volumeID")>]
                        member _.VolumeID((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- input volumeID
                            _cargs_, _args_

                        member _.VolumeID((_cargs_, _args_: AWSElasticBlockStoreVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- io volumeID
                            _cargs_, _args_

                    let aWSElasticBlockStoreVolumeSource =
                        AWSElasticBlockStoreVolumeSourceBuilder()

                [<AutoOpen>]
                module Affinity =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AffinityBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AffinityArgs()
                        member _.Run(_cargs_, _args_: AffinityArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AffinityArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nodeAffinity")>]
                        member _.NodeAffinity((_cargs_, _args_: AffinityArgs), nodeAffinity) =
                            _args_.NodeAffinity <- input nodeAffinity
                            _cargs_, _args_

                        [<CustomOperation("podAffinity")>]
                        member _.PodAffinity((_cargs_, _args_: AffinityArgs), podAffinity) =
                            _args_.PodAffinity <- input podAffinity
                            _cargs_, _args_

                        [<CustomOperation("podAntiAffinity")>]
                        member _.PodAntiAffinity((_cargs_, _args_: AffinityArgs), podAntiAffinity) =
                            _args_.PodAntiAffinity <- input podAntiAffinity
                            _cargs_, _args_

                    let affinity = AffinityBuilder()

                [<AutoOpen>]
                module AttachedVolume =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AttachedVolumeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AttachedVolumeArgs()
                        member _.Run(_cargs_, _args_: AttachedVolumeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AttachedVolumeArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("devicePath")>]
                        member _.DevicePath((_cargs_, _args_: AttachedVolumeArgs), devicePath) =
                            _args_.DevicePath <- input devicePath
                            _cargs_, _args_

                        member _.DevicePath((_cargs_, _args_: AttachedVolumeArgs), devicePath) =
                            _args_.DevicePath <- io devicePath
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: AttachedVolumeArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: AttachedVolumeArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let attachedVolume = AttachedVolumeBuilder()

                [<AutoOpen>]
                module AzureDiskVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AzureDiskVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AzureDiskVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: AzureDiskVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AzureDiskVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("cachingMode")>]
                        member _.CachingMode((_cargs_, _args_: AzureDiskVolumeSourceArgs), cachingMode) =
                            _args_.CachingMode <- input cachingMode
                            _cargs_, _args_

                        member _.CachingMode((_cargs_, _args_: AzureDiskVolumeSourceArgs), cachingMode) =
                            _args_.CachingMode <- io cachingMode
                            _cargs_, _args_

                        [<CustomOperation("diskName")>]
                        member _.DiskName((_cargs_, _args_: AzureDiskVolumeSourceArgs), diskName) =
                            _args_.DiskName <- input diskName
                            _cargs_, _args_

                        member _.DiskName((_cargs_, _args_: AzureDiskVolumeSourceArgs), diskName) =
                            _args_.DiskName <- io diskName
                            _cargs_, _args_

                        [<CustomOperation("diskURI")>]
                        member _.DiskURI((_cargs_, _args_: AzureDiskVolumeSourceArgs), diskURI) =
                            _args_.DiskURI <- input diskURI
                            _cargs_, _args_

                        member _.DiskURI((_cargs_, _args_: AzureDiskVolumeSourceArgs), diskURI) =
                            _args_.DiskURI <- io diskURI
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: AzureDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: AzureDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: AzureDiskVolumeSourceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: AzureDiskVolumeSourceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AzureDiskVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AzureDiskVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let azureDiskVolumeSource = AzureDiskVolumeSourceBuilder()

                [<AutoOpen>]
                module AzureFilePersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AzureFilePersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AzureFilePersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: AzureFilePersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretName")>]
                        member _.SecretName((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), secretName) =
                            _args_.SecretName <- input secretName
                            _cargs_, _args_

                        member _.SecretName((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), secretName) =
                            _args_.SecretName <- io secretName
                            _cargs_, _args_

                        [<CustomOperation("secretNamespace")>]
                        member _.SecretNamespace((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), secretNamespace) =
                            _args_.SecretNamespace <- input secretNamespace
                            _cargs_, _args_

                        member _.SecretNamespace((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), secretNamespace) =
                            _args_.SecretNamespace <- io secretNamespace
                            _cargs_, _args_

                        [<CustomOperation("shareName")>]
                        member _.ShareName((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), shareName) =
                            _args_.ShareName <- input shareName
                            _cargs_, _args_

                        member _.ShareName((_cargs_, _args_: AzureFilePersistentVolumeSourceArgs), shareName) =
                            _args_.ShareName <- io shareName
                            _cargs_, _args_

                    let azureFilePersistentVolumeSource = AzureFilePersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module AzureFileVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type AzureFileVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AzureFileVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: AzureFileVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AzureFileVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AzureFileVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AzureFileVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretName")>]
                        member _.SecretName((_cargs_, _args_: AzureFileVolumeSourceArgs), secretName) =
                            _args_.SecretName <- input secretName
                            _cargs_, _args_

                        member _.SecretName((_cargs_, _args_: AzureFileVolumeSourceArgs), secretName) =
                            _args_.SecretName <- io secretName
                            _cargs_, _args_

                        [<CustomOperation("shareName")>]
                        member _.ShareName((_cargs_, _args_: AzureFileVolumeSourceArgs), shareName) =
                            _args_.ShareName <- input shareName
                            _cargs_, _args_

                        member _.ShareName((_cargs_, _args_: AzureFileVolumeSourceArgs), shareName) =
                            _args_.ShareName <- io shareName
                            _cargs_, _args_

                    let azureFileVolumeSource = AzureFileVolumeSourceBuilder()

                [<AutoOpen>]
                module CSIPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CSIPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSIPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CSIPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSIPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("controllerExpandSecretRef")>]
                        member _.ControllerExpandSecretRef(
                            (_cargs_, _args_: CSIPersistentVolumeSourceArgs),
                            controllerExpandSecretRef)
                            =
                            _args_.ControllerExpandSecretRef <- input controllerExpandSecretRef
                            _cargs_, _args_

                        [<CustomOperation("controllerPublishSecretRef")>]
                        member _.ControllerPublishSecretRef(
                            (_cargs_, _args_: CSIPersistentVolumeSourceArgs),
                            controllerPublishSecretRef)
                            =
                            _args_.ControllerPublishSecretRef <- input controllerPublishSecretRef
                            _cargs_, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: CSIPersistentVolumeSourceArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: CSIPersistentVolumeSourceArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: CSIPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: CSIPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("nodePublishSecretRef")>]
                        member _.NodePublishSecretRef(
                            (_cargs_, _args_: CSIPersistentVolumeSourceArgs),
                            nodePublishSecretRef)
                            =
                            _args_.NodePublishSecretRef <- input nodePublishSecretRef
                            _cargs_, _args_

                        [<CustomOperation("nodeStageSecretRef")>]
                        member _.NodeStageSecretRef((_cargs_, _args_: CSIPersistentVolumeSourceArgs), nodeStageSecretRef) =
                            _args_.NodeStageSecretRef <- input nodeStageSecretRef
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CSIPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CSIPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("volumeAttributes")>]
                        member _.VolumeAttributes((_cargs_, _args_: CSIPersistentVolumeSourceArgs), volumeAttributes) =
                            _args_.VolumeAttributes <- inputMap volumeAttributes
                            _cargs_, _args_

                        [<CustomOperation("volumeHandle")>]
                        member _.VolumeHandle((_cargs_, _args_: CSIPersistentVolumeSourceArgs), volumeHandle) =
                            _args_.VolumeHandle <- input volumeHandle
                            _cargs_, _args_

                        member _.VolumeHandle((_cargs_, _args_: CSIPersistentVolumeSourceArgs), volumeHandle) =
                            _args_.VolumeHandle <- io volumeHandle
                            _cargs_, _args_

                    let cSIPersistentVolumeSource = CSIPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module CSIVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CSIVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSIVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CSIVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSIVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: CSIVolumeSourceArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: CSIVolumeSourceArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: CSIVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: CSIVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("nodePublishSecretRef")>]
                        member _.NodePublishSecretRef((_cargs_, _args_: CSIVolumeSourceArgs), nodePublishSecretRef) =
                            _args_.NodePublishSecretRef <- input nodePublishSecretRef
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CSIVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CSIVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("volumeAttributes")>]
                        member _.VolumeAttributes((_cargs_, _args_: CSIVolumeSourceArgs), volumeAttributes) =
                            _args_.VolumeAttributes <- inputMap volumeAttributes
                            _cargs_, _args_

                    let cSIVolumeSource = CSIVolumeSourceBuilder()

                [<AutoOpen>]
                module Capabilities =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CapabilitiesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CapabilitiesArgs()
                        member _.Run(_cargs_, _args_: CapabilitiesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CapabilitiesArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("add")>]
                        member _.Add((_cargs_, _args_: CapabilitiesArgs), add) =
                            _args_.Add <- inputList add
                            _cargs_, _args_

                        [<CustomOperation("drop")>]
                        member _.Drop((_cargs_, _args_: CapabilitiesArgs), drop) =
                            _args_.Drop <- inputList drop
                            _cargs_, _args_

                    let capabilities = CapabilitiesBuilder()

                [<AutoOpen>]
                module CephFSPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CephFSPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CephFSPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CephFSPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("monitors")>]
                        member _.Monitors((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), monitors) =
                            _args_.Monitors <- inputList monitors
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretFile")>]
                        member _.SecretFile((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), secretFile) =
                            _args_.SecretFile <- input secretFile
                            _cargs_, _args_

                        member _.SecretFile((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), secretFile) =
                            _args_.SecretFile <- io secretFile
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: CephFSPersistentVolumeSourceArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let cephFSPersistentVolumeSource = CephFSPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module CephFSVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CephFSVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CephFSVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CephFSVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CephFSVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("monitors")>]
                        member _.Monitors((_cargs_, _args_: CephFSVolumeSourceArgs), monitors) =
                            _args_.Monitors <- inputList monitors
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: CephFSVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: CephFSVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CephFSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CephFSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretFile")>]
                        member _.SecretFile((_cargs_, _args_: CephFSVolumeSourceArgs), secretFile) =
                            _args_.SecretFile <- input secretFile
                            _cargs_, _args_

                        member _.SecretFile((_cargs_, _args_: CephFSVolumeSourceArgs), secretFile) =
                            _args_.SecretFile <- io secretFile
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: CephFSVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: CephFSVolumeSourceArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: CephFSVolumeSourceArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let cephFSVolumeSource = CephFSVolumeSourceBuilder()

                [<AutoOpen>]
                module CinderPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CinderPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CinderPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CinderPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CinderPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: CinderPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: CinderPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CinderPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CinderPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: CinderPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("volumeID")>]
                        member _.VolumeID((_cargs_, _args_: CinderPersistentVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- input volumeID
                            _cargs_, _args_

                        member _.VolumeID((_cargs_, _args_: CinderPersistentVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- io volumeID
                            _cargs_, _args_

                    let cinderPersistentVolumeSource = CinderPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module CinderVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type CinderVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CinderVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: CinderVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CinderVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: CinderVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: CinderVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: CinderVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: CinderVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: CinderVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("volumeID")>]
                        member _.VolumeID((_cargs_, _args_: CinderVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- input volumeID
                            _cargs_, _args_

                        member _.VolumeID((_cargs_, _args_: CinderVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- io volumeID
                            _cargs_, _args_

                    let cinderVolumeSource = CinderVolumeSourceBuilder()

                [<AutoOpen>]
                module ClientIPConfig =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ClientIPConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ClientIPConfigArgs()
                        member _.Run(_cargs_, _args_: ClientIPConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ClientIPConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: ClientIPConfigArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: ClientIPConfigArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let clientIPConfig = ClientIPConfigBuilder()

                [<AutoOpen>]
                module ComponentCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ComponentConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ComponentConditionArgs()
                        member _.Run(_cargs_, _args_: ComponentConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ComponentConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("error")>]
                        member _.Error((_cargs_, _args_: ComponentConditionArgs), error) =
                            _args_.Error <- input error
                            _cargs_, _args_

                        member _.Error((_cargs_, _args_: ComponentConditionArgs), error) =
                            _args_.Error <- io error
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ComponentConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ComponentConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: ComponentConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: ComponentConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ComponentConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ComponentConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let componentCondition = ComponentConditionBuilder()

                [<AutoOpen>]
                module ConfigMapEnvSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ConfigMapEnvSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ConfigMapEnvSourceArgs()
                        member _.Run(_cargs_, _args_: ConfigMapEnvSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ConfigMapEnvSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ConfigMapEnvSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ConfigMapEnvSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: ConfigMapEnvSourceArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: ConfigMapEnvSourceArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let configMapEnvSource = ConfigMapEnvSourceBuilder()

                [<AutoOpen>]
                module ConfigMapKeySelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ConfigMapKeySelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ConfigMapKeySelectorArgs()
                        member _.Run(_cargs_, _args_: ConfigMapKeySelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ConfigMapKeySelectorArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: ConfigMapKeySelectorArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: ConfigMapKeySelectorArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ConfigMapKeySelectorArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ConfigMapKeySelectorArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: ConfigMapKeySelectorArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: ConfigMapKeySelectorArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let configMapKeySelector = ConfigMapKeySelectorBuilder()

                [<AutoOpen>]
                module ConfigMapNodeConfigSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ConfigMapNodeConfigSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ConfigMapNodeConfigSourceArgs()
                        member _.Run(_cargs_, _args_: ConfigMapNodeConfigSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("kubeletConfigKey")>]
                        member _.KubeletConfigKey((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), kubeletConfigKey) =
                            _args_.KubeletConfigKey <- input kubeletConfigKey
                            _cargs_, _args_

                        member _.KubeletConfigKey((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), kubeletConfigKey) =
                            _args_.KubeletConfigKey <- io kubeletConfigKey
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("resourceVersion")>]
                        member _.ResourceVersion((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), resourceVersion) =
                            _args_.ResourceVersion <- input resourceVersion
                            _cargs_, _args_

                        member _.ResourceVersion((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), resourceVersion) =
                            _args_.ResourceVersion <- io resourceVersion
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: ConfigMapNodeConfigSourceArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let configMapNodeConfigSource = ConfigMapNodeConfigSourceBuilder()

                [<AutoOpen>]
                module ConfigMapProjection =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ConfigMapProjectionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ConfigMapProjectionArgs()
                        member _.Run(_cargs_, _args_: ConfigMapProjectionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ConfigMapProjectionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: ConfigMapProjectionArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ConfigMapProjectionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ConfigMapProjectionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: ConfigMapProjectionArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: ConfigMapProjectionArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let configMapProjection = ConfigMapProjectionBuilder()

                [<AutoOpen>]
                module ConfigMapVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ConfigMapVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ConfigMapVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ConfigMapVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ConfigMapVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("defaultMode")>]
                        member _.DefaultMode((_cargs_, _args_: ConfigMapVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- input defaultMode
                            _cargs_, _args_

                        member _.DefaultMode((_cargs_, _args_: ConfigMapVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- io defaultMode
                            _cargs_, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: ConfigMapVolumeSourceArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ConfigMapVolumeSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ConfigMapVolumeSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: ConfigMapVolumeSourceArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: ConfigMapVolumeSourceArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let configMapVolumeSource = ConfigMapVolumeSourceBuilder()

                [<AutoOpen>]
                module Container =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerArgs()
                        member _.Run(_cargs_, _args_: ContainerArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("args")>]
                        member _.Args((_cargs_, _args_: ContainerArgs), args) =
                            _args_.Args <- inputList args
                            _cargs_, _args_

                        [<CustomOperation("command")>]
                        member _.Command((_cargs_, _args_: ContainerArgs), command) =
                            _args_.Command <- inputList command
                            _cargs_, _args_

                        [<CustomOperation("env")>]
                        member _.Env((_cargs_, _args_: ContainerArgs), env) =
                            _args_.Env <- inputList env
                            _cargs_, _args_

                        [<CustomOperation("envFrom")>]
                        member _.EnvFrom((_cargs_, _args_: ContainerArgs), envFrom) =
                            _args_.EnvFrom <- inputList envFrom
                            _cargs_, _args_

                        [<CustomOperation("image")>]
                        member _.Image((_cargs_, _args_: ContainerArgs), image) =
                            _args_.Image <- input image
                            _cargs_, _args_

                        member _.Image((_cargs_, _args_: ContainerArgs), image) =
                            _args_.Image <- io image
                            _cargs_, _args_

                        [<CustomOperation("imagePullPolicy")>]
                        member _.ImagePullPolicy((_cargs_, _args_: ContainerArgs), imagePullPolicy) =
                            _args_.ImagePullPolicy <- input imagePullPolicy
                            _cargs_, _args_

                        member _.ImagePullPolicy((_cargs_, _args_: ContainerArgs), imagePullPolicy) =
                            _args_.ImagePullPolicy <- io imagePullPolicy
                            _cargs_, _args_

                        [<CustomOperation("lifecycle")>]
                        member _.Lifecycle((_cargs_, _args_: ContainerArgs), lifecycle) =
                            _args_.Lifecycle <- input lifecycle
                            _cargs_, _args_

                        [<CustomOperation("livenessProbe")>]
                        member _.LivenessProbe((_cargs_, _args_: ContainerArgs), livenessProbe) =
                            _args_.LivenessProbe <- input livenessProbe
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ContainerArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ContainerArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: ContainerArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                        [<CustomOperation("readinessProbe")>]
                        member _.ReadinessProbe((_cargs_, _args_: ContainerArgs), readinessProbe) =
                            _args_.ReadinessProbe <- input readinessProbe
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: ContainerArgs), resources) =
                            _args_.Resources <- input resources
                            _cargs_, _args_

                        [<CustomOperation("securityContext")>]
                        member _.SecurityContext((_cargs_, _args_: ContainerArgs), securityContext) =
                            _args_.SecurityContext <- input securityContext
                            _cargs_, _args_

                        [<CustomOperation("startupProbe")>]
                        member _.StartupProbe((_cargs_, _args_: ContainerArgs), startupProbe) =
                            _args_.StartupProbe <- input startupProbe
                            _cargs_, _args_

                        [<CustomOperation("stdin")>]
                        member _.Stdin((_cargs_, _args_: ContainerArgs), stdin) =
                            _args_.Stdin <- input stdin
                            _cargs_, _args_

                        member _.Stdin((_cargs_, _args_: ContainerArgs), stdin) =
                            _args_.Stdin <- io stdin
                            _cargs_, _args_

                        [<CustomOperation("stdinOnce")>]
                        member _.StdinOnce((_cargs_, _args_: ContainerArgs), stdinOnce) =
                            _args_.StdinOnce <- input stdinOnce
                            _cargs_, _args_

                        member _.StdinOnce((_cargs_, _args_: ContainerArgs), stdinOnce) =
                            _args_.StdinOnce <- io stdinOnce
                            _cargs_, _args_

                        [<CustomOperation("terminationMessagePath")>]
                        member _.TerminationMessagePath((_cargs_, _args_: ContainerArgs), terminationMessagePath) =
                            _args_.TerminationMessagePath <- input terminationMessagePath
                            _cargs_, _args_

                        member _.TerminationMessagePath((_cargs_, _args_: ContainerArgs), terminationMessagePath) =
                            _args_.TerminationMessagePath <- io terminationMessagePath
                            _cargs_, _args_

                        [<CustomOperation("terminationMessagePolicy")>]
                        member _.TerminationMessagePolicy((_cargs_, _args_: ContainerArgs), terminationMessagePolicy) =
                            _args_.TerminationMessagePolicy <- input terminationMessagePolicy
                            _cargs_, _args_

                        member _.TerminationMessagePolicy((_cargs_, _args_: ContainerArgs), terminationMessagePolicy) =
                            _args_.TerminationMessagePolicy <- io terminationMessagePolicy
                            _cargs_, _args_

                        [<CustomOperation("tty")>]
                        member _.Tty((_cargs_, _args_: ContainerArgs), tty) =
                            _args_.Tty <- input tty
                            _cargs_, _args_

                        member _.Tty((_cargs_, _args_: ContainerArgs), tty) =
                            _args_.Tty <- io tty
                            _cargs_, _args_

                        [<CustomOperation("volumeDevices")>]
                        member _.VolumeDevices((_cargs_, _args_: ContainerArgs), volumeDevices) =
                            _args_.VolumeDevices <- inputList volumeDevices
                            _cargs_, _args_

                        [<CustomOperation("volumeMounts")>]
                        member _.VolumeMounts((_cargs_, _args_: ContainerArgs), volumeMounts) =
                            _args_.VolumeMounts <- inputList volumeMounts
                            _cargs_, _args_

                        [<CustomOperation("workingDir")>]
                        member _.WorkingDir((_cargs_, _args_: ContainerArgs), workingDir) =
                            _args_.WorkingDir <- input workingDir
                            _cargs_, _args_

                        member _.WorkingDir((_cargs_, _args_: ContainerArgs), workingDir) =
                            _args_.WorkingDir <- io workingDir
                            _cargs_, _args_

                    let container = ContainerBuilder()

                [<AutoOpen>]
                module ContainerImage =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerImageBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerImageArgs()
                        member _.Run(_cargs_, _args_: ContainerImageArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerImageArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("names")>]
                        member _.Names((_cargs_, _args_: ContainerImageArgs), names) =
                            _args_.Names <- inputList names
                            _cargs_, _args_

                        [<CustomOperation("sizeBytes")>]
                        member _.SizeBytes((_cargs_, _args_: ContainerImageArgs), sizeBytes) =
                            _args_.SizeBytes <- input sizeBytes
                            _cargs_, _args_

                        member _.SizeBytes((_cargs_, _args_: ContainerImageArgs), sizeBytes) =
                            _args_.SizeBytes <- io sizeBytes
                            _cargs_, _args_

                    let containerImage = ContainerImageBuilder()

                [<AutoOpen>]
                module ContainerPort =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerPortBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerPortArgs()
                        member _.Run(_cargs_, _args_: ContainerPortArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerPortArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("containerPortValue")>]
                        member _.ContainerPortValue((_cargs_, _args_: ContainerPortArgs), containerPortValue) =
                            _args_.ContainerPortValue <- input containerPortValue
                            _cargs_, _args_

                        member _.ContainerPortValue((_cargs_, _args_: ContainerPortArgs), containerPortValue) =
                            _args_.ContainerPortValue <- io containerPortValue
                            _cargs_, _args_

                        [<CustomOperation("hostIP")>]
                        member _.HostIP((_cargs_, _args_: ContainerPortArgs), hostIP) =
                            _args_.HostIP <- input hostIP
                            _cargs_, _args_

                        member _.HostIP((_cargs_, _args_: ContainerPortArgs), hostIP) =
                            _args_.HostIP <- io hostIP
                            _cargs_, _args_

                        [<CustomOperation("hostPort")>]
                        member _.HostPort((_cargs_, _args_: ContainerPortArgs), hostPort) =
                            _args_.HostPort <- input hostPort
                            _cargs_, _args_

                        member _.HostPort((_cargs_, _args_: ContainerPortArgs), hostPort) =
                            _args_.HostPort <- io hostPort
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ContainerPortArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ContainerPortArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("protocol")>]
                        member _.Protocol((_cargs_, _args_: ContainerPortArgs), protocol) =
                            _args_.Protocol <- input protocol
                            _cargs_, _args_

                        member _.Protocol((_cargs_, _args_: ContainerPortArgs), protocol) =
                            _args_.Protocol <- io protocol
                            _cargs_, _args_

                    let containerPort = ContainerPortBuilder()

                [<AutoOpen>]
                module ContainerState =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerStateBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerStateArgs()
                        member _.Run(_cargs_, _args_: ContainerStateArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerStateArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("running")>]
                        member _.Running((_cargs_, _args_: ContainerStateArgs), running) =
                            _args_.Running <- input running
                            _cargs_, _args_

                        [<CustomOperation("terminated")>]
                        member _.Terminated((_cargs_, _args_: ContainerStateArgs), terminated) =
                            _args_.Terminated <- input terminated
                            _cargs_, _args_

                        [<CustomOperation("waiting")>]
                        member _.Waiting((_cargs_, _args_: ContainerStateArgs), waiting) =
                            _args_.Waiting <- input waiting
                            _cargs_, _args_

                    let containerState = ContainerStateBuilder()

                [<AutoOpen>]
                module ContainerStateRunning =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerStateRunningBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerStateRunningArgs()
                        member _.Run(_cargs_, _args_: ContainerStateRunningArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerStateRunningArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("startedAt")>]
                        member _.StartedAt((_cargs_, _args_: ContainerStateRunningArgs), startedAt) =
                            _args_.StartedAt <- input startedAt
                            _cargs_, _args_

                        member _.StartedAt((_cargs_, _args_: ContainerStateRunningArgs), startedAt) =
                            _args_.StartedAt <- io startedAt
                            _cargs_, _args_

                    let containerStateRunning = ContainerStateRunningBuilder()

                [<AutoOpen>]
                module ContainerStateTerminated =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerStateTerminatedBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerStateTerminatedArgs()
                        member _.Run(_cargs_, _args_: ContainerStateTerminatedArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerStateTerminatedArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("containerID")>]
                        member _.ContainerID((_cargs_, _args_: ContainerStateTerminatedArgs), containerID) =
                            _args_.ContainerID <- input containerID
                            _cargs_, _args_

                        member _.ContainerID((_cargs_, _args_: ContainerStateTerminatedArgs), containerID) =
                            _args_.ContainerID <- io containerID
                            _cargs_, _args_

                        [<CustomOperation("exitCode")>]
                        member _.ExitCode((_cargs_, _args_: ContainerStateTerminatedArgs), exitCode) =
                            _args_.ExitCode <- input exitCode
                            _cargs_, _args_

                        member _.ExitCode((_cargs_, _args_: ContainerStateTerminatedArgs), exitCode) =
                            _args_.ExitCode <- io exitCode
                            _cargs_, _args_

                        [<CustomOperation("finishedAt")>]
                        member _.FinishedAt((_cargs_, _args_: ContainerStateTerminatedArgs), finishedAt) =
                            _args_.FinishedAt <- input finishedAt
                            _cargs_, _args_

                        member _.FinishedAt((_cargs_, _args_: ContainerStateTerminatedArgs), finishedAt) =
                            _args_.FinishedAt <- io finishedAt
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ContainerStateTerminatedArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ContainerStateTerminatedArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ContainerStateTerminatedArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ContainerStateTerminatedArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("signal")>]
                        member _.Signal((_cargs_, _args_: ContainerStateTerminatedArgs), signal) =
                            _args_.Signal <- input signal
                            _cargs_, _args_

                        member _.Signal((_cargs_, _args_: ContainerStateTerminatedArgs), signal) =
                            _args_.Signal <- io signal
                            _cargs_, _args_

                        [<CustomOperation("startedAt")>]
                        member _.StartedAt((_cargs_, _args_: ContainerStateTerminatedArgs), startedAt) =
                            _args_.StartedAt <- input startedAt
                            _cargs_, _args_

                        member _.StartedAt((_cargs_, _args_: ContainerStateTerminatedArgs), startedAt) =
                            _args_.StartedAt <- io startedAt
                            _cargs_, _args_

                    let containerStateTerminated = ContainerStateTerminatedBuilder()

                [<AutoOpen>]
                module ContainerStateWaiting =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerStateWaitingBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerStateWaitingArgs()
                        member _.Run(_cargs_, _args_: ContainerStateWaitingArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerStateWaitingArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ContainerStateWaitingArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ContainerStateWaitingArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ContainerStateWaitingArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ContainerStateWaitingArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                    let containerStateWaiting = ContainerStateWaitingBuilder()

                [<AutoOpen>]
                module ContainerStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ContainerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ContainerStatusArgs()
                        member _.Run(_cargs_, _args_: ContainerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ContainerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("containerID")>]
                        member _.ContainerID((_cargs_, _args_: ContainerStatusArgs), containerID) =
                            _args_.ContainerID <- input containerID
                            _cargs_, _args_

                        member _.ContainerID((_cargs_, _args_: ContainerStatusArgs), containerID) =
                            _args_.ContainerID <- io containerID
                            _cargs_, _args_

                        [<CustomOperation("image")>]
                        member _.Image((_cargs_, _args_: ContainerStatusArgs), image) =
                            _args_.Image <- input image
                            _cargs_, _args_

                        member _.Image((_cargs_, _args_: ContainerStatusArgs), image) =
                            _args_.Image <- io image
                            _cargs_, _args_

                        [<CustomOperation("imageID")>]
                        member _.ImageID((_cargs_, _args_: ContainerStatusArgs), imageID) =
                            _args_.ImageID <- input imageID
                            _cargs_, _args_

                        member _.ImageID((_cargs_, _args_: ContainerStatusArgs), imageID) =
                            _args_.ImageID <- io imageID
                            _cargs_, _args_

                        [<CustomOperation("lastState")>]
                        member _.LastState((_cargs_, _args_: ContainerStatusArgs), lastState) =
                            _args_.LastState <- input lastState
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ContainerStatusArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ContainerStatusArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("ready")>]
                        member _.Ready((_cargs_, _args_: ContainerStatusArgs), ready) =
                            _args_.Ready <- input ready
                            _cargs_, _args_

                        member _.Ready((_cargs_, _args_: ContainerStatusArgs), ready) =
                            _args_.Ready <- io ready
                            _cargs_, _args_

                        [<CustomOperation("restartCount")>]
                        member _.RestartCount((_cargs_, _args_: ContainerStatusArgs), restartCount) =
                            _args_.RestartCount <- input restartCount
                            _cargs_, _args_

                        member _.RestartCount((_cargs_, _args_: ContainerStatusArgs), restartCount) =
                            _args_.RestartCount <- io restartCount
                            _cargs_, _args_

                        [<CustomOperation("started")>]
                        member _.Started((_cargs_, _args_: ContainerStatusArgs), started) =
                            _args_.Started <- input started
                            _cargs_, _args_

                        member _.Started((_cargs_, _args_: ContainerStatusArgs), started) =
                            _args_.Started <- io started
                            _cargs_, _args_

                        [<CustomOperation("state")>]
                        member _.State((_cargs_, _args_: ContainerStatusArgs), state) =
                            _args_.State <- input state
                            _cargs_, _args_

                    let containerStatus = ContainerStatusBuilder()

                [<AutoOpen>]
                module DaemonEndpoint =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type DaemonEndpointBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonEndpointArgs()
                        member _.Run(_cargs_, _args_: DaemonEndpointArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonEndpointArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: DaemonEndpointArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: DaemonEndpointArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                    let daemonEndpoint = DaemonEndpointBuilder()

                [<AutoOpen>]
                module DownwardAPIProjection =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type DownwardAPIProjectionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DownwardAPIProjectionArgs()
                        member _.Run(_cargs_, _args_: DownwardAPIProjectionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DownwardAPIProjectionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: DownwardAPIProjectionArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                    let downwardAPIProjection = DownwardAPIProjectionBuilder()

                [<AutoOpen>]
                module DownwardAPIVolumeFile =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type DownwardAPIVolumeFileBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DownwardAPIVolumeFileArgs()
                        member _.Run(_cargs_, _args_: DownwardAPIVolumeFileArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DownwardAPIVolumeFileArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fieldRef")>]
                        member _.FieldRef((_cargs_, _args_: DownwardAPIVolumeFileArgs), fieldRef) =
                            _args_.FieldRef <- input fieldRef
                            _cargs_, _args_

                        [<CustomOperation("mode")>]
                        member _.Mode((_cargs_, _args_: DownwardAPIVolumeFileArgs), mode) =
                            _args_.Mode <- input mode
                            _cargs_, _args_

                        member _.Mode((_cargs_, _args_: DownwardAPIVolumeFileArgs), mode) =
                            _args_.Mode <- io mode
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: DownwardAPIVolumeFileArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: DownwardAPIVolumeFileArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("resourceFieldRef")>]
                        member _.ResourceFieldRef((_cargs_, _args_: DownwardAPIVolumeFileArgs), resourceFieldRef) =
                            _args_.ResourceFieldRef <- input resourceFieldRef
                            _cargs_, _args_

                    let downwardAPIVolumeFile = DownwardAPIVolumeFileBuilder()

                [<AutoOpen>]
                module DownwardAPIVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type DownwardAPIVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DownwardAPIVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: DownwardAPIVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DownwardAPIVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("defaultMode")>]
                        member _.DefaultMode((_cargs_, _args_: DownwardAPIVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- input defaultMode
                            _cargs_, _args_

                        member _.DefaultMode((_cargs_, _args_: DownwardAPIVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- io defaultMode
                            _cargs_, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: DownwardAPIVolumeSourceArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                    let downwardAPIVolumeSource = DownwardAPIVolumeSourceBuilder()

                [<AutoOpen>]
                module EmptyDirVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EmptyDirVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EmptyDirVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: EmptyDirVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EmptyDirVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("medium")>]
                        member _.Medium((_cargs_, _args_: EmptyDirVolumeSourceArgs), medium) =
                            _args_.Medium <- input medium
                            _cargs_, _args_

                        member _.Medium((_cargs_, _args_: EmptyDirVolumeSourceArgs), medium) =
                            _args_.Medium <- io medium
                            _cargs_, _args_

                        [<CustomOperation("sizeLimit")>]
                        member _.SizeLimit((_cargs_, _args_: EmptyDirVolumeSourceArgs), sizeLimit) =
                            _args_.SizeLimit <- input sizeLimit
                            _cargs_, _args_

                        member _.SizeLimit((_cargs_, _args_: EmptyDirVolumeSourceArgs), sizeLimit) =
                            _args_.SizeLimit <- io sizeLimit
                            _cargs_, _args_

                    let emptyDirVolumeSource = EmptyDirVolumeSourceBuilder()

                [<AutoOpen>]
                module EndpointAddress =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EndpointAddressBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointAddressArgs()
                        member _.Run(_cargs_, _args_: EndpointAddressArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointAddressArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hostname")>]
                        member _.Hostname((_cargs_, _args_: EndpointAddressArgs), hostname) =
                            _args_.Hostname <- input hostname
                            _cargs_, _args_

                        member _.Hostname((_cargs_, _args_: EndpointAddressArgs), hostname) =
                            _args_.Hostname <- io hostname
                            _cargs_, _args_

                        [<CustomOperation("ip")>]
                        member _.Ip((_cargs_, _args_: EndpointAddressArgs), ip) =
                            _args_.Ip <- input ip
                            _cargs_, _args_

                        member _.Ip((_cargs_, _args_: EndpointAddressArgs), ip) =
                            _args_.Ip <- io ip
                            _cargs_, _args_

                        [<CustomOperation("nodeName")>]
                        member _.NodeName((_cargs_, _args_: EndpointAddressArgs), nodeName) =
                            _args_.NodeName <- input nodeName
                            _cargs_, _args_

                        member _.NodeName((_cargs_, _args_: EndpointAddressArgs), nodeName) =
                            _args_.NodeName <- io nodeName
                            _cargs_, _args_

                        [<CustomOperation("targetRef")>]
                        member _.TargetRef((_cargs_, _args_: EndpointAddressArgs), targetRef) =
                            _args_.TargetRef <- input targetRef
                            _cargs_, _args_

                    let endpointAddress = EndpointAddressBuilder()

                [<AutoOpen>]
                module EndpointPort =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EndpointPortBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointPortArgs()
                        member _.Run(_cargs_, _args_: EndpointPortArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointPortArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("appProtocol")>]
                        member _.AppProtocol((_cargs_, _args_: EndpointPortArgs), appProtocol) =
                            _args_.AppProtocol <- input appProtocol
                            _cargs_, _args_

                        member _.AppProtocol((_cargs_, _args_: EndpointPortArgs), appProtocol) =
                            _args_.AppProtocol <- io appProtocol
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: EndpointPortArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: EndpointPortArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: EndpointPortArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: EndpointPortArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                        [<CustomOperation("protocol")>]
                        member _.Protocol((_cargs_, _args_: EndpointPortArgs), protocol) =
                            _args_.Protocol <- input protocol
                            _cargs_, _args_

                        member _.Protocol((_cargs_, _args_: EndpointPortArgs), protocol) =
                            _args_.Protocol <- io protocol
                            _cargs_, _args_

                    let endpointPort = EndpointPortBuilder()

                [<AutoOpen>]
                module EndpointSubset =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EndpointSubsetBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointSubsetArgs()
                        member _.Run(_cargs_, _args_: EndpointSubsetArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointSubsetArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("addresses")>]
                        member _.Addresses((_cargs_, _args_: EndpointSubsetArgs), addresses) =
                            _args_.Addresses <- inputList addresses
                            _cargs_, _args_

                        [<CustomOperation("notReadyAddresses")>]
                        member _.NotReadyAddresses((_cargs_, _args_: EndpointSubsetArgs), notReadyAddresses) =
                            _args_.NotReadyAddresses <- inputList notReadyAddresses
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: EndpointSubsetArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                    let endpointSubset = EndpointSubsetBuilder()

                [<AutoOpen>]
                module EnvFromSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EnvFromSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EnvFromSourceArgs()
                        member _.Run(_cargs_, _args_: EnvFromSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EnvFromSourceArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("configMapRef")>]
                        member _.ConfigMapRef((_cargs_, _args_: EnvFromSourceArgs), configMapRef) =
                            _args_.ConfigMapRef <- input configMapRef
                            _cargs_, _args_

                        [<CustomOperation("prefix")>]
                        member _.Prefix((_cargs_, _args_: EnvFromSourceArgs), prefix) =
                            _args_.Prefix <- input prefix
                            _cargs_, _args_

                        member _.Prefix((_cargs_, _args_: EnvFromSourceArgs), prefix) =
                            _args_.Prefix <- io prefix
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: EnvFromSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                    let envFromSource = EnvFromSourceBuilder()

                [<AutoOpen>]
                module EnvVar =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EnvVarBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EnvVarArgs()
                        member _.Run(_cargs_, _args_: EnvVarArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EnvVarArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: EnvVarArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: EnvVarArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: EnvVarArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: EnvVarArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                        [<CustomOperation("valueFrom")>]
                        member _.ValueFrom((_cargs_, _args_: EnvVarArgs), valueFrom) =
                            _args_.ValueFrom <- input valueFrom
                            _cargs_, _args_

                    let envVar = EnvVarBuilder()

                [<AutoOpen>]
                module EnvVarSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EnvVarSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EnvVarSourceArgs()
                        member _.Run(_cargs_, _args_: EnvVarSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EnvVarSourceArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("configMapKeyRef")>]
                        member _.ConfigMapKeyRef((_cargs_, _args_: EnvVarSourceArgs), configMapKeyRef) =
                            _args_.ConfigMapKeyRef <- input configMapKeyRef
                            _cargs_, _args_

                        [<CustomOperation("fieldRef")>]
                        member _.FieldRef((_cargs_, _args_: EnvVarSourceArgs), fieldRef) =
                            _args_.FieldRef <- input fieldRef
                            _cargs_, _args_

                        [<CustomOperation("resourceFieldRef")>]
                        member _.ResourceFieldRef((_cargs_, _args_: EnvVarSourceArgs), resourceFieldRef) =
                            _args_.ResourceFieldRef <- input resourceFieldRef
                            _cargs_, _args_

                        [<CustomOperation("secretKeyRef")>]
                        member _.SecretKeyRef((_cargs_, _args_: EnvVarSourceArgs), secretKeyRef) =
                            _args_.SecretKeyRef <- input secretKeyRef
                            _cargs_, _args_

                    let envVarSource = EnvVarSourceBuilder()

                [<AutoOpen>]
                module EphemeralContainer =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EphemeralContainerBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EphemeralContainerArgs()
                        member _.Run(_cargs_, _args_: EphemeralContainerArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EphemeralContainerArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("args")>]
                        member _.Args((_cargs_, _args_: EphemeralContainerArgs), args) =
                            _args_.Args <- inputList args
                            _cargs_, _args_

                        [<CustomOperation("command")>]
                        member _.Command((_cargs_, _args_: EphemeralContainerArgs), command) =
                            _args_.Command <- inputList command
                            _cargs_, _args_

                        [<CustomOperation("env")>]
                        member _.Env((_cargs_, _args_: EphemeralContainerArgs), env) =
                            _args_.Env <- inputList env
                            _cargs_, _args_

                        [<CustomOperation("envFrom")>]
                        member _.EnvFrom((_cargs_, _args_: EphemeralContainerArgs), envFrom) =
                            _args_.EnvFrom <- inputList envFrom
                            _cargs_, _args_

                        [<CustomOperation("image")>]
                        member _.Image((_cargs_, _args_: EphemeralContainerArgs), image) =
                            _args_.Image <- input image
                            _cargs_, _args_

                        member _.Image((_cargs_, _args_: EphemeralContainerArgs), image) =
                            _args_.Image <- io image
                            _cargs_, _args_

                        [<CustomOperation("imagePullPolicy")>]
                        member _.ImagePullPolicy((_cargs_, _args_: EphemeralContainerArgs), imagePullPolicy) =
                            _args_.ImagePullPolicy <- input imagePullPolicy
                            _cargs_, _args_

                        member _.ImagePullPolicy((_cargs_, _args_: EphemeralContainerArgs), imagePullPolicy) =
                            _args_.ImagePullPolicy <- io imagePullPolicy
                            _cargs_, _args_

                        [<CustomOperation("lifecycle")>]
                        member _.Lifecycle((_cargs_, _args_: EphemeralContainerArgs), lifecycle) =
                            _args_.Lifecycle <- input lifecycle
                            _cargs_, _args_

                        [<CustomOperation("livenessProbe")>]
                        member _.LivenessProbe((_cargs_, _args_: EphemeralContainerArgs), livenessProbe) =
                            _args_.LivenessProbe <- input livenessProbe
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: EphemeralContainerArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: EphemeralContainerArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: EphemeralContainerArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                        [<CustomOperation("readinessProbe")>]
                        member _.ReadinessProbe((_cargs_, _args_: EphemeralContainerArgs), readinessProbe) =
                            _args_.ReadinessProbe <- input readinessProbe
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: EphemeralContainerArgs), resources) =
                            _args_.Resources <- input resources
                            _cargs_, _args_

                        [<CustomOperation("securityContext")>]
                        member _.SecurityContext((_cargs_, _args_: EphemeralContainerArgs), securityContext) =
                            _args_.SecurityContext <- input securityContext
                            _cargs_, _args_

                        [<CustomOperation("startupProbe")>]
                        member _.StartupProbe((_cargs_, _args_: EphemeralContainerArgs), startupProbe) =
                            _args_.StartupProbe <- input startupProbe
                            _cargs_, _args_

                        [<CustomOperation("stdin")>]
                        member _.Stdin((_cargs_, _args_: EphemeralContainerArgs), stdin) =
                            _args_.Stdin <- input stdin
                            _cargs_, _args_

                        member _.Stdin((_cargs_, _args_: EphemeralContainerArgs), stdin) =
                            _args_.Stdin <- io stdin
                            _cargs_, _args_

                        [<CustomOperation("stdinOnce")>]
                        member _.StdinOnce((_cargs_, _args_: EphemeralContainerArgs), stdinOnce) =
                            _args_.StdinOnce <- input stdinOnce
                            _cargs_, _args_

                        member _.StdinOnce((_cargs_, _args_: EphemeralContainerArgs), stdinOnce) =
                            _args_.StdinOnce <- io stdinOnce
                            _cargs_, _args_

                        [<CustomOperation("targetContainerName")>]
                        member _.TargetContainerName((_cargs_, _args_: EphemeralContainerArgs), targetContainerName) =
                            _args_.TargetContainerName <- input targetContainerName
                            _cargs_, _args_

                        member _.TargetContainerName((_cargs_, _args_: EphemeralContainerArgs), targetContainerName) =
                            _args_.TargetContainerName <- io targetContainerName
                            _cargs_, _args_

                        [<CustomOperation("terminationMessagePath")>]
                        member _.TerminationMessagePath(
                            (_cargs_, _args_: EphemeralContainerArgs),
                            terminationMessagePath)
                            =
                            _args_.TerminationMessagePath <- input terminationMessagePath
                            _cargs_, _args_

                        member _.TerminationMessagePath(
                            (_cargs_, _args_: EphemeralContainerArgs),
                            terminationMessagePath)
                            =
                            _args_.TerminationMessagePath <- io terminationMessagePath
                            _cargs_, _args_

                        [<CustomOperation("terminationMessagePolicy")>]
                        member _.TerminationMessagePolicy(
                            (_cargs_, _args_: EphemeralContainerArgs),
                            terminationMessagePolicy)
                            =
                            _args_.TerminationMessagePolicy <- input terminationMessagePolicy
                            _cargs_, _args_

                        member _.TerminationMessagePolicy(
                            (_cargs_, _args_: EphemeralContainerArgs),
                            terminationMessagePolicy)
                            =
                            _args_.TerminationMessagePolicy <- io terminationMessagePolicy
                            _cargs_, _args_

                        [<CustomOperation("tty")>]
                        member _.Tty((_cargs_, _args_: EphemeralContainerArgs), tty) =
                            _args_.Tty <- input tty
                            _cargs_, _args_

                        member _.Tty((_cargs_, _args_: EphemeralContainerArgs), tty) =
                            _args_.Tty <- io tty
                            _cargs_, _args_

                        [<CustomOperation("volumeDevices")>]
                        member _.VolumeDevices((_cargs_, _args_: EphemeralContainerArgs), volumeDevices) =
                            _args_.VolumeDevices <- inputList volumeDevices
                            _cargs_, _args_

                        [<CustomOperation("volumeMounts")>]
                        member _.VolumeMounts((_cargs_, _args_: EphemeralContainerArgs), volumeMounts) =
                            _args_.VolumeMounts <- inputList volumeMounts
                            _cargs_, _args_

                        [<CustomOperation("workingDir")>]
                        member _.WorkingDir((_cargs_, _args_: EphemeralContainerArgs), workingDir) =
                            _args_.WorkingDir <- input workingDir
                            _cargs_, _args_

                        member _.WorkingDir((_cargs_, _args_: EphemeralContainerArgs), workingDir) =
                            _args_.WorkingDir <- io workingDir
                            _cargs_, _args_

                    let ephemeralContainer = EphemeralContainerBuilder()

                [<AutoOpen>]
                module EventSeries =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EventSeriesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EventSeriesArgs()
                        member _.Run(_cargs_, _args_: EventSeriesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EventSeriesArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("count")>]
                        member _.Count((_cargs_, _args_: EventSeriesArgs), count) =
                            _args_.Count <- input count
                            _cargs_, _args_

                        member _.Count((_cargs_, _args_: EventSeriesArgs), count) =
                            _args_.Count <- io count
                            _cargs_, _args_

                        [<CustomOperation("lastObservedTime")>]
                        member _.LastObservedTime((_cargs_, _args_: EventSeriesArgs), lastObservedTime) =
                            _args_.LastObservedTime <- input lastObservedTime
                            _cargs_, _args_

                        member _.LastObservedTime((_cargs_, _args_: EventSeriesArgs), lastObservedTime) =
                            _args_.LastObservedTime <- io lastObservedTime
                            _cargs_, _args_

                        [<CustomOperation("state")>]
                        member _.State((_cargs_, _args_: EventSeriesArgs), state) =
                            _args_.State <- input state
                            _cargs_, _args_

                        member _.State((_cargs_, _args_: EventSeriesArgs), state) =
                            _args_.State <- io state
                            _cargs_, _args_

                    let eventSeries = EventSeriesBuilder()

                [<AutoOpen>]
                module EventSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type EventSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EventSourceArgs()
                        member _.Run(_cargs_, _args_: EventSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EventSourceArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("component")>]
                        member _.Component((_cargs_, _args_: EventSourceArgs), ``component``) =
                            _args_.Component <- input ``component``
                            _cargs_, _args_

                        member _.Component((_cargs_, _args_: EventSourceArgs), ``component``) =
                            _args_.Component <- io ``component``
                            _cargs_, _args_

                        [<CustomOperation("host")>]
                        member _.Host((_cargs_, _args_: EventSourceArgs), host) =
                            _args_.Host <- input host
                            _cargs_, _args_

                        member _.Host((_cargs_, _args_: EventSourceArgs), host) =
                            _args_.Host <- io host
                            _cargs_, _args_

                    let eventSource = EventSourceBuilder()

                [<AutoOpen>]
                module ExecAction =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ExecActionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ExecActionArgs()
                        member _.Run(_cargs_, _args_: ExecActionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ExecActionArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("command")>]
                        member _.Command((_cargs_, _args_: ExecActionArgs), command) =
                            _args_.Command <- inputList command
                            _cargs_, _args_

                    let execAction = ExecActionBuilder()

                [<AutoOpen>]
                module FCVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type FCVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FCVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: FCVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FCVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: FCVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: FCVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("lun")>]
                        member _.Lun((_cargs_, _args_: FCVolumeSourceArgs), lun) =
                            _args_.Lun <- input lun
                            _cargs_, _args_

                        member _.Lun((_cargs_, _args_: FCVolumeSourceArgs), lun) =
                            _args_.Lun <- io lun
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: FCVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: FCVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("targetWWNs")>]
                        member _.TargetWWNs((_cargs_, _args_: FCVolumeSourceArgs), targetWWNs) =
                            _args_.TargetWWNs <- inputList targetWWNs
                            _cargs_, _args_

                        [<CustomOperation("wwids")>]
                        member _.Wwids((_cargs_, _args_: FCVolumeSourceArgs), wwids) =
                            _args_.Wwids <- inputList wwids
                            _cargs_, _args_

                    let fCVolumeSource = FCVolumeSourceBuilder()

                [<AutoOpen>]
                module FlexPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type FlexPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlexPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: FlexPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlexPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: FlexPersistentVolumeSourceArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: FlexPersistentVolumeSourceArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: FlexPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: FlexPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("options")>]
                        member _.Options((_cargs_, _args_: FlexPersistentVolumeSourceArgs), options) =
                            _args_.Options <- inputMap options
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: FlexPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: FlexPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: FlexPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                    let flexPersistentVolumeSource = FlexPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module FlexVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type FlexVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlexVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: FlexVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlexVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: FlexVolumeSourceArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: FlexVolumeSourceArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: FlexVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: FlexVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("options")>]
                        member _.Options((_cargs_, _args_: FlexVolumeSourceArgs), options) =
                            _args_.Options <- inputMap options
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: FlexVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: FlexVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: FlexVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                    let flexVolumeSource = FlexVolumeSourceBuilder()

                [<AutoOpen>]
                module FlockerVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type FlockerVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlockerVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: FlockerVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlockerVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("datasetName")>]
                        member _.DatasetName((_cargs_, _args_: FlockerVolumeSourceArgs), datasetName) =
                            _args_.DatasetName <- input datasetName
                            _cargs_, _args_

                        member _.DatasetName((_cargs_, _args_: FlockerVolumeSourceArgs), datasetName) =
                            _args_.DatasetName <- io datasetName
                            _cargs_, _args_

                        [<CustomOperation("datasetUUID")>]
                        member _.DatasetUUID((_cargs_, _args_: FlockerVolumeSourceArgs), datasetUUID) =
                            _args_.DatasetUUID <- input datasetUUID
                            _cargs_, _args_

                        member _.DatasetUUID((_cargs_, _args_: FlockerVolumeSourceArgs), datasetUUID) =
                            _args_.DatasetUUID <- io datasetUUID
                            _cargs_, _args_

                    let flockerVolumeSource = FlockerVolumeSourceBuilder()

                [<AutoOpen>]
                module GCEPersistentDiskVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type GCEPersistentDiskVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, GCEPersistentDiskVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("partition")>]
                        member _.Partition((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), partition) =
                            _args_.Partition <- input partition
                            _cargs_, _args_

                        member _.Partition((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), partition) =
                            _args_.Partition <- io partition
                            _cargs_, _args_

                        [<CustomOperation("pdName")>]
                        member _.PdName((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), pdName) =
                            _args_.PdName <- input pdName
                            _cargs_, _args_

                        member _.PdName((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), pdName) =
                            _args_.PdName <- io pdName
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: GCEPersistentDiskVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let gCEPersistentDiskVolumeSource = GCEPersistentDiskVolumeSourceBuilder()

                [<AutoOpen>]
                module GitRepoVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type GitRepoVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, GitRepoVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: GitRepoVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: GitRepoVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("directory")>]
                        member _.Directory((_cargs_, _args_: GitRepoVolumeSourceArgs), directory) =
                            _args_.Directory <- input directory
                            _cargs_, _args_

                        member _.Directory((_cargs_, _args_: GitRepoVolumeSourceArgs), directory) =
                            _args_.Directory <- io directory
                            _cargs_, _args_

                        [<CustomOperation("repository")>]
                        member _.Repository((_cargs_, _args_: GitRepoVolumeSourceArgs), repository) =
                            _args_.Repository <- input repository
                            _cargs_, _args_

                        member _.Repository((_cargs_, _args_: GitRepoVolumeSourceArgs), repository) =
                            _args_.Repository <- io repository
                            _cargs_, _args_

                        [<CustomOperation("revision")>]
                        member _.Revision((_cargs_, _args_: GitRepoVolumeSourceArgs), revision) =
                            _args_.Revision <- input revision
                            _cargs_, _args_

                        member _.Revision((_cargs_, _args_: GitRepoVolumeSourceArgs), revision) =
                            _args_.Revision <- io revision
                            _cargs_, _args_

                    let gitRepoVolumeSource = GitRepoVolumeSourceBuilder()

                [<AutoOpen>]
                module GlusterfsPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type GlusterfsPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, GlusterfsPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("endpoints")>]
                        member _.Endpoints((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), endpoints) =
                            _args_.Endpoints <- input endpoints
                            _cargs_, _args_

                        member _.Endpoints((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), endpoints) =
                            _args_.Endpoints <- io endpoints
                            _cargs_, _args_

                        [<CustomOperation("endpointsNamespace")>]
                        member _.EndpointsNamespace(
                            (_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs),
                            endpointsNamespace)
                            =
                            _args_.EndpointsNamespace <- input endpointsNamespace
                            _cargs_, _args_

                        member _.EndpointsNamespace(
                            (_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs),
                            endpointsNamespace)
                            =
                            _args_.EndpointsNamespace <- io endpointsNamespace
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: GlusterfsPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let glusterfsPersistentVolumeSource = GlusterfsPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module GlusterfsVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type GlusterfsVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, GlusterfsVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: GlusterfsVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: GlusterfsVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("endpoints")>]
                        member _.Endpoints((_cargs_, _args_: GlusterfsVolumeSourceArgs), endpoints) =
                            _args_.Endpoints <- input endpoints
                            _cargs_, _args_

                        member _.Endpoints((_cargs_, _args_: GlusterfsVolumeSourceArgs), endpoints) =
                            _args_.Endpoints <- io endpoints
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: GlusterfsVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: GlusterfsVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: GlusterfsVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: GlusterfsVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let glusterfsVolumeSource = GlusterfsVolumeSourceBuilder()

                [<AutoOpen>]
                module HTTPHeader =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type HTTPHeaderBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HTTPHeaderArgs()
                        member _.Run(_cargs_, _args_: HTTPHeaderArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HTTPHeaderArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: HTTPHeaderArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: HTTPHeaderArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: HTTPHeaderArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: HTTPHeaderArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let hTTPHeader = HTTPHeaderBuilder()

                [<AutoOpen>]
                module Handler =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type HandlerBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HandlerArgs()
                        member _.Run(_cargs_, _args_: HandlerArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HandlerArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("exec")>]
                        member _.Exec((_cargs_, _args_: HandlerArgs), exec) =
                            _args_.Exec <- input exec
                            _cargs_, _args_

                        [<CustomOperation("httpGet")>]
                        member _.HttpGet((_cargs_, _args_: HandlerArgs), httpGet) =
                            _args_.HttpGet <- input httpGet
                            _cargs_, _args_

                        [<CustomOperation("tcpSocket")>]
                        member _.TcpSocket((_cargs_, _args_: HandlerArgs), tcpSocket) =
                            _args_.TcpSocket <- input tcpSocket
                            _cargs_, _args_

                    let handler = HandlerBuilder()

                [<AutoOpen>]
                module HostAlias =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type HostAliasBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HostAliasArgs()
                        member _.Run(_cargs_, _args_: HostAliasArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HostAliasArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hostnames")>]
                        member _.Hostnames((_cargs_, _args_: HostAliasArgs), hostnames) =
                            _args_.Hostnames <- inputList hostnames
                            _cargs_, _args_

                        [<CustomOperation("ip")>]
                        member _.Ip((_cargs_, _args_: HostAliasArgs), ip) =
                            _args_.Ip <- input ip
                            _cargs_, _args_

                        member _.Ip((_cargs_, _args_: HostAliasArgs), ip) =
                            _args_.Ip <- io ip
                            _cargs_, _args_

                    let hostAlias = HostAliasBuilder()

                [<AutoOpen>]
                module HostPathVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type HostPathVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HostPathVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: HostPathVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HostPathVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: HostPathVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: HostPathVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: HostPathVolumeSourceArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: HostPathVolumeSourceArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let hostPathVolumeSource = HostPathVolumeSourceBuilder()

                [<AutoOpen>]
                module ISCSIPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ISCSIPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ISCSIPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ISCSIPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("chapAuthDiscovery")>]
                        member _.ChapAuthDiscovery((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), chapAuthDiscovery) =
                            _args_.ChapAuthDiscovery <- input chapAuthDiscovery
                            _cargs_, _args_

                        member _.ChapAuthDiscovery((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), chapAuthDiscovery) =
                            _args_.ChapAuthDiscovery <- io chapAuthDiscovery
                            _cargs_, _args_

                        [<CustomOperation("chapAuthSession")>]
                        member _.ChapAuthSession((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), chapAuthSession) =
                            _args_.ChapAuthSession <- input chapAuthSession
                            _cargs_, _args_

                        member _.ChapAuthSession((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), chapAuthSession) =
                            _args_.ChapAuthSession <- io chapAuthSession
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("initiatorName")>]
                        member _.InitiatorName((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), initiatorName) =
                            _args_.InitiatorName <- input initiatorName
                            _cargs_, _args_

                        member _.InitiatorName((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), initiatorName) =
                            _args_.InitiatorName <- io initiatorName
                            _cargs_, _args_

                        [<CustomOperation("iqn")>]
                        member _.Iqn((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), iqn) =
                            _args_.Iqn <- input iqn
                            _cargs_, _args_

                        member _.Iqn((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), iqn) =
                            _args_.Iqn <- io iqn
                            _cargs_, _args_

                        [<CustomOperation("iscsiInterface")>]
                        member _.IscsiInterface((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), iscsiInterface) =
                            _args_.IscsiInterface <- input iscsiInterface
                            _cargs_, _args_

                        member _.IscsiInterface((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), iscsiInterface) =
                            _args_.IscsiInterface <- io iscsiInterface
                            _cargs_, _args_

                        [<CustomOperation("lun")>]
                        member _.Lun((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), lun) =
                            _args_.Lun <- input lun
                            _cargs_, _args_

                        member _.Lun((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), lun) =
                            _args_.Lun <- io lun
                            _cargs_, _args_

                        [<CustomOperation("portals")>]
                        member _.Portals((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), portals) =
                            _args_.Portals <- inputList portals
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("targetPortal")>]
                        member _.TargetPortal((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), targetPortal) =
                            _args_.TargetPortal <- input targetPortal
                            _cargs_, _args_

                        member _.TargetPortal((_cargs_, _args_: ISCSIPersistentVolumeSourceArgs), targetPortal) =
                            _args_.TargetPortal <- io targetPortal
                            _cargs_, _args_

                    let iSCSIPersistentVolumeSource = ISCSIPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module ISCSIVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ISCSIVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ISCSIVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ISCSIVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ISCSIVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("chapAuthDiscovery")>]
                        member _.ChapAuthDiscovery((_cargs_, _args_: ISCSIVolumeSourceArgs), chapAuthDiscovery) =
                            _args_.ChapAuthDiscovery <- input chapAuthDiscovery
                            _cargs_, _args_

                        member _.ChapAuthDiscovery((_cargs_, _args_: ISCSIVolumeSourceArgs), chapAuthDiscovery) =
                            _args_.ChapAuthDiscovery <- io chapAuthDiscovery
                            _cargs_, _args_

                        [<CustomOperation("chapAuthSession")>]
                        member _.ChapAuthSession((_cargs_, _args_: ISCSIVolumeSourceArgs), chapAuthSession) =
                            _args_.ChapAuthSession <- input chapAuthSession
                            _cargs_, _args_

                        member _.ChapAuthSession((_cargs_, _args_: ISCSIVolumeSourceArgs), chapAuthSession) =
                            _args_.ChapAuthSession <- io chapAuthSession
                            _cargs_, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: ISCSIVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: ISCSIVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("initiatorName")>]
                        member _.InitiatorName((_cargs_, _args_: ISCSIVolumeSourceArgs), initiatorName) =
                            _args_.InitiatorName <- input initiatorName
                            _cargs_, _args_

                        member _.InitiatorName((_cargs_, _args_: ISCSIVolumeSourceArgs), initiatorName) =
                            _args_.InitiatorName <- io initiatorName
                            _cargs_, _args_

                        [<CustomOperation("iqn")>]
                        member _.Iqn((_cargs_, _args_: ISCSIVolumeSourceArgs), iqn) =
                            _args_.Iqn <- input iqn
                            _cargs_, _args_

                        member _.Iqn((_cargs_, _args_: ISCSIVolumeSourceArgs), iqn) =
                            _args_.Iqn <- io iqn
                            _cargs_, _args_

                        [<CustomOperation("iscsiInterface")>]
                        member _.IscsiInterface((_cargs_, _args_: ISCSIVolumeSourceArgs), iscsiInterface) =
                            _args_.IscsiInterface <- input iscsiInterface
                            _cargs_, _args_

                        member _.IscsiInterface((_cargs_, _args_: ISCSIVolumeSourceArgs), iscsiInterface) =
                            _args_.IscsiInterface <- io iscsiInterface
                            _cargs_, _args_

                        [<CustomOperation("lun")>]
                        member _.Lun((_cargs_, _args_: ISCSIVolumeSourceArgs), lun) =
                            _args_.Lun <- input lun
                            _cargs_, _args_

                        member _.Lun((_cargs_, _args_: ISCSIVolumeSourceArgs), lun) =
                            _args_.Lun <- io lun
                            _cargs_, _args_

                        [<CustomOperation("portals")>]
                        member _.Portals((_cargs_, _args_: ISCSIVolumeSourceArgs), portals) =
                            _args_.Portals <- inputList portals
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: ISCSIVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: ISCSIVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: ISCSIVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("targetPortal")>]
                        member _.TargetPortal((_cargs_, _args_: ISCSIVolumeSourceArgs), targetPortal) =
                            _args_.TargetPortal <- input targetPortal
                            _cargs_, _args_

                        member _.TargetPortal((_cargs_, _args_: ISCSIVolumeSourceArgs), targetPortal) =
                            _args_.TargetPortal <- io targetPortal
                            _cargs_, _args_

                    let iSCSIVolumeSource = ISCSIVolumeSourceBuilder()

                [<AutoOpen>]
                module KeyToPath =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type KeyToPathBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, KeyToPathArgs()
                        member _.Run(_cargs_, _args_: KeyToPathArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: KeyToPathArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: KeyToPathArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: KeyToPathArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("mode")>]
                        member _.Mode((_cargs_, _args_: KeyToPathArgs), mode) =
                            _args_.Mode <- input mode
                            _cargs_, _args_

                        member _.Mode((_cargs_, _args_: KeyToPathArgs), mode) =
                            _args_.Mode <- io mode
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: KeyToPathArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: KeyToPathArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                    let keyToPath = KeyToPathBuilder()

                [<AutoOpen>]
                module Lifecycle =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LifecycleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LifecycleArgs()
                        member _.Run(_cargs_, _args_: LifecycleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LifecycleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("postStart")>]
                        member _.PostStart((_cargs_, _args_: LifecycleArgs), postStart) =
                            _args_.PostStart <- input postStart
                            _cargs_, _args_

                        [<CustomOperation("preStop")>]
                        member _.PreStop((_cargs_, _args_: LifecycleArgs), preStop) =
                            _args_.PreStop <- input preStop
                            _cargs_, _args_

                    let lifecycle = LifecycleBuilder()

                [<AutoOpen>]
                module LimitRangeItem =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LimitRangeItemBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LimitRangeItemArgs()
                        member _.Run(_cargs_, _args_: LimitRangeItemArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LimitRangeItemArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("default")>]
                        member _.Default((_cargs_, _args_: LimitRangeItemArgs), ``default``) =
                            _args_.Default <- inputMap ``default``
                            _cargs_, _args_

                        [<CustomOperation("defaultRequest")>]
                        member _.DefaultRequest((_cargs_, _args_: LimitRangeItemArgs), defaultRequest) =
                            _args_.DefaultRequest <- inputMap defaultRequest
                            _cargs_, _args_

                        [<CustomOperation("max")>]
                        member _.Max((_cargs_, _args_: LimitRangeItemArgs), max) =
                            _args_.Max <- inputMap max
                            _cargs_, _args_

                        [<CustomOperation("maxLimitRequestRatio")>]
                        member _.MaxLimitRequestRatio((_cargs_, _args_: LimitRangeItemArgs), maxLimitRequestRatio) =
                            _args_.MaxLimitRequestRatio <- inputMap maxLimitRequestRatio
                            _cargs_, _args_

                        [<CustomOperation("min")>]
                        member _.Min((_cargs_, _args_: LimitRangeItemArgs), min) =
                            _args_.Min <- inputMap min
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: LimitRangeItemArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: LimitRangeItemArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let limitRangeItem = LimitRangeItemBuilder()

                [<AutoOpen>]
                module LimitRangeSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LimitRangeSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LimitRangeSpecArgs()
                        member _.Run(_cargs_, _args_: LimitRangeSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LimitRangeSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("limits")>]
                        member _.Limits((_cargs_, _args_: LimitRangeSpecArgs), limits) =
                            _args_.Limits <- inputList limits
                            _cargs_, _args_

                    let limitRangeSpec = LimitRangeSpecBuilder()

                [<AutoOpen>]
                module LoadBalancerIngress =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LoadBalancerIngressBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LoadBalancerIngressArgs()
                        member _.Run(_cargs_, _args_: LoadBalancerIngressArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LoadBalancerIngressArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hostname")>]
                        member _.Hostname((_cargs_, _args_: LoadBalancerIngressArgs), hostname) =
                            _args_.Hostname <- input hostname
                            _cargs_, _args_

                        member _.Hostname((_cargs_, _args_: LoadBalancerIngressArgs), hostname) =
                            _args_.Hostname <- io hostname
                            _cargs_, _args_

                        [<CustomOperation("ip")>]
                        member _.Ip((_cargs_, _args_: LoadBalancerIngressArgs), ip) =
                            _args_.Ip <- input ip
                            _cargs_, _args_

                        member _.Ip((_cargs_, _args_: LoadBalancerIngressArgs), ip) =
                            _args_.Ip <- io ip
                            _cargs_, _args_

                    let loadBalancerIngress = LoadBalancerIngressBuilder()

                [<AutoOpen>]
                module LoadBalancerStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LoadBalancerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LoadBalancerStatusArgs()
                        member _.Run(_cargs_, _args_: LoadBalancerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LoadBalancerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ingress")>]
                        member _.Ingress((_cargs_, _args_: LoadBalancerStatusArgs), ingress) =
                            _args_.Ingress <- inputList ingress
                            _cargs_, _args_

                    let loadBalancerStatus = LoadBalancerStatusBuilder()

                [<AutoOpen>]
                module LocalObjectReference =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LocalObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LocalObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: LocalObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LocalObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: LocalObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: LocalObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let localObjectReference = LocalObjectReferenceBuilder()

                [<AutoOpen>]
                module LocalVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type LocalVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LocalVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: LocalVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LocalVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: LocalVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: LocalVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: LocalVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: LocalVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                    let localVolumeSource = LocalVolumeSourceBuilder()

                [<AutoOpen>]
                module NFSVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NFSVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NFSVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: NFSVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NFSVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: NFSVolumeSourceArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: NFSVolumeSourceArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: NFSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: NFSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("server")>]
                        member _.Server((_cargs_, _args_: NFSVolumeSourceArgs), server) =
                            _args_.Server <- input server
                            _cargs_, _args_

                        member _.Server((_cargs_, _args_: NFSVolumeSourceArgs), server) =
                            _args_.Server <- io server
                            _cargs_, _args_

                    let nFSVolumeSource = NFSVolumeSourceBuilder()

                [<AutoOpen>]
                module NamespaceCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NamespaceConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NamespaceConditionArgs()
                        member _.Run(_cargs_, _args_: NamespaceConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NamespaceConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: NamespaceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: NamespaceConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: NamespaceConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: NamespaceConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: NamespaceConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: NamespaceConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: NamespaceConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: NamespaceConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: NamespaceConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: NamespaceConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let namespaceCondition = NamespaceConditionBuilder()

                [<AutoOpen>]
                module NamespaceSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NamespaceSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NamespaceSpecArgs()
                        member _.Run(_cargs_, _args_: NamespaceSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NamespaceSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("finalizers")>]
                        member _.Finalizers((_cargs_, _args_: NamespaceSpecArgs), finalizers) =
                            _args_.Finalizers <- inputList finalizers
                            _cargs_, _args_

                    let namespaceSpec = NamespaceSpecBuilder()

                [<AutoOpen>]
                module NamespaceStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NamespaceStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NamespaceStatusArgs()
                        member _.Run(_cargs_, _args_: NamespaceStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NamespaceStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: NamespaceStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("phase")>]
                        member _.Phase((_cargs_, _args_: NamespaceStatusArgs), phase) =
                            _args_.Phase <- input phase
                            _cargs_, _args_

                        member _.Phase((_cargs_, _args_: NamespaceStatusArgs), phase) =
                            _args_.Phase <- io phase
                            _cargs_, _args_

                    let namespaceStatus = NamespaceStatusBuilder()

                [<AutoOpen>]
                module NodeAddress =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeAddressBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeAddressArgs()
                        member _.Run(_cargs_, _args_: NodeAddressArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeAddressArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("address")>]
                        member _.Address((_cargs_, _args_: NodeAddressArgs), address) =
                            _args_.Address <- input address
                            _cargs_, _args_

                        member _.Address((_cargs_, _args_: NodeAddressArgs), address) =
                            _args_.Address <- io address
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: NodeAddressArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: NodeAddressArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let nodeAddress = NodeAddressBuilder()

                [<AutoOpen>]
                module NodeAffinity =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeAffinityBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeAffinityArgs()
                        member _.Run(_cargs_, _args_: NodeAffinityArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeAffinityArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("preferredDuringSchedulingIgnoredDuringExecution")>]
                        member _.PreferredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: NodeAffinityArgs),
                            preferredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.PreferredDuringSchedulingIgnoredDuringExecution <- inputList
                                                                                          preferredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                        [<CustomOperation("requiredDuringSchedulingIgnoredDuringExecution")>]
                        member _.RequiredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: NodeAffinityArgs),
                            requiredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.RequiredDuringSchedulingIgnoredDuringExecution <- input
                                                                                         requiredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                    let nodeAffinity = NodeAffinityBuilder()

                [<AutoOpen>]
                module NodeCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeConditionArgs()
                        member _.Run(_cargs_, _args_: NodeConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeConditionArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastHeartbeatTime")>]
                        member _.LastHeartbeatTime((_cargs_, _args_: NodeConditionArgs), lastHeartbeatTime) =
                            _args_.LastHeartbeatTime <- input lastHeartbeatTime
                            _cargs_, _args_

                        member _.LastHeartbeatTime((_cargs_, _args_: NodeConditionArgs), lastHeartbeatTime) =
                            _args_.LastHeartbeatTime <- io lastHeartbeatTime
                            _cargs_, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: NodeConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: NodeConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: NodeConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: NodeConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: NodeConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: NodeConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: NodeConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: NodeConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: NodeConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: NodeConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let nodeCondition = NodeConditionBuilder()

                [<AutoOpen>]
                module NodeConfigSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeConfigSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeConfigSourceArgs()
                        member _.Run(_cargs_, _args_: NodeConfigSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeConfigSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("configMap")>]
                        member _.ConfigMap((_cargs_, _args_: NodeConfigSourceArgs), configMap) =
                            _args_.ConfigMap <- input configMap
                            _cargs_, _args_

                    let nodeConfigSource = NodeConfigSourceBuilder()

                [<AutoOpen>]
                module NodeConfigStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeConfigStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeConfigStatusArgs()
                        member _.Run(_cargs_, _args_: NodeConfigStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeConfigStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("active")>]
                        member _.Active((_cargs_, _args_: NodeConfigStatusArgs), active) =
                            _args_.Active <- input active
                            _cargs_, _args_

                        [<CustomOperation("assigned")>]
                        member _.Assigned((_cargs_, _args_: NodeConfigStatusArgs), assigned) =
                            _args_.Assigned <- input assigned
                            _cargs_, _args_

                        [<CustomOperation("error")>]
                        member _.Error((_cargs_, _args_: NodeConfigStatusArgs), error) =
                            _args_.Error <- input error
                            _cargs_, _args_

                        member _.Error((_cargs_, _args_: NodeConfigStatusArgs), error) =
                            _args_.Error <- io error
                            _cargs_, _args_

                        [<CustomOperation("lastKnownGood")>]
                        member _.LastKnownGood((_cargs_, _args_: NodeConfigStatusArgs), lastKnownGood) =
                            _args_.LastKnownGood <- input lastKnownGood
                            _cargs_, _args_

                    let nodeConfigStatus = NodeConfigStatusBuilder()

                [<AutoOpen>]
                module NodeDaemonEndpoints =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeDaemonEndpointsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeDaemonEndpointsArgs()
                        member _.Run(_cargs_, _args_: NodeDaemonEndpointsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeDaemonEndpointsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("kubeletEndpoint")>]
                        member _.KubeletEndpoint((_cargs_, _args_: NodeDaemonEndpointsArgs), kubeletEndpoint) =
                            _args_.KubeletEndpoint <- input kubeletEndpoint
                            _cargs_, _args_

                    let nodeDaemonEndpoints = NodeDaemonEndpointsBuilder()

                [<AutoOpen>]
                module NodeSelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeSelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeSelectorArgs()
                        member _.Run(_cargs_, _args_: NodeSelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeSelectorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nodeSelectorTerms")>]
                        member _.NodeSelectorTerms((_cargs_, _args_: NodeSelectorArgs), nodeSelectorTerms) =
                            _args_.NodeSelectorTerms <- inputList nodeSelectorTerms
                            _cargs_, _args_

                    let nodeSelector = NodeSelectorBuilder()

                [<AutoOpen>]
                module NodeSelectorRequirement =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeSelectorRequirementBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeSelectorRequirementArgs()
                        member _.Run(_cargs_, _args_: NodeSelectorRequirementArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeSelectorRequirementArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: NodeSelectorRequirementArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: NodeSelectorRequirementArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("operator")>]
                        member _.Operator((_cargs_, _args_: NodeSelectorRequirementArgs), operator) =
                            _args_.Operator <- input operator
                            _cargs_, _args_

                        member _.Operator((_cargs_, _args_: NodeSelectorRequirementArgs), operator) =
                            _args_.Operator <- io operator
                            _cargs_, _args_

                        [<CustomOperation("values")>]
                        member _.Values((_cargs_, _args_: NodeSelectorRequirementArgs), values) =
                            _args_.Values <- inputList values
                            _cargs_, _args_

                    let nodeSelectorRequirement = NodeSelectorRequirementBuilder()

                [<AutoOpen>]
                module NodeSelectorTerm =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeSelectorTermBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeSelectorTermArgs()
                        member _.Run(_cargs_, _args_: NodeSelectorTermArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeSelectorTermArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("matchExpressions")>]
                        member _.MatchExpressions((_cargs_, _args_: NodeSelectorTermArgs), matchExpressions) =
                            _args_.MatchExpressions <- inputList matchExpressions
                            _cargs_, _args_

                        [<CustomOperation("matchFields")>]
                        member _.MatchFields((_cargs_, _args_: NodeSelectorTermArgs), matchFields) =
                            _args_.MatchFields <- inputList matchFields
                            _cargs_, _args_

                    let nodeSelectorTerm = NodeSelectorTermBuilder()

                [<AutoOpen>]
                module NodeSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeSpecArgs()
                        member _.Run(_cargs_, _args_: NodeSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("configSource")>]
                        member _.ConfigSource((_cargs_, _args_: NodeSpecArgs), configSource) =
                            _args_.ConfigSource <- input configSource
                            _cargs_, _args_

                        [<CustomOperation("externalID")>]
                        member _.ExternalID((_cargs_, _args_: NodeSpecArgs), externalID) =
                            _args_.ExternalID <- input externalID
                            _cargs_, _args_

                        member _.ExternalID((_cargs_, _args_: NodeSpecArgs), externalID) =
                            _args_.ExternalID <- io externalID
                            _cargs_, _args_

                        [<CustomOperation("podCIDR")>]
                        member _.PodCIDR((_cargs_, _args_: NodeSpecArgs), podCIDR) =
                            _args_.PodCIDR <- input podCIDR
                            _cargs_, _args_

                        member _.PodCIDR((_cargs_, _args_: NodeSpecArgs), podCIDR) =
                            _args_.PodCIDR <- io podCIDR
                            _cargs_, _args_

                        [<CustomOperation("podCIDRs")>]
                        member _.PodCIDRs((_cargs_, _args_: NodeSpecArgs), podCIDRs) =
                            _args_.PodCIDRs <- inputList podCIDRs
                            _cargs_, _args_

                        [<CustomOperation("providerID")>]
                        member _.ProviderID((_cargs_, _args_: NodeSpecArgs), providerID) =
                            _args_.ProviderID <- input providerID
                            _cargs_, _args_

                        member _.ProviderID((_cargs_, _args_: NodeSpecArgs), providerID) =
                            _args_.ProviderID <- io providerID
                            _cargs_, _args_

                        [<CustomOperation("taints")>]
                        member _.Taints((_cargs_, _args_: NodeSpecArgs), taints) =
                            _args_.Taints <- inputList taints
                            _cargs_, _args_

                        [<CustomOperation("unschedulable")>]
                        member _.Unschedulable((_cargs_, _args_: NodeSpecArgs), unschedulable) =
                            _args_.Unschedulable <- input unschedulable
                            _cargs_, _args_

                        member _.Unschedulable((_cargs_, _args_: NodeSpecArgs), unschedulable) =
                            _args_.Unschedulable <- io unschedulable
                            _cargs_, _args_

                    let nodeSpec = NodeSpecBuilder()

                [<AutoOpen>]
                module NodeStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeStatusArgs()
                        member _.Run(_cargs_, _args_: NodeStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("addresses")>]
                        member _.Addresses((_cargs_, _args_: NodeStatusArgs), addresses) =
                            _args_.Addresses <- inputList addresses
                            _cargs_, _args_

                        [<CustomOperation("allocatable")>]
                        member _.Allocatable((_cargs_, _args_: NodeStatusArgs), allocatable) =
                            _args_.Allocatable <- inputMap allocatable
                            _cargs_, _args_

                        [<CustomOperation("capacity")>]
                        member _.Capacity((_cargs_, _args_: NodeStatusArgs), capacity) =
                            _args_.Capacity <- inputMap capacity
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: NodeStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("config")>]
                        member _.Config((_cargs_, _args_: NodeStatusArgs), config) =
                            _args_.Config <- input config
                            _cargs_, _args_

                        [<CustomOperation("daemonEndpoints")>]
                        member _.DaemonEndpoints((_cargs_, _args_: NodeStatusArgs), daemonEndpoints) =
                            _args_.DaemonEndpoints <- input daemonEndpoints
                            _cargs_, _args_

                        [<CustomOperation("images")>]
                        member _.Images((_cargs_, _args_: NodeStatusArgs), images) =
                            _args_.Images <- inputList images
                            _cargs_, _args_

                        [<CustomOperation("nodeInfo")>]
                        member _.NodeInfo((_cargs_, _args_: NodeStatusArgs), nodeInfo) =
                            _args_.NodeInfo <- input nodeInfo
                            _cargs_, _args_

                        [<CustomOperation("phase")>]
                        member _.Phase((_cargs_, _args_: NodeStatusArgs), phase) =
                            _args_.Phase <- input phase
                            _cargs_, _args_

                        member _.Phase((_cargs_, _args_: NodeStatusArgs), phase) =
                            _args_.Phase <- io phase
                            _cargs_, _args_

                        [<CustomOperation("volumesAttached")>]
                        member _.VolumesAttached((_cargs_, _args_: NodeStatusArgs), volumesAttached) =
                            _args_.VolumesAttached <- inputList volumesAttached
                            _cargs_, _args_

                        [<CustomOperation("volumesInUse")>]
                        member _.VolumesInUse((_cargs_, _args_: NodeStatusArgs), volumesInUse) =
                            _args_.VolumesInUse <- inputList volumesInUse
                            _cargs_, _args_

                    let nodeStatus = NodeStatusBuilder()

                [<AutoOpen>]
                module NodeSystemInfo =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type NodeSystemInfoBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NodeSystemInfoArgs()
                        member _.Run(_cargs_, _args_: NodeSystemInfoArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NodeSystemInfoArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("architecture")>]
                        member _.Architecture((_cargs_, _args_: NodeSystemInfoArgs), architecture) =
                            _args_.Architecture <- input architecture
                            _cargs_, _args_

                        member _.Architecture((_cargs_, _args_: NodeSystemInfoArgs), architecture) =
                            _args_.Architecture <- io architecture
                            _cargs_, _args_

                        [<CustomOperation("bootID")>]
                        member _.BootID((_cargs_, _args_: NodeSystemInfoArgs), bootID) =
                            _args_.BootID <- input bootID
                            _cargs_, _args_

                        member _.BootID((_cargs_, _args_: NodeSystemInfoArgs), bootID) =
                            _args_.BootID <- io bootID
                            _cargs_, _args_

                        [<CustomOperation("containerRuntimeVersion")>]
                        member _.ContainerRuntimeVersion((_cargs_, _args_: NodeSystemInfoArgs), containerRuntimeVersion) =
                            _args_.ContainerRuntimeVersion <- input containerRuntimeVersion
                            _cargs_, _args_

                        member _.ContainerRuntimeVersion((_cargs_, _args_: NodeSystemInfoArgs), containerRuntimeVersion) =
                            _args_.ContainerRuntimeVersion <- io containerRuntimeVersion
                            _cargs_, _args_

                        [<CustomOperation("kernelVersion")>]
                        member _.KernelVersion((_cargs_, _args_: NodeSystemInfoArgs), kernelVersion) =
                            _args_.KernelVersion <- input kernelVersion
                            _cargs_, _args_

                        member _.KernelVersion((_cargs_, _args_: NodeSystemInfoArgs), kernelVersion) =
                            _args_.KernelVersion <- io kernelVersion
                            _cargs_, _args_

                        [<CustomOperation("kubeProxyVersion")>]
                        member _.KubeProxyVersion((_cargs_, _args_: NodeSystemInfoArgs), kubeProxyVersion) =
                            _args_.KubeProxyVersion <- input kubeProxyVersion
                            _cargs_, _args_

                        member _.KubeProxyVersion((_cargs_, _args_: NodeSystemInfoArgs), kubeProxyVersion) =
                            _args_.KubeProxyVersion <- io kubeProxyVersion
                            _cargs_, _args_

                        [<CustomOperation("kubeletVersion")>]
                        member _.KubeletVersion((_cargs_, _args_: NodeSystemInfoArgs), kubeletVersion) =
                            _args_.KubeletVersion <- input kubeletVersion
                            _cargs_, _args_

                        member _.KubeletVersion((_cargs_, _args_: NodeSystemInfoArgs), kubeletVersion) =
                            _args_.KubeletVersion <- io kubeletVersion
                            _cargs_, _args_

                        [<CustomOperation("machineID")>]
                        member _.MachineID((_cargs_, _args_: NodeSystemInfoArgs), machineID) =
                            _args_.MachineID <- input machineID
                            _cargs_, _args_

                        member _.MachineID((_cargs_, _args_: NodeSystemInfoArgs), machineID) =
                            _args_.MachineID <- io machineID
                            _cargs_, _args_

                        [<CustomOperation("operatingSystem")>]
                        member _.OperatingSystem((_cargs_, _args_: NodeSystemInfoArgs), operatingSystem) =
                            _args_.OperatingSystem <- input operatingSystem
                            _cargs_, _args_

                        member _.OperatingSystem((_cargs_, _args_: NodeSystemInfoArgs), operatingSystem) =
                            _args_.OperatingSystem <- io operatingSystem
                            _cargs_, _args_

                        [<CustomOperation("osImage")>]
                        member _.OsImage((_cargs_, _args_: NodeSystemInfoArgs), osImage) =
                            _args_.OsImage <- input osImage
                            _cargs_, _args_

                        member _.OsImage((_cargs_, _args_: NodeSystemInfoArgs), osImage) =
                            _args_.OsImage <- io osImage
                            _cargs_, _args_

                        [<CustomOperation("systemUUID")>]
                        member _.SystemUUID((_cargs_, _args_: NodeSystemInfoArgs), systemUUID) =
                            _args_.SystemUUID <- input systemUUID
                            _cargs_, _args_

                        member _.SystemUUID((_cargs_, _args_: NodeSystemInfoArgs), systemUUID) =
                            _args_.SystemUUID <- io systemUUID
                            _cargs_, _args_

                    let nodeSystemInfo = NodeSystemInfoBuilder()

                [<AutoOpen>]
                module ObjectFieldSelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ObjectFieldSelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectFieldSelectorArgs()
                        member _.Run(_cargs_, _args_: ObjectFieldSelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectFieldSelectorArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: ObjectFieldSelectorArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: ObjectFieldSelectorArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("fieldPath")>]
                        member _.FieldPath((_cargs_, _args_: ObjectFieldSelectorArgs), fieldPath) =
                            _args_.FieldPath <- input fieldPath
                            _cargs_, _args_

                        member _.FieldPath((_cargs_, _args_: ObjectFieldSelectorArgs), fieldPath) =
                            _args_.FieldPath <- io fieldPath
                            _cargs_, _args_

                    let objectFieldSelector = ObjectFieldSelectorBuilder()

                [<AutoOpen>]
                module ObjectReference =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: ObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: ObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: ObjectReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("fieldPath")>]
                        member _.FieldPath((_cargs_, _args_: ObjectReferenceArgs), fieldPath) =
                            _args_.FieldPath <- input fieldPath
                            _cargs_, _args_

                        member _.FieldPath((_cargs_, _args_: ObjectReferenceArgs), fieldPath) =
                            _args_.FieldPath <- io fieldPath
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: ObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: ObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ObjectReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ObjectReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("resourceVersion")>]
                        member _.ResourceVersion((_cargs_, _args_: ObjectReferenceArgs), resourceVersion) =
                            _args_.ResourceVersion <- input resourceVersion
                            _cargs_, _args_

                        member _.ResourceVersion((_cargs_, _args_: ObjectReferenceArgs), resourceVersion) =
                            _args_.ResourceVersion <- io resourceVersion
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: ObjectReferenceArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: ObjectReferenceArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let objectReference = ObjectReferenceBuilder()

                [<AutoOpen>]
                module PersistentVolumeClaimCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeClaimConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimConditionArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeClaimConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeClaimConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastProbeTime")>]
                        member _.LastProbeTime((_cargs_, _args_: PersistentVolumeClaimConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- input lastProbeTime
                            _cargs_, _args_

                        member _.LastProbeTime((_cargs_, _args_: PersistentVolumeClaimConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- io lastProbeTime
                            _cargs_, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: PersistentVolumeClaimConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: PersistentVolumeClaimConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: PersistentVolumeClaimConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: PersistentVolumeClaimConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: PersistentVolumeClaimConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: PersistentVolumeClaimConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: PersistentVolumeClaimConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: PersistentVolumeClaimConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: PersistentVolumeClaimConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: PersistentVolumeClaimConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let persistentVolumeClaimCondition = PersistentVolumeClaimConditionBuilder()

                [<AutoOpen>]
                module PersistentVolumeClaimSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeClaimSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimSpecArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeClaimSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeClaimSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("accessModes")>]
                        member _.AccessModes((_cargs_, _args_: PersistentVolumeClaimSpecArgs), accessModes) =
                            _args_.AccessModes <- inputList accessModes
                            _cargs_, _args_

                        [<CustomOperation("dataSource")>]
                        member _.DataSource((_cargs_, _args_: PersistentVolumeClaimSpecArgs), dataSource) =
                            _args_.DataSource <- input dataSource
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: PersistentVolumeClaimSpecArgs), resources) =
                            _args_.Resources <- input resources
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: PersistentVolumeClaimSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("storageClassName")>]
                        member _.StorageClassName((_cargs_, _args_: PersistentVolumeClaimSpecArgs), storageClassName) =
                            _args_.StorageClassName <- input storageClassName
                            _cargs_, _args_

                        member _.StorageClassName((_cargs_, _args_: PersistentVolumeClaimSpecArgs), storageClassName) =
                            _args_.StorageClassName <- io storageClassName
                            _cargs_, _args_

                        [<CustomOperation("volumeMode")>]
                        member _.VolumeMode((_cargs_, _args_: PersistentVolumeClaimSpecArgs), volumeMode) =
                            _args_.VolumeMode <- input volumeMode
                            _cargs_, _args_

                        member _.VolumeMode((_cargs_, _args_: PersistentVolumeClaimSpecArgs), volumeMode) =
                            _args_.VolumeMode <- io volumeMode
                            _cargs_, _args_

                        [<CustomOperation("volumeName")>]
                        member _.VolumeName((_cargs_, _args_: PersistentVolumeClaimSpecArgs), volumeName) =
                            _args_.VolumeName <- input volumeName
                            _cargs_, _args_

                        member _.VolumeName((_cargs_, _args_: PersistentVolumeClaimSpecArgs), volumeName) =
                            _args_.VolumeName <- io volumeName
                            _cargs_, _args_

                    let persistentVolumeClaimSpec = PersistentVolumeClaimSpecBuilder()

                [<AutoOpen>]
                module PersistentVolumeClaimStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeClaimStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimStatusArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeClaimStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeClaimStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("accessModes")>]
                        member _.AccessModes((_cargs_, _args_: PersistentVolumeClaimStatusArgs), accessModes) =
                            _args_.AccessModes <- inputList accessModes
                            _cargs_, _args_

                        [<CustomOperation("capacity")>]
                        member _.Capacity((_cargs_, _args_: PersistentVolumeClaimStatusArgs), capacity) =
                            _args_.Capacity <- inputMap capacity
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: PersistentVolumeClaimStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("phase")>]
                        member _.Phase((_cargs_, _args_: PersistentVolumeClaimStatusArgs), phase) =
                            _args_.Phase <- input phase
                            _cargs_, _args_

                        member _.Phase((_cargs_, _args_: PersistentVolumeClaimStatusArgs), phase) =
                            _args_.Phase <- io phase
                            _cargs_, _args_

                    let persistentVolumeClaimStatus = PersistentVolumeClaimStatusBuilder()

                [<AutoOpen>]
                module PersistentVolumeClaimVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeClaimVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("claimName")>]
                        member _.ClaimName((_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs), claimName) =
                            _args_.ClaimName <- input claimName
                            _cargs_, _args_

                        member _.ClaimName((_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs), claimName) =
                            _args_.ClaimName <- io claimName
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: PersistentVolumeClaimVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let persistentVolumeClaimVolumeSource =
                        PersistentVolumeClaimVolumeSourceBuilder()

                [<AutoOpen>]
                module PersistentVolumeSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeSpecArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("accessModes")>]
                        member _.AccessModes((_cargs_, _args_: PersistentVolumeSpecArgs), accessModes) =
                            _args_.AccessModes <- inputList accessModes
                            _cargs_, _args_

                        [<CustomOperation("awsElasticBlockStore")>]
                        member _.AwsElasticBlockStore((_cargs_, _args_: PersistentVolumeSpecArgs), awsElasticBlockStore) =
                            _args_.AwsElasticBlockStore <- input awsElasticBlockStore
                            _cargs_, _args_

                        [<CustomOperation("azureDisk")>]
                        member _.AzureDisk((_cargs_, _args_: PersistentVolumeSpecArgs), azureDisk) =
                            _args_.AzureDisk <- input azureDisk
                            _cargs_, _args_

                        [<CustomOperation("azureFile")>]
                        member _.AzureFile((_cargs_, _args_: PersistentVolumeSpecArgs), azureFile) =
                            _args_.AzureFile <- input azureFile
                            _cargs_, _args_

                        [<CustomOperation("capacity")>]
                        member _.Capacity((_cargs_, _args_: PersistentVolumeSpecArgs), capacity) =
                            _args_.Capacity <- inputMap capacity
                            _cargs_, _args_

                        [<CustomOperation("cephfs")>]
                        member _.Cephfs((_cargs_, _args_: PersistentVolumeSpecArgs), cephfs) =
                            _args_.Cephfs <- input cephfs
                            _cargs_, _args_

                        [<CustomOperation("cinder")>]
                        member _.Cinder((_cargs_, _args_: PersistentVolumeSpecArgs), cinder) =
                            _args_.Cinder <- input cinder
                            _cargs_, _args_

                        [<CustomOperation("claimRef")>]
                        member _.ClaimRef((_cargs_, _args_: PersistentVolumeSpecArgs), claimRef) =
                            _args_.ClaimRef <- input claimRef
                            _cargs_, _args_

                        [<CustomOperation("csi")>]
                        member _.Csi((_cargs_, _args_: PersistentVolumeSpecArgs), csi) =
                            _args_.Csi <- input csi
                            _cargs_, _args_

                        [<CustomOperation("fc")>]
                        member _.Fc((_cargs_, _args_: PersistentVolumeSpecArgs), fc) =
                            _args_.Fc <- input fc
                            _cargs_, _args_

                        [<CustomOperation("flexVolume")>]
                        member _.FlexVolume((_cargs_, _args_: PersistentVolumeSpecArgs), flexVolume) =
                            _args_.FlexVolume <- input flexVolume
                            _cargs_, _args_

                        [<CustomOperation("flocker")>]
                        member _.Flocker((_cargs_, _args_: PersistentVolumeSpecArgs), flocker) =
                            _args_.Flocker <- input flocker
                            _cargs_, _args_

                        [<CustomOperation("gcePersistentDisk")>]
                        member _.GcePersistentDisk((_cargs_, _args_: PersistentVolumeSpecArgs), gcePersistentDisk) =
                            _args_.GcePersistentDisk <- input gcePersistentDisk
                            _cargs_, _args_

                        [<CustomOperation("glusterfs")>]
                        member _.Glusterfs((_cargs_, _args_: PersistentVolumeSpecArgs), glusterfs) =
                            _args_.Glusterfs <- input glusterfs
                            _cargs_, _args_

                        [<CustomOperation("hostPath")>]
                        member _.HostPath((_cargs_, _args_: PersistentVolumeSpecArgs), hostPath) =
                            _args_.HostPath <- input hostPath
                            _cargs_, _args_

                        [<CustomOperation("iscsi")>]
                        member _.Iscsi((_cargs_, _args_: PersistentVolumeSpecArgs), iscsi) =
                            _args_.Iscsi <- input iscsi
                            _cargs_, _args_

                        [<CustomOperation("local")>]
                        member _.Local((_cargs_, _args_: PersistentVolumeSpecArgs), local) =
                            _args_.Local <- input local
                            _cargs_, _args_

                        [<CustomOperation("mountOptions")>]
                        member _.MountOptions((_cargs_, _args_: PersistentVolumeSpecArgs), mountOptions) =
                            _args_.MountOptions <- inputList mountOptions
                            _cargs_, _args_

                        [<CustomOperation("nfs")>]
                        member _.Nfs((_cargs_, _args_: PersistentVolumeSpecArgs), nfs) =
                            _args_.Nfs <- input nfs
                            _cargs_, _args_

                        [<CustomOperation("nodeAffinity")>]
                        member _.NodeAffinity((_cargs_, _args_: PersistentVolumeSpecArgs), nodeAffinity) =
                            _args_.NodeAffinity <- input nodeAffinity
                            _cargs_, _args_

                        [<CustomOperation("persistentVolumeReclaimPolicy")>]
                        member _.PersistentVolumeReclaimPolicy(
                            (_cargs_, _args_: PersistentVolumeSpecArgs),
                            persistentVolumeReclaimPolicy)
                            =
                            _args_.PersistentVolumeReclaimPolicy <- input persistentVolumeReclaimPolicy
                            _cargs_, _args_

                        member _.PersistentVolumeReclaimPolicy(
                            (_cargs_, _args_: PersistentVolumeSpecArgs),
                            persistentVolumeReclaimPolicy)
                            =
                            _args_.PersistentVolumeReclaimPolicy <- io persistentVolumeReclaimPolicy
                            _cargs_, _args_

                        [<CustomOperation("photonPersistentDisk")>]
                        member _.PhotonPersistentDisk((_cargs_, _args_: PersistentVolumeSpecArgs), photonPersistentDisk) =
                            _args_.PhotonPersistentDisk <- input photonPersistentDisk
                            _cargs_, _args_

                        [<CustomOperation("portworxVolume")>]
                        member _.PortworxVolume((_cargs_, _args_: PersistentVolumeSpecArgs), portworxVolume) =
                            _args_.PortworxVolume <- input portworxVolume
                            _cargs_, _args_

                        [<CustomOperation("quobyte")>]
                        member _.Quobyte((_cargs_, _args_: PersistentVolumeSpecArgs), quobyte) =
                            _args_.Quobyte <- input quobyte
                            _cargs_, _args_

                        [<CustomOperation("rbd")>]
                        member _.Rbd((_cargs_, _args_: PersistentVolumeSpecArgs), rbd) =
                            _args_.Rbd <- input rbd
                            _cargs_, _args_

                        [<CustomOperation("scaleIO")>]
                        member _.ScaleIO((_cargs_, _args_: PersistentVolumeSpecArgs), scaleIO) =
                            _args_.ScaleIO <- input scaleIO
                            _cargs_, _args_

                        [<CustomOperation("storageClassName")>]
                        member _.StorageClassName((_cargs_, _args_: PersistentVolumeSpecArgs), storageClassName) =
                            _args_.StorageClassName <- input storageClassName
                            _cargs_, _args_

                        member _.StorageClassName((_cargs_, _args_: PersistentVolumeSpecArgs), storageClassName) =
                            _args_.StorageClassName <- io storageClassName
                            _cargs_, _args_

                        [<CustomOperation("storageos")>]
                        member _.Storageos((_cargs_, _args_: PersistentVolumeSpecArgs), storageos) =
                            _args_.Storageos <- input storageos
                            _cargs_, _args_

                        [<CustomOperation("volumeMode")>]
                        member _.VolumeMode((_cargs_, _args_: PersistentVolumeSpecArgs), volumeMode) =
                            _args_.VolumeMode <- input volumeMode
                            _cargs_, _args_

                        member _.VolumeMode((_cargs_, _args_: PersistentVolumeSpecArgs), volumeMode) =
                            _args_.VolumeMode <- io volumeMode
                            _cargs_, _args_

                        [<CustomOperation("vsphereVolume")>]
                        member _.VsphereVolume((_cargs_, _args_: PersistentVolumeSpecArgs), vsphereVolume) =
                            _args_.VsphereVolume <- input vsphereVolume
                            _cargs_, _args_

                    let persistentVolumeSpec = PersistentVolumeSpecBuilder()

                [<AutoOpen>]
                module PersistentVolumeStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PersistentVolumeStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PersistentVolumeStatusArgs()
                        member _.Run(_cargs_, _args_: PersistentVolumeStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PersistentVolumeStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: PersistentVolumeStatusArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: PersistentVolumeStatusArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("phase")>]
                        member _.Phase((_cargs_, _args_: PersistentVolumeStatusArgs), phase) =
                            _args_.Phase <- input phase
                            _cargs_, _args_

                        member _.Phase((_cargs_, _args_: PersistentVolumeStatusArgs), phase) =
                            _args_.Phase <- io phase
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: PersistentVolumeStatusArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: PersistentVolumeStatusArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                    let persistentVolumeStatus = PersistentVolumeStatusBuilder()

                [<AutoOpen>]
                module PhotonPersistentDiskVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PhotonPersistentDiskVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PhotonPersistentDiskVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("pdID")>]
                        member _.PdID((_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs), pdID) =
                            _args_.PdID <- input pdID
                            _cargs_, _args_

                        member _.PdID((_cargs_, _args_: PhotonPersistentDiskVolumeSourceArgs), pdID) =
                            _args_.PdID <- io pdID
                            _cargs_, _args_

                    let photonPersistentDiskVolumeSource =
                        PhotonPersistentDiskVolumeSourceBuilder()

                [<AutoOpen>]
                module PodAffinity =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodAffinityBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodAffinityArgs()
                        member _.Run(_cargs_, _args_: PodAffinityArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodAffinityArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("preferredDuringSchedulingIgnoredDuringExecution")>]
                        member _.PreferredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: PodAffinityArgs),
                            preferredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.PreferredDuringSchedulingIgnoredDuringExecution <- inputList
                                                                                          preferredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                        [<CustomOperation("requiredDuringSchedulingIgnoredDuringExecution")>]
                        member _.RequiredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: PodAffinityArgs),
                            requiredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.RequiredDuringSchedulingIgnoredDuringExecution <- inputList
                                                                                         requiredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                    let podAffinity = PodAffinityBuilder()

                [<AutoOpen>]
                module PodAffinityTerm =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodAffinityTermBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodAffinityTermArgs()
                        member _.Run(_cargs_, _args_: PodAffinityTermArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodAffinityTermArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("labelSelector")>]
                        member _.LabelSelector((_cargs_, _args_: PodAffinityTermArgs), labelSelector) =
                            _args_.LabelSelector <- input labelSelector
                            _cargs_, _args_

                        [<CustomOperation("namespaces")>]
                        member _.Namespaces((_cargs_, _args_: PodAffinityTermArgs), namespaces) =
                            _args_.Namespaces <- inputList namespaces
                            _cargs_, _args_

                        [<CustomOperation("topologyKey")>]
                        member _.TopologyKey((_cargs_, _args_: PodAffinityTermArgs), topologyKey) =
                            _args_.TopologyKey <- input topologyKey
                            _cargs_, _args_

                        member _.TopologyKey((_cargs_, _args_: PodAffinityTermArgs), topologyKey) =
                            _args_.TopologyKey <- io topologyKey
                            _cargs_, _args_

                    let podAffinityTerm = PodAffinityTermBuilder()

                [<AutoOpen>]
                module PodAntiAffinity =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodAntiAffinityBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodAntiAffinityArgs()
                        member _.Run(_cargs_, _args_: PodAntiAffinityArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodAntiAffinityArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("preferredDuringSchedulingIgnoredDuringExecution")>]
                        member _.PreferredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: PodAntiAffinityArgs),
                            preferredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.PreferredDuringSchedulingIgnoredDuringExecution <- inputList
                                                                                          preferredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                        [<CustomOperation("requiredDuringSchedulingIgnoredDuringExecution")>]
                        member _.RequiredDuringSchedulingIgnoredDuringExecution(
                            (_cargs_, _args_: PodAntiAffinityArgs),
                            requiredDuringSchedulingIgnoredDuringExecution)
                            =
                            _args_.RequiredDuringSchedulingIgnoredDuringExecution <- inputList
                                                                                         requiredDuringSchedulingIgnoredDuringExecution
                            _cargs_, _args_

                    let podAntiAffinity = PodAntiAffinityBuilder()

                [<AutoOpen>]
                module PodCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodConditionArgs()
                        member _.Run(_cargs_, _args_: PodConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodConditionArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastProbeTime")>]
                        member _.LastProbeTime((_cargs_, _args_: PodConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- input lastProbeTime
                            _cargs_, _args_

                        member _.LastProbeTime((_cargs_, _args_: PodConditionArgs), lastProbeTime) =
                            _args_.LastProbeTime <- io lastProbeTime
                            _cargs_, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: PodConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: PodConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: PodConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: PodConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: PodConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: PodConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: PodConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: PodConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: PodConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: PodConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let podCondition = PodConditionBuilder()

                [<AutoOpen>]
                module PodDNSConfig =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodDNSConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodDNSConfigArgs()
                        member _.Run(_cargs_, _args_: PodDNSConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodDNSConfigArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nameservers")>]
                        member _.Nameservers((_cargs_, _args_: PodDNSConfigArgs), nameservers) =
                            _args_.Nameservers <- inputList nameservers
                            _cargs_, _args_

                        [<CustomOperation("options")>]
                        member _.Options((_cargs_, _args_: PodDNSConfigArgs), options) =
                            _args_.Options <- inputList options
                            _cargs_, _args_

                        [<CustomOperation("searches")>]
                        member _.Searches((_cargs_, _args_: PodDNSConfigArgs), searches) =
                            _args_.Searches <- inputList searches
                            _cargs_, _args_

                    let podDNSConfig = PodDNSConfigBuilder()

                [<AutoOpen>]
                module PodDNSConfigOption =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodDNSConfigOptionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodDNSConfigOptionArgs()
                        member _.Run(_cargs_, _args_: PodDNSConfigOptionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodDNSConfigOptionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: PodDNSConfigOptionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: PodDNSConfigOptionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: PodDNSConfigOptionArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: PodDNSConfigOptionArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let podDNSConfigOption = PodDNSConfigOptionBuilder()

                [<AutoOpen>]
                module PodIP =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodIPBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodIPArgs()
                        member _.Run(_cargs_, _args_: PodIPArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodIPArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ip")>]
                        member _.Ip((_cargs_, _args_: PodIPArgs), ip) =
                            _args_.Ip <- input ip
                            _cargs_, _args_

                        member _.Ip((_cargs_, _args_: PodIPArgs), ip) =
                            _args_.Ip <- io ip
                            _cargs_, _args_

                    let podIP = PodIPBuilder()

                [<AutoOpen>]
                module PodReadinessGate =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodReadinessGateBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodReadinessGateArgs()
                        member _.Run(_cargs_, _args_: PodReadinessGateArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodReadinessGateArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditionType")>]
                        member _.ConditionType((_cargs_, _args_: PodReadinessGateArgs), conditionType) =
                            _args_.ConditionType <- input conditionType
                            _cargs_, _args_

                        member _.ConditionType((_cargs_, _args_: PodReadinessGateArgs), conditionType) =
                            _args_.ConditionType <- io conditionType
                            _cargs_, _args_

                    let podReadinessGate = PodReadinessGateBuilder()

                [<AutoOpen>]
                module PodSecurityContext =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodSecurityContextBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodSecurityContextArgs()
                        member _.Run(_cargs_, _args_: PodSecurityContextArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodSecurityContextArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsGroup")>]
                        member _.FsGroup((_cargs_, _args_: PodSecurityContextArgs), fsGroup) =
                            _args_.FsGroup <- input fsGroup
                            _cargs_, _args_

                        member _.FsGroup((_cargs_, _args_: PodSecurityContextArgs), fsGroup) =
                            _args_.FsGroup <- io fsGroup
                            _cargs_, _args_

                        [<CustomOperation("fsGroupChangePolicy")>]
                        member _.FsGroupChangePolicy((_cargs_, _args_: PodSecurityContextArgs), fsGroupChangePolicy) =
                            _args_.FsGroupChangePolicy <- input fsGroupChangePolicy
                            _cargs_, _args_

                        member _.FsGroupChangePolicy((_cargs_, _args_: PodSecurityContextArgs), fsGroupChangePolicy) =
                            _args_.FsGroupChangePolicy <- io fsGroupChangePolicy
                            _cargs_, _args_

                        [<CustomOperation("runAsGroup")>]
                        member _.RunAsGroup((_cargs_, _args_: PodSecurityContextArgs), runAsGroup) =
                            _args_.RunAsGroup <- input runAsGroup
                            _cargs_, _args_

                        member _.RunAsGroup((_cargs_, _args_: PodSecurityContextArgs), runAsGroup) =
                            _args_.RunAsGroup <- io runAsGroup
                            _cargs_, _args_

                        [<CustomOperation("runAsNonRoot")>]
                        member _.RunAsNonRoot((_cargs_, _args_: PodSecurityContextArgs), runAsNonRoot) =
                            _args_.RunAsNonRoot <- input runAsNonRoot
                            _cargs_, _args_

                        member _.RunAsNonRoot((_cargs_, _args_: PodSecurityContextArgs), runAsNonRoot) =
                            _args_.RunAsNonRoot <- io runAsNonRoot
                            _cargs_, _args_

                        [<CustomOperation("runAsUser")>]
                        member _.RunAsUser((_cargs_, _args_: PodSecurityContextArgs), runAsUser) =
                            _args_.RunAsUser <- input runAsUser
                            _cargs_, _args_

                        member _.RunAsUser((_cargs_, _args_: PodSecurityContextArgs), runAsUser) =
                            _args_.RunAsUser <- io runAsUser
                            _cargs_, _args_

                        [<CustomOperation("seLinuxOptions")>]
                        member _.SeLinuxOptions((_cargs_, _args_: PodSecurityContextArgs), seLinuxOptions) =
                            _args_.SeLinuxOptions <- input seLinuxOptions
                            _cargs_, _args_

                        [<CustomOperation("supplementalGroups")>]
                        member _.SupplementalGroups((_cargs_, _args_: PodSecurityContextArgs), supplementalGroups) =
                            _args_.SupplementalGroups <- inputList supplementalGroups
                            _cargs_, _args_

                        [<CustomOperation("sysctls")>]
                        member _.Sysctls((_cargs_, _args_: PodSecurityContextArgs), sysctls) =
                            _args_.Sysctls <- inputList sysctls
                            _cargs_, _args_

                        [<CustomOperation("windowsOptions")>]
                        member _.WindowsOptions((_cargs_, _args_: PodSecurityContextArgs), windowsOptions) =
                            _args_.WindowsOptions <- input windowsOptions
                            _cargs_, _args_

                    let podSecurityContext = PodSecurityContextBuilder()

                [<AutoOpen>]
                module PodSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodSpecArgs()
                        member _.Run(_cargs_, _args_: PodSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("activeDeadlineSeconds")>]
                        member _.ActiveDeadlineSeconds((_cargs_, _args_: PodSpecArgs), activeDeadlineSeconds) =
                            _args_.ActiveDeadlineSeconds <- input activeDeadlineSeconds
                            _cargs_, _args_

                        member _.ActiveDeadlineSeconds((_cargs_, _args_: PodSpecArgs), activeDeadlineSeconds) =
                            _args_.ActiveDeadlineSeconds <- io activeDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("affinity")>]
                        member _.Affinity((_cargs_, _args_: PodSpecArgs), affinity) =
                            _args_.Affinity <- input affinity
                            _cargs_, _args_

                        [<CustomOperation("automountServiceAccountToken")>]
                        member _.AutomountServiceAccountToken(
                            (_cargs_, _args_: PodSpecArgs),
                            automountServiceAccountToken)
                            =
                            _args_.AutomountServiceAccountToken <- input automountServiceAccountToken
                            _cargs_, _args_

                        member _.AutomountServiceAccountToken(
                            (_cargs_, _args_: PodSpecArgs),
                            automountServiceAccountToken)
                            =
                            _args_.AutomountServiceAccountToken <- io automountServiceAccountToken
                            _cargs_, _args_

                        [<CustomOperation("containers")>]
                        member _.Containers((_cargs_, _args_: PodSpecArgs), containers) =
                            _args_.Containers <- inputList containers
                            _cargs_, _args_

                        [<CustomOperation("dnsConfig")>]
                        member _.DnsConfig((_cargs_, _args_: PodSpecArgs), dnsConfig) =
                            _args_.DnsConfig <- input dnsConfig
                            _cargs_, _args_

                        [<CustomOperation("dnsPolicy")>]
                        member _.DnsPolicy((_cargs_, _args_: PodSpecArgs), dnsPolicy) =
                            _args_.DnsPolicy <- input dnsPolicy
                            _cargs_, _args_

                        member _.DnsPolicy((_cargs_, _args_: PodSpecArgs), dnsPolicy) =
                            _args_.DnsPolicy <- io dnsPolicy
                            _cargs_, _args_

                        [<CustomOperation("enableServiceLinks")>]
                        member _.EnableServiceLinks((_cargs_, _args_: PodSpecArgs), enableServiceLinks) =
                            _args_.EnableServiceLinks <- input enableServiceLinks
                            _cargs_, _args_

                        member _.EnableServiceLinks((_cargs_, _args_: PodSpecArgs), enableServiceLinks) =
                            _args_.EnableServiceLinks <- io enableServiceLinks
                            _cargs_, _args_

                        [<CustomOperation("ephemeralContainers")>]
                        member _.EphemeralContainers((_cargs_, _args_: PodSpecArgs), ephemeralContainers) =
                            _args_.EphemeralContainers <- inputList ephemeralContainers
                            _cargs_, _args_

                        [<CustomOperation("hostAliases")>]
                        member _.HostAliases((_cargs_, _args_: PodSpecArgs), hostAliases) =
                            _args_.HostAliases <- inputList hostAliases
                            _cargs_, _args_

                        [<CustomOperation("hostIPC")>]
                        member _.HostIPC((_cargs_, _args_: PodSpecArgs), hostIPC) =
                            _args_.HostIPC <- input hostIPC
                            _cargs_, _args_

                        member _.HostIPC((_cargs_, _args_: PodSpecArgs), hostIPC) =
                            _args_.HostIPC <- io hostIPC
                            _cargs_, _args_

                        [<CustomOperation("hostNetwork")>]
                        member _.HostNetwork((_cargs_, _args_: PodSpecArgs), hostNetwork) =
                            _args_.HostNetwork <- input hostNetwork
                            _cargs_, _args_

                        member _.HostNetwork((_cargs_, _args_: PodSpecArgs), hostNetwork) =
                            _args_.HostNetwork <- io hostNetwork
                            _cargs_, _args_

                        [<CustomOperation("hostPID")>]
                        member _.HostPID((_cargs_, _args_: PodSpecArgs), hostPID) =
                            _args_.HostPID <- input hostPID
                            _cargs_, _args_

                        member _.HostPID((_cargs_, _args_: PodSpecArgs), hostPID) =
                            _args_.HostPID <- io hostPID
                            _cargs_, _args_

                        [<CustomOperation("hostname")>]
                        member _.Hostname((_cargs_, _args_: PodSpecArgs), hostname) =
                            _args_.Hostname <- input hostname
                            _cargs_, _args_

                        member _.Hostname((_cargs_, _args_: PodSpecArgs), hostname) =
                            _args_.Hostname <- io hostname
                            _cargs_, _args_

                        [<CustomOperation("imagePullSecrets")>]
                        member _.ImagePullSecrets((_cargs_, _args_: PodSpecArgs), imagePullSecrets) =
                            _args_.ImagePullSecrets <- inputList imagePullSecrets
                            _cargs_, _args_

                        [<CustomOperation("initContainers")>]
                        member _.InitContainers((_cargs_, _args_: PodSpecArgs), initContainers) =
                            _args_.InitContainers <- inputList initContainers
                            _cargs_, _args_

                        [<CustomOperation("nodeName")>]
                        member _.NodeName((_cargs_, _args_: PodSpecArgs), nodeName) =
                            _args_.NodeName <- input nodeName
                            _cargs_, _args_

                        member _.NodeName((_cargs_, _args_: PodSpecArgs), nodeName) =
                            _args_.NodeName <- io nodeName
                            _cargs_, _args_

                        [<CustomOperation("nodeSelector")>]
                        member _.NodeSelector((_cargs_, _args_: PodSpecArgs), nodeSelector) =
                            _args_.NodeSelector <- inputMap nodeSelector
                            _cargs_, _args_

                        [<CustomOperation("overhead")>]
                        member _.Overhead((_cargs_, _args_: PodSpecArgs), overhead) =
                            _args_.Overhead <- inputMap overhead
                            _cargs_, _args_

                        [<CustomOperation("preemptionPolicy")>]
                        member _.PreemptionPolicy((_cargs_, _args_: PodSpecArgs), preemptionPolicy) =
                            _args_.PreemptionPolicy <- input preemptionPolicy
                            _cargs_, _args_

                        member _.PreemptionPolicy((_cargs_, _args_: PodSpecArgs), preemptionPolicy) =
                            _args_.PreemptionPolicy <- io preemptionPolicy
                            _cargs_, _args_

                        [<CustomOperation("priority")>]
                        member _.Priority((_cargs_, _args_: PodSpecArgs), priority) =
                            _args_.Priority <- input priority
                            _cargs_, _args_

                        member _.Priority((_cargs_, _args_: PodSpecArgs), priority) =
                            _args_.Priority <- io priority
                            _cargs_, _args_

                        [<CustomOperation("priorityClassName")>]
                        member _.PriorityClassName((_cargs_, _args_: PodSpecArgs), priorityClassName) =
                            _args_.PriorityClassName <- input priorityClassName
                            _cargs_, _args_

                        member _.PriorityClassName((_cargs_, _args_: PodSpecArgs), priorityClassName) =
                            _args_.PriorityClassName <- io priorityClassName
                            _cargs_, _args_

                        [<CustomOperation("readinessGates")>]
                        member _.ReadinessGates((_cargs_, _args_: PodSpecArgs), readinessGates) =
                            _args_.ReadinessGates <- inputList readinessGates
                            _cargs_, _args_

                        [<CustomOperation("restartPolicy")>]
                        member _.RestartPolicy((_cargs_, _args_: PodSpecArgs), restartPolicy) =
                            _args_.RestartPolicy <- input restartPolicy
                            _cargs_, _args_

                        member _.RestartPolicy((_cargs_, _args_: PodSpecArgs), restartPolicy) =
                            _args_.RestartPolicy <- io restartPolicy
                            _cargs_, _args_

                        [<CustomOperation("runtimeClassName")>]
                        member _.RuntimeClassName((_cargs_, _args_: PodSpecArgs), runtimeClassName) =
                            _args_.RuntimeClassName <- input runtimeClassName
                            _cargs_, _args_

                        member _.RuntimeClassName((_cargs_, _args_: PodSpecArgs), runtimeClassName) =
                            _args_.RuntimeClassName <- io runtimeClassName
                            _cargs_, _args_

                        [<CustomOperation("schedulerName")>]
                        member _.SchedulerName((_cargs_, _args_: PodSpecArgs), schedulerName) =
                            _args_.SchedulerName <- input schedulerName
                            _cargs_, _args_

                        member _.SchedulerName((_cargs_, _args_: PodSpecArgs), schedulerName) =
                            _args_.SchedulerName <- io schedulerName
                            _cargs_, _args_

                        [<CustomOperation("securityContext")>]
                        member _.SecurityContext((_cargs_, _args_: PodSpecArgs), securityContext) =
                            _args_.SecurityContext <- input securityContext
                            _cargs_, _args_

                        [<CustomOperation("serviceAccount")>]
                        member _.ServiceAccount((_cargs_, _args_: PodSpecArgs), serviceAccount) =
                            _args_.ServiceAccount <- input serviceAccount
                            _cargs_, _args_

                        member _.ServiceAccount((_cargs_, _args_: PodSpecArgs), serviceAccount) =
                            _args_.ServiceAccount <- io serviceAccount
                            _cargs_, _args_

                        [<CustomOperation("serviceAccountName")>]
                        member _.ServiceAccountName((_cargs_, _args_: PodSpecArgs), serviceAccountName) =
                            _args_.ServiceAccountName <- input serviceAccountName
                            _cargs_, _args_

                        member _.ServiceAccountName((_cargs_, _args_: PodSpecArgs), serviceAccountName) =
                            _args_.ServiceAccountName <- io serviceAccountName
                            _cargs_, _args_

                        [<CustomOperation("shareProcessNamespace")>]
                        member _.ShareProcessNamespace((_cargs_, _args_: PodSpecArgs), shareProcessNamespace) =
                            _args_.ShareProcessNamespace <- input shareProcessNamespace
                            _cargs_, _args_

                        member _.ShareProcessNamespace((_cargs_, _args_: PodSpecArgs), shareProcessNamespace) =
                            _args_.ShareProcessNamespace <- io shareProcessNamespace
                            _cargs_, _args_

                        [<CustomOperation("subdomain")>]
                        member _.Subdomain((_cargs_, _args_: PodSpecArgs), subdomain) =
                            _args_.Subdomain <- input subdomain
                            _cargs_, _args_

                        member _.Subdomain((_cargs_, _args_: PodSpecArgs), subdomain) =
                            _args_.Subdomain <- io subdomain
                            _cargs_, _args_

                        [<CustomOperation("terminationGracePeriodSeconds")>]
                        member _.TerminationGracePeriodSeconds(
                            (_cargs_, _args_: PodSpecArgs),
                            terminationGracePeriodSeconds)
                            =
                            _args_.TerminationGracePeriodSeconds <- input terminationGracePeriodSeconds
                            _cargs_, _args_

                        member _.TerminationGracePeriodSeconds(
                            (_cargs_, _args_: PodSpecArgs),
                            terminationGracePeriodSeconds)
                            =
                            _args_.TerminationGracePeriodSeconds <- io terminationGracePeriodSeconds
                            _cargs_, _args_

                        [<CustomOperation("tolerations")>]
                        member _.Tolerations((_cargs_, _args_: PodSpecArgs), tolerations) =
                            _args_.Tolerations <- inputList tolerations
                            _cargs_, _args_

                        [<CustomOperation("topologySpreadConstraints")>]
                        member _.TopologySpreadConstraints((_cargs_, _args_: PodSpecArgs), topologySpreadConstraints) =
                            _args_.TopologySpreadConstraints <- inputList topologySpreadConstraints
                            _cargs_, _args_

                        [<CustomOperation("volumes")>]
                        member _.Volumes((_cargs_, _args_: PodSpecArgs), volumes) =
                            _args_.Volumes <- inputList volumes
                            _cargs_, _args_

                    let podSpec = PodSpecBuilder()

                [<AutoOpen>]
                module PodStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodStatusArgs()
                        member _.Run(_cargs_, _args_: PodStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: PodStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("containerStatuses")>]
                        member _.ContainerStatuses((_cargs_, _args_: PodStatusArgs), containerStatuses) =
                            _args_.ContainerStatuses <- inputList containerStatuses
                            _cargs_, _args_

                        [<CustomOperation("ephemeralContainerStatuses")>]
                        member _.EphemeralContainerStatuses((_cargs_, _args_: PodStatusArgs), ephemeralContainerStatuses) =
                            _args_.EphemeralContainerStatuses <- inputList ephemeralContainerStatuses
                            _cargs_, _args_

                        [<CustomOperation("hostIP")>]
                        member _.HostIP((_cargs_, _args_: PodStatusArgs), hostIP) =
                            _args_.HostIP <- input hostIP
                            _cargs_, _args_

                        member _.HostIP((_cargs_, _args_: PodStatusArgs), hostIP) =
                            _args_.HostIP <- io hostIP
                            _cargs_, _args_

                        [<CustomOperation("initContainerStatuses")>]
                        member _.InitContainerStatuses((_cargs_, _args_: PodStatusArgs), initContainerStatuses) =
                            _args_.InitContainerStatuses <- inputList initContainerStatuses
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: PodStatusArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: PodStatusArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("nominatedNodeName")>]
                        member _.NominatedNodeName((_cargs_, _args_: PodStatusArgs), nominatedNodeName) =
                            _args_.NominatedNodeName <- input nominatedNodeName
                            _cargs_, _args_

                        member _.NominatedNodeName((_cargs_, _args_: PodStatusArgs), nominatedNodeName) =
                            _args_.NominatedNodeName <- io nominatedNodeName
                            _cargs_, _args_

                        [<CustomOperation("phase")>]
                        member _.Phase((_cargs_, _args_: PodStatusArgs), phase) =
                            _args_.Phase <- input phase
                            _cargs_, _args_

                        member _.Phase((_cargs_, _args_: PodStatusArgs), phase) =
                            _args_.Phase <- io phase
                            _cargs_, _args_

                        [<CustomOperation("podIP")>]
                        member _.PodIP((_cargs_, _args_: PodStatusArgs), podIP) =
                            _args_.PodIP <- input podIP
                            _cargs_, _args_

                        member _.PodIP((_cargs_, _args_: PodStatusArgs), podIP) =
                            _args_.PodIP <- io podIP
                            _cargs_, _args_

                        [<CustomOperation("podIPs")>]
                        member _.PodIPs((_cargs_, _args_: PodStatusArgs), podIPs) =
                            _args_.PodIPs <- inputList podIPs
                            _cargs_, _args_

                        [<CustomOperation("qosClass")>]
                        member _.QosClass((_cargs_, _args_: PodStatusArgs), qosClass) =
                            _args_.QosClass <- input qosClass
                            _cargs_, _args_

                        member _.QosClass((_cargs_, _args_: PodStatusArgs), qosClass) =
                            _args_.QosClass <- io qosClass
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: PodStatusArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: PodStatusArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("startTime")>]
                        member _.StartTime((_cargs_, _args_: PodStatusArgs), startTime) =
                            _args_.StartTime <- input startTime
                            _cargs_, _args_

                        member _.StartTime((_cargs_, _args_: PodStatusArgs), startTime) =
                            _args_.StartTime <- io startTime
                            _cargs_, _args_

                    let podStatus = PodStatusBuilder()

                [<AutoOpen>]
                module PodTemplateSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PodTemplateSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodTemplateSpecArgs()
                        member _.Run(_cargs_, _args_: PodTemplateSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodTemplateSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("metadata")>]
                        member _.Metadata((_cargs_, _args_: PodTemplateSpecArgs), metadata) =
                            _args_.Metadata <- input metadata
                            _cargs_, _args_

                        [<CustomOperation("spec")>]
                        member _.Spec((_cargs_, _args_: PodTemplateSpecArgs), spec) =
                            _args_.Spec <- input spec
                            _cargs_, _args_

                    let podTemplateSpec = PodTemplateSpecBuilder()

                [<AutoOpen>]
                module PortworxVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PortworxVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PortworxVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: PortworxVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PortworxVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: PortworxVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: PortworxVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: PortworxVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: PortworxVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("volumeID")>]
                        member _.VolumeID((_cargs_, _args_: PortworxVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- input volumeID
                            _cargs_, _args_

                        member _.VolumeID((_cargs_, _args_: PortworxVolumeSourceArgs), volumeID) =
                            _args_.VolumeID <- io volumeID
                            _cargs_, _args_

                    let portworxVolumeSource = PortworxVolumeSourceBuilder()

                [<AutoOpen>]
                module PreferredSchedulingTerm =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type PreferredSchedulingTermBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PreferredSchedulingTermArgs()
                        member _.Run(_cargs_, _args_: PreferredSchedulingTermArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PreferredSchedulingTermArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("preference")>]
                        member _.Preference((_cargs_, _args_: PreferredSchedulingTermArgs), preference) =
                            _args_.Preference <- input preference
                            _cargs_, _args_

                        [<CustomOperation("weight")>]
                        member _.Weight((_cargs_, _args_: PreferredSchedulingTermArgs), weight) =
                            _args_.Weight <- input weight
                            _cargs_, _args_

                        member _.Weight((_cargs_, _args_: PreferredSchedulingTermArgs), weight) =
                            _args_.Weight <- io weight
                            _cargs_, _args_

                    let preferredSchedulingTerm = PreferredSchedulingTermBuilder()

                [<AutoOpen>]
                module Probe =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ProbeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ProbeArgs()
                        member _.Run(_cargs_, _args_: ProbeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ProbeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("exec")>]
                        member _.Exec((_cargs_, _args_: ProbeArgs), exec) =
                            _args_.Exec <- input exec
                            _cargs_, _args_

                        [<CustomOperation("failureThreshold")>]
                        member _.FailureThreshold((_cargs_, _args_: ProbeArgs), failureThreshold) =
                            _args_.FailureThreshold <- input failureThreshold
                            _cargs_, _args_

                        member _.FailureThreshold((_cargs_, _args_: ProbeArgs), failureThreshold) =
                            _args_.FailureThreshold <- io failureThreshold
                            _cargs_, _args_

                        [<CustomOperation("httpGet")>]
                        member _.HttpGet((_cargs_, _args_: ProbeArgs), httpGet) =
                            _args_.HttpGet <- input httpGet
                            _cargs_, _args_

                        [<CustomOperation("initialDelaySeconds")>]
                        member _.InitialDelaySeconds((_cargs_, _args_: ProbeArgs), initialDelaySeconds) =
                            _args_.InitialDelaySeconds <- input initialDelaySeconds
                            _cargs_, _args_

                        member _.InitialDelaySeconds((_cargs_, _args_: ProbeArgs), initialDelaySeconds) =
                            _args_.InitialDelaySeconds <- io initialDelaySeconds
                            _cargs_, _args_

                        [<CustomOperation("periodSeconds")>]
                        member _.PeriodSeconds((_cargs_, _args_: ProbeArgs), periodSeconds) =
                            _args_.PeriodSeconds <- input periodSeconds
                            _cargs_, _args_

                        member _.PeriodSeconds((_cargs_, _args_: ProbeArgs), periodSeconds) =
                            _args_.PeriodSeconds <- io periodSeconds
                            _cargs_, _args_

                        [<CustomOperation("successThreshold")>]
                        member _.SuccessThreshold((_cargs_, _args_: ProbeArgs), successThreshold) =
                            _args_.SuccessThreshold <- input successThreshold
                            _cargs_, _args_

                        member _.SuccessThreshold((_cargs_, _args_: ProbeArgs), successThreshold) =
                            _args_.SuccessThreshold <- io successThreshold
                            _cargs_, _args_

                        [<CustomOperation("tcpSocket")>]
                        member _.TcpSocket((_cargs_, _args_: ProbeArgs), tcpSocket) =
                            _args_.TcpSocket <- input tcpSocket
                            _cargs_, _args_

                        [<CustomOperation("timeoutSeconds")>]
                        member _.TimeoutSeconds((_cargs_, _args_: ProbeArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- input timeoutSeconds
                            _cargs_, _args_

                        member _.TimeoutSeconds((_cargs_, _args_: ProbeArgs), timeoutSeconds) =
                            _args_.TimeoutSeconds <- io timeoutSeconds
                            _cargs_, _args_

                    let probe = ProbeBuilder()

                [<AutoOpen>]
                module ProjectedVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ProjectedVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ProjectedVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ProjectedVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ProjectedVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("defaultMode")>]
                        member _.DefaultMode((_cargs_, _args_: ProjectedVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- input defaultMode
                            _cargs_, _args_

                        member _.DefaultMode((_cargs_, _args_: ProjectedVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- io defaultMode
                            _cargs_, _args_

                        [<CustomOperation("sources")>]
                        member _.Sources((_cargs_, _args_: ProjectedVolumeSourceArgs), sources) =
                            _args_.Sources <- inputList sources
                            _cargs_, _args_

                    let projectedVolumeSource = ProjectedVolumeSourceBuilder()

                [<AutoOpen>]
                module QuobyteVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type QuobyteVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, QuobyteVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: QuobyteVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: QuobyteVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: QuobyteVolumeSourceArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: QuobyteVolumeSourceArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: QuobyteVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: QuobyteVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("registry")>]
                        member _.Registry((_cargs_, _args_: QuobyteVolumeSourceArgs), registry) =
                            _args_.Registry <- input registry
                            _cargs_, _args_

                        member _.Registry((_cargs_, _args_: QuobyteVolumeSourceArgs), registry) =
                            _args_.Registry <- io registry
                            _cargs_, _args_

                        [<CustomOperation("tenant")>]
                        member _.Tenant((_cargs_, _args_: QuobyteVolumeSourceArgs), tenant) =
                            _args_.Tenant <- input tenant
                            _cargs_, _args_

                        member _.Tenant((_cargs_, _args_: QuobyteVolumeSourceArgs), tenant) =
                            _args_.Tenant <- io tenant
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: QuobyteVolumeSourceArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: QuobyteVolumeSourceArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                        [<CustomOperation("volume")>]
                        member _.Volume((_cargs_, _args_: QuobyteVolumeSourceArgs), volume) =
                            _args_.Volume <- input volume
                            _cargs_, _args_

                        member _.Volume((_cargs_, _args_: QuobyteVolumeSourceArgs), volume) =
                            _args_.Volume <- io volume
                            _cargs_, _args_

                    let quobyteVolumeSource = QuobyteVolumeSourceBuilder()

                [<AutoOpen>]
                module RBDPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type RBDPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RBDPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: RBDPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RBDPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: RBDPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: RBDPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("image")>]
                        member _.Image((_cargs_, _args_: RBDPersistentVolumeSourceArgs), image) =
                            _args_.Image <- input image
                            _cargs_, _args_

                        member _.Image((_cargs_, _args_: RBDPersistentVolumeSourceArgs), image) =
                            _args_.Image <- io image
                            _cargs_, _args_

                        [<CustomOperation("keyring")>]
                        member _.Keyring((_cargs_, _args_: RBDPersistentVolumeSourceArgs), keyring) =
                            _args_.Keyring <- input keyring
                            _cargs_, _args_

                        member _.Keyring((_cargs_, _args_: RBDPersistentVolumeSourceArgs), keyring) =
                            _args_.Keyring <- io keyring
                            _cargs_, _args_

                        [<CustomOperation("monitors")>]
                        member _.Monitors((_cargs_, _args_: RBDPersistentVolumeSourceArgs), monitors) =
                            _args_.Monitors <- inputList monitors
                            _cargs_, _args_

                        [<CustomOperation("pool")>]
                        member _.Pool((_cargs_, _args_: RBDPersistentVolumeSourceArgs), pool) =
                            _args_.Pool <- input pool
                            _cargs_, _args_

                        member _.Pool((_cargs_, _args_: RBDPersistentVolumeSourceArgs), pool) =
                            _args_.Pool <- io pool
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: RBDPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: RBDPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: RBDPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: RBDPersistentVolumeSourceArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: RBDPersistentVolumeSourceArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let rBDPersistentVolumeSource = RBDPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module RBDVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type RBDVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RBDVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: RBDVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RBDVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: RBDVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: RBDVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("image")>]
                        member _.Image((_cargs_, _args_: RBDVolumeSourceArgs), image) =
                            _args_.Image <- input image
                            _cargs_, _args_

                        member _.Image((_cargs_, _args_: RBDVolumeSourceArgs), image) =
                            _args_.Image <- io image
                            _cargs_, _args_

                        [<CustomOperation("keyring")>]
                        member _.Keyring((_cargs_, _args_: RBDVolumeSourceArgs), keyring) =
                            _args_.Keyring <- input keyring
                            _cargs_, _args_

                        member _.Keyring((_cargs_, _args_: RBDVolumeSourceArgs), keyring) =
                            _args_.Keyring <- io keyring
                            _cargs_, _args_

                        [<CustomOperation("monitors")>]
                        member _.Monitors((_cargs_, _args_: RBDVolumeSourceArgs), monitors) =
                            _args_.Monitors <- inputList monitors
                            _cargs_, _args_

                        [<CustomOperation("pool")>]
                        member _.Pool((_cargs_, _args_: RBDVolumeSourceArgs), pool) =
                            _args_.Pool <- input pool
                            _cargs_, _args_

                        member _.Pool((_cargs_, _args_: RBDVolumeSourceArgs), pool) =
                            _args_.Pool <- io pool
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: RBDVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: RBDVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: RBDVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: RBDVolumeSourceArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: RBDVolumeSourceArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let rBDVolumeSource = RBDVolumeSourceBuilder()

                [<AutoOpen>]
                module ReplicationControllerCondition =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ReplicationControllerConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicationControllerConditionArgs()
                        member _.Run(_cargs_, _args_: ReplicationControllerConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicationControllerConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: ReplicationControllerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: ReplicationControllerConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ReplicationControllerConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ReplicationControllerConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ReplicationControllerConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ReplicationControllerConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: ReplicationControllerConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: ReplicationControllerConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ReplicationControllerConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ReplicationControllerConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let replicationControllerCondition = ReplicationControllerConditionBuilder()

                [<AutoOpen>]
                module ReplicationControllerSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ReplicationControllerSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicationControllerSpecArgs()
                        member _.Run(_cargs_, _args_: ReplicationControllerSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicationControllerSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: ReplicationControllerSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: ReplicationControllerSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicationControllerSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicationControllerSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ReplicationControllerSpecArgs), selector) =
                            _args_.Selector <- inputMap selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: ReplicationControllerSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let replicationControllerSpec = ReplicationControllerSpecBuilder()

                [<AutoOpen>]
                module ReplicationControllerStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ReplicationControllerStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicationControllerStatusArgs()
                        member _.Run(_cargs_, _args_: ReplicationControllerStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicationControllerStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: ReplicationControllerStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: ReplicationControllerStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: ReplicationControllerStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("fullyLabeledReplicas")>]
                        member _.FullyLabeledReplicas(
                            (_cargs_, _args_: ReplicationControllerStatusArgs),
                            fullyLabeledReplicas)
                            =
                            _args_.FullyLabeledReplicas <- input fullyLabeledReplicas
                            _cargs_, _args_

                        member _.FullyLabeledReplicas(
                            (_cargs_, _args_: ReplicationControllerStatusArgs),
                            fullyLabeledReplicas)
                            =
                            _args_.FullyLabeledReplicas <- io fullyLabeledReplicas
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration(
                            (_cargs_, _args_: ReplicationControllerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration(
                            (_cargs_, _args_: ReplicationControllerStatusArgs),
                            observedGeneration)
                            =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: ReplicationControllerStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: ReplicationControllerStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicationControllerStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicationControllerStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                    let replicationControllerStatus = ReplicationControllerStatusBuilder()

                [<AutoOpen>]
                module ResourceFieldSelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ResourceFieldSelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceFieldSelectorArgs()
                        member _.Run(_cargs_, _args_: ResourceFieldSelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceFieldSelectorArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("containerName")>]
                        member _.ContainerName((_cargs_, _args_: ResourceFieldSelectorArgs), containerName) =
                            _args_.ContainerName <- input containerName
                            _cargs_, _args_

                        member _.ContainerName((_cargs_, _args_: ResourceFieldSelectorArgs), containerName) =
                            _args_.ContainerName <- io containerName
                            _cargs_, _args_

                        [<CustomOperation("divisor")>]
                        member _.Divisor((_cargs_, _args_: ResourceFieldSelectorArgs), divisor) =
                            _args_.Divisor <- input divisor
                            _cargs_, _args_

                        member _.Divisor((_cargs_, _args_: ResourceFieldSelectorArgs), divisor) =
                            _args_.Divisor <- io divisor
                            _cargs_, _args_

                        [<CustomOperation("resource")>]
                        member _.Resource((_cargs_, _args_: ResourceFieldSelectorArgs), resource) =
                            _args_.Resource <- input resource
                            _cargs_, _args_

                        member _.Resource((_cargs_, _args_: ResourceFieldSelectorArgs), resource) =
                            _args_.Resource <- io resource
                            _cargs_, _args_

                    let resourceFieldSelector = ResourceFieldSelectorBuilder()

                [<AutoOpen>]
                module ResourceQuotaSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ResourceQuotaSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceQuotaSpecArgs()
                        member _.Run(_cargs_, _args_: ResourceQuotaSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceQuotaSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hard")>]
                        member _.Hard((_cargs_, _args_: ResourceQuotaSpecArgs), hard) =
                            _args_.Hard <- inputMap hard
                            _cargs_, _args_

                        [<CustomOperation("scopeSelector")>]
                        member _.ScopeSelector((_cargs_, _args_: ResourceQuotaSpecArgs), scopeSelector) =
                            _args_.ScopeSelector <- input scopeSelector
                            _cargs_, _args_

                        [<CustomOperation("scopes")>]
                        member _.Scopes((_cargs_, _args_: ResourceQuotaSpecArgs), scopes) =
                            _args_.Scopes <- inputList scopes
                            _cargs_, _args_

                    let resourceQuotaSpec = ResourceQuotaSpecBuilder()

                [<AutoOpen>]
                module ResourceQuotaStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ResourceQuotaStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceQuotaStatusArgs()
                        member _.Run(_cargs_, _args_: ResourceQuotaStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceQuotaStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hard")>]
                        member _.Hard((_cargs_, _args_: ResourceQuotaStatusArgs), hard) =
                            _args_.Hard <- inputMap hard
                            _cargs_, _args_

                        [<CustomOperation("used")>]
                        member _.Used((_cargs_, _args_: ResourceQuotaStatusArgs), used) =
                            _args_.Used <- inputMap used
                            _cargs_, _args_

                    let resourceQuotaStatus = ResourceQuotaStatusBuilder()

                [<AutoOpen>]
                module ResourceRequirements =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ResourceRequirementsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourceRequirementsArgs()
                        member _.Run(_cargs_, _args_: ResourceRequirementsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourceRequirementsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("limits")>]
                        member _.Limits((_cargs_, _args_: ResourceRequirementsArgs), limits) =
                            _args_.Limits <- inputMap limits
                            _cargs_, _args_

                        [<CustomOperation("requests")>]
                        member _.Requests((_cargs_, _args_: ResourceRequirementsArgs), requests) =
                            _args_.Requests <- inputMap requests
                            _cargs_, _args_

                    let resourceRequirements = ResourceRequirementsBuilder()

                [<AutoOpen>]
                module SELinuxOptions =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SELinuxOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SELinuxOptionsArgs()
                        member _.Run(_cargs_, _args_: SELinuxOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SELinuxOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("level")>]
                        member _.Level((_cargs_, _args_: SELinuxOptionsArgs), level) =
                            _args_.Level <- input level
                            _cargs_, _args_

                        member _.Level((_cargs_, _args_: SELinuxOptionsArgs), level) =
                            _args_.Level <- io level
                            _cargs_, _args_

                        [<CustomOperation("role")>]
                        member _.Role((_cargs_, _args_: SELinuxOptionsArgs), role) =
                            _args_.Role <- input role
                            _cargs_, _args_

                        member _.Role((_cargs_, _args_: SELinuxOptionsArgs), role) =
                            _args_.Role <- io role
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: SELinuxOptionsArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: SELinuxOptionsArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: SELinuxOptionsArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                        member _.User((_cargs_, _args_: SELinuxOptionsArgs), user) =
                            _args_.User <- io user
                            _cargs_, _args_

                    let sELinuxOptions = SELinuxOptionsBuilder()

                [<AutoOpen>]
                module ScaleIOPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ScaleIOPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ScaleIOPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("gateway")>]
                        member _.Gateway((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), gateway) =
                            _args_.Gateway <- input gateway
                            _cargs_, _args_

                        member _.Gateway((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), gateway) =
                            _args_.Gateway <- io gateway
                            _cargs_, _args_

                        [<CustomOperation("protectionDomain")>]
                        member _.ProtectionDomain((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), protectionDomain) =
                            _args_.ProtectionDomain <- input protectionDomain
                            _cargs_, _args_

                        member _.ProtectionDomain((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), protectionDomain) =
                            _args_.ProtectionDomain <- io protectionDomain
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("sslEnabled")>]
                        member _.SslEnabled((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), sslEnabled) =
                            _args_.SslEnabled <- input sslEnabled
                            _cargs_, _args_

                        member _.SslEnabled((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), sslEnabled) =
                            _args_.SslEnabled <- io sslEnabled
                            _cargs_, _args_

                        [<CustomOperation("storageMode")>]
                        member _.StorageMode((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), storageMode) =
                            _args_.StorageMode <- input storageMode
                            _cargs_, _args_

                        member _.StorageMode((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), storageMode) =
                            _args_.StorageMode <- io storageMode
                            _cargs_, _args_

                        [<CustomOperation("storagePool")>]
                        member _.StoragePool((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), storagePool) =
                            _args_.StoragePool <- input storagePool
                            _cargs_, _args_

                        member _.StoragePool((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), storagePool) =
                            _args_.StoragePool <- io storagePool
                            _cargs_, _args_

                        [<CustomOperation("system")>]
                        member _.System((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), system) =
                            _args_.System <- input system
                            _cargs_, _args_

                        member _.System((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), system) =
                            _args_.System <- io system
                            _cargs_, _args_

                        [<CustomOperation("volumeName")>]
                        member _.VolumeName((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- input volumeName
                            _cargs_, _args_

                        member _.VolumeName((_cargs_, _args_: ScaleIOPersistentVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- io volumeName
                            _cargs_, _args_

                    let scaleIOPersistentVolumeSource = ScaleIOPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module ScaleIOVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ScaleIOVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ScaleIOVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: ScaleIOVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ScaleIOVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: ScaleIOVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: ScaleIOVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("gateway")>]
                        member _.Gateway((_cargs_, _args_: ScaleIOVolumeSourceArgs), gateway) =
                            _args_.Gateway <- input gateway
                            _cargs_, _args_

                        member _.Gateway((_cargs_, _args_: ScaleIOVolumeSourceArgs), gateway) =
                            _args_.Gateway <- io gateway
                            _cargs_, _args_

                        [<CustomOperation("protectionDomain")>]
                        member _.ProtectionDomain((_cargs_, _args_: ScaleIOVolumeSourceArgs), protectionDomain) =
                            _args_.ProtectionDomain <- input protectionDomain
                            _cargs_, _args_

                        member _.ProtectionDomain((_cargs_, _args_: ScaleIOVolumeSourceArgs), protectionDomain) =
                            _args_.ProtectionDomain <- io protectionDomain
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: ScaleIOVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: ScaleIOVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: ScaleIOVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("sslEnabled")>]
                        member _.SslEnabled((_cargs_, _args_: ScaleIOVolumeSourceArgs), sslEnabled) =
                            _args_.SslEnabled <- input sslEnabled
                            _cargs_, _args_

                        member _.SslEnabled((_cargs_, _args_: ScaleIOVolumeSourceArgs), sslEnabled) =
                            _args_.SslEnabled <- io sslEnabled
                            _cargs_, _args_

                        [<CustomOperation("storageMode")>]
                        member _.StorageMode((_cargs_, _args_: ScaleIOVolumeSourceArgs), storageMode) =
                            _args_.StorageMode <- input storageMode
                            _cargs_, _args_

                        member _.StorageMode((_cargs_, _args_: ScaleIOVolumeSourceArgs), storageMode) =
                            _args_.StorageMode <- io storageMode
                            _cargs_, _args_

                        [<CustomOperation("storagePool")>]
                        member _.StoragePool((_cargs_, _args_: ScaleIOVolumeSourceArgs), storagePool) =
                            _args_.StoragePool <- input storagePool
                            _cargs_, _args_

                        member _.StoragePool((_cargs_, _args_: ScaleIOVolumeSourceArgs), storagePool) =
                            _args_.StoragePool <- io storagePool
                            _cargs_, _args_

                        [<CustomOperation("system")>]
                        member _.System((_cargs_, _args_: ScaleIOVolumeSourceArgs), system) =
                            _args_.System <- input system
                            _cargs_, _args_

                        member _.System((_cargs_, _args_: ScaleIOVolumeSourceArgs), system) =
                            _args_.System <- io system
                            _cargs_, _args_

                        [<CustomOperation("volumeName")>]
                        member _.VolumeName((_cargs_, _args_: ScaleIOVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- input volumeName
                            _cargs_, _args_

                        member _.VolumeName((_cargs_, _args_: ScaleIOVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- io volumeName
                            _cargs_, _args_

                    let scaleIOVolumeSource = ScaleIOVolumeSourceBuilder()

                [<AutoOpen>]
                module ScopeSelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ScopeSelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ScopeSelectorArgs()
                        member _.Run(_cargs_, _args_: ScopeSelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ScopeSelectorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("matchExpressions")>]
                        member _.MatchExpressions((_cargs_, _args_: ScopeSelectorArgs), matchExpressions) =
                            _args_.MatchExpressions <- inputList matchExpressions
                            _cargs_, _args_

                    let scopeSelector = ScopeSelectorBuilder()

                [<AutoOpen>]
                module ScopedResourceSelectorRequirement =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ScopedResourceSelectorRequirementBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ScopedResourceSelectorRequirementArgs()
                        member _.Run(_cargs_, _args_: ScopedResourceSelectorRequirementArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("operator")>]
                        member _.Operator((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), operator) =
                            _args_.Operator <- input operator
                            _cargs_, _args_

                        member _.Operator((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), operator) =
                            _args_.Operator <- io operator
                            _cargs_, _args_

                        [<CustomOperation("scopeName")>]
                        member _.ScopeName((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), scopeName) =
                            _args_.ScopeName <- input scopeName
                            _cargs_, _args_

                        member _.ScopeName((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), scopeName) =
                            _args_.ScopeName <- io scopeName
                            _cargs_, _args_

                        [<CustomOperation("values")>]
                        member _.Values((_cargs_, _args_: ScopedResourceSelectorRequirementArgs), values) =
                            _args_.Values <- inputList values
                            _cargs_, _args_

                    let scopedResourceSelectorRequirement =
                        ScopedResourceSelectorRequirementBuilder()

                [<AutoOpen>]
                module SecretEnvSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecretEnvSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecretEnvSourceArgs()
                        member _.Run(_cargs_, _args_: SecretEnvSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecretEnvSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SecretEnvSourceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SecretEnvSourceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: SecretEnvSourceArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: SecretEnvSourceArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let secretEnvSource = SecretEnvSourceBuilder()

                [<AutoOpen>]
                module SecretKeySelector =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecretKeySelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecretKeySelectorArgs()
                        member _.Run(_cargs_, _args_: SecretKeySelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecretKeySelectorArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: SecretKeySelectorArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: SecretKeySelectorArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SecretKeySelectorArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SecretKeySelectorArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: SecretKeySelectorArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: SecretKeySelectorArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let secretKeySelector = SecretKeySelectorBuilder()

                [<AutoOpen>]
                module SecretProjection =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecretProjectionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecretProjectionArgs()
                        member _.Run(_cargs_, _args_: SecretProjectionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecretProjectionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: SecretProjectionArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SecretProjectionArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SecretProjectionArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: SecretProjectionArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: SecretProjectionArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                    let secretProjection = SecretProjectionBuilder()

                [<AutoOpen>]
                module SecretReference =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecretReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecretReferenceArgs()
                        member _.Run(_cargs_, _args_: SecretReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecretReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SecretReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SecretReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SecretReferenceArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SecretReferenceArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let secretReference = SecretReferenceBuilder()

                [<AutoOpen>]
                module SecretVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecretVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecretVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: SecretVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecretVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("defaultMode")>]
                        member _.DefaultMode((_cargs_, _args_: SecretVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- input defaultMode
                            _cargs_, _args_

                        member _.DefaultMode((_cargs_, _args_: SecretVolumeSourceArgs), defaultMode) =
                            _args_.DefaultMode <- io defaultMode
                            _cargs_, _args_

                        [<CustomOperation("items")>]
                        member _.Items((_cargs_, _args_: SecretVolumeSourceArgs), items) =
                            _args_.Items <- inputList items
                            _cargs_, _args_

                        [<CustomOperation("optional")>]
                        member _.Optional((_cargs_, _args_: SecretVolumeSourceArgs), optional) =
                            _args_.Optional <- input optional
                            _cargs_, _args_

                        member _.Optional((_cargs_, _args_: SecretVolumeSourceArgs), optional) =
                            _args_.Optional <- io optional
                            _cargs_, _args_

                        [<CustomOperation("secretName")>]
                        member _.SecretName((_cargs_, _args_: SecretVolumeSourceArgs), secretName) =
                            _args_.SecretName <- input secretName
                            _cargs_, _args_

                        member _.SecretName((_cargs_, _args_: SecretVolumeSourceArgs), secretName) =
                            _args_.SecretName <- io secretName
                            _cargs_, _args_

                    let secretVolumeSource = SecretVolumeSourceBuilder()

                [<AutoOpen>]
                module SecurityContext =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SecurityContextBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SecurityContextArgs()
                        member _.Run(_cargs_, _args_: SecurityContextArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SecurityContextArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allowPrivilegeEscalation")>]
                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: SecurityContextArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- input allowPrivilegeEscalation
                            _cargs_, _args_

                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: SecurityContextArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- io allowPrivilegeEscalation
                            _cargs_, _args_

                        [<CustomOperation("capabilities")>]
                        member _.Capabilities((_cargs_, _args_: SecurityContextArgs), capabilities) =
                            _args_.Capabilities <- input capabilities
                            _cargs_, _args_

                        [<CustomOperation("privileged")>]
                        member _.Privileged((_cargs_, _args_: SecurityContextArgs), privileged) =
                            _args_.Privileged <- input privileged
                            _cargs_, _args_

                        member _.Privileged((_cargs_, _args_: SecurityContextArgs), privileged) =
                            _args_.Privileged <- io privileged
                            _cargs_, _args_

                        [<CustomOperation("procMount")>]
                        member _.ProcMount((_cargs_, _args_: SecurityContextArgs), procMount) =
                            _args_.ProcMount <- input procMount
                            _cargs_, _args_

                        member _.ProcMount((_cargs_, _args_: SecurityContextArgs), procMount) =
                            _args_.ProcMount <- io procMount
                            _cargs_, _args_

                        [<CustomOperation("readOnlyRootFilesystem")>]
                        member _.ReadOnlyRootFilesystem((_cargs_, _args_: SecurityContextArgs), readOnlyRootFilesystem) =
                            _args_.ReadOnlyRootFilesystem <- input readOnlyRootFilesystem
                            _cargs_, _args_

                        member _.ReadOnlyRootFilesystem((_cargs_, _args_: SecurityContextArgs), readOnlyRootFilesystem) =
                            _args_.ReadOnlyRootFilesystem <- io readOnlyRootFilesystem
                            _cargs_, _args_

                        [<CustomOperation("runAsGroup")>]
                        member _.RunAsGroup((_cargs_, _args_: SecurityContextArgs), runAsGroup) =
                            _args_.RunAsGroup <- input runAsGroup
                            _cargs_, _args_

                        member _.RunAsGroup((_cargs_, _args_: SecurityContextArgs), runAsGroup) =
                            _args_.RunAsGroup <- io runAsGroup
                            _cargs_, _args_

                        [<CustomOperation("runAsNonRoot")>]
                        member _.RunAsNonRoot((_cargs_, _args_: SecurityContextArgs), runAsNonRoot) =
                            _args_.RunAsNonRoot <- input runAsNonRoot
                            _cargs_, _args_

                        member _.RunAsNonRoot((_cargs_, _args_: SecurityContextArgs), runAsNonRoot) =
                            _args_.RunAsNonRoot <- io runAsNonRoot
                            _cargs_, _args_

                        [<CustomOperation("runAsUser")>]
                        member _.RunAsUser((_cargs_, _args_: SecurityContextArgs), runAsUser) =
                            _args_.RunAsUser <- input runAsUser
                            _cargs_, _args_

                        member _.RunAsUser((_cargs_, _args_: SecurityContextArgs), runAsUser) =
                            _args_.RunAsUser <- io runAsUser
                            _cargs_, _args_

                        [<CustomOperation("seLinuxOptions")>]
                        member _.SeLinuxOptions((_cargs_, _args_: SecurityContextArgs), seLinuxOptions) =
                            _args_.SeLinuxOptions <- input seLinuxOptions
                            _cargs_, _args_

                        [<CustomOperation("windowsOptions")>]
                        member _.WindowsOptions((_cargs_, _args_: SecurityContextArgs), windowsOptions) =
                            _args_.WindowsOptions <- input windowsOptions
                            _cargs_, _args_

                    let securityContext = SecurityContextBuilder()

                [<AutoOpen>]
                module ServiceAccountTokenProjection =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ServiceAccountTokenProjectionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceAccountTokenProjectionArgs()
                        member _.Run(_cargs_, _args_: ServiceAccountTokenProjectionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceAccountTokenProjectionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("audience")>]
                        member _.Audience((_cargs_, _args_: ServiceAccountTokenProjectionArgs), audience) =
                            _args_.Audience <- input audience
                            _cargs_, _args_

                        member _.Audience((_cargs_, _args_: ServiceAccountTokenProjectionArgs), audience) =
                            _args_.Audience <- io audience
                            _cargs_, _args_

                        [<CustomOperation("expirationSeconds")>]
                        member _.ExpirationSeconds(
                            (_cargs_, _args_: ServiceAccountTokenProjectionArgs),
                            expirationSeconds)
                            =
                            _args_.ExpirationSeconds <- input expirationSeconds
                            _cargs_, _args_

                        member _.ExpirationSeconds(
                            (_cargs_, _args_: ServiceAccountTokenProjectionArgs),
                            expirationSeconds)
                            =
                            _args_.ExpirationSeconds <- io expirationSeconds
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: ServiceAccountTokenProjectionArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: ServiceAccountTokenProjectionArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                    let serviceAccountTokenProjection = ServiceAccountTokenProjectionBuilder()

                [<AutoOpen>]
                module ServiceSpec =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ServiceSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceSpecArgs()
                        member _.Run(_cargs_, _args_: ServiceSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clusterIP")>]
                        member _.ClusterIP((_cargs_, _args_: ServiceSpecArgs), clusterIP) =
                            _args_.ClusterIP <- input clusterIP
                            _cargs_, _args_

                        member _.ClusterIP((_cargs_, _args_: ServiceSpecArgs), clusterIP) =
                            _args_.ClusterIP <- io clusterIP
                            _cargs_, _args_

                        [<CustomOperation("externalIPs")>]
                        member _.ExternalIPs((_cargs_, _args_: ServiceSpecArgs), externalIPs) =
                            _args_.ExternalIPs <- inputList externalIPs
                            _cargs_, _args_

                        [<CustomOperation("externalName")>]
                        member _.ExternalName((_cargs_, _args_: ServiceSpecArgs), externalName) =
                            _args_.ExternalName <- input externalName
                            _cargs_, _args_

                        member _.ExternalName((_cargs_, _args_: ServiceSpecArgs), externalName) =
                            _args_.ExternalName <- io externalName
                            _cargs_, _args_

                        [<CustomOperation("externalTrafficPolicy")>]
                        member _.ExternalTrafficPolicy((_cargs_, _args_: ServiceSpecArgs), externalTrafficPolicy) =
                            _args_.ExternalTrafficPolicy <- input externalTrafficPolicy
                            _cargs_, _args_

                        member _.ExternalTrafficPolicy((_cargs_, _args_: ServiceSpecArgs), externalTrafficPolicy) =
                            _args_.ExternalTrafficPolicy <- io externalTrafficPolicy
                            _cargs_, _args_

                        [<CustomOperation("healthCheckNodePort")>]
                        member _.HealthCheckNodePort((_cargs_, _args_: ServiceSpecArgs), healthCheckNodePort) =
                            _args_.HealthCheckNodePort <- input healthCheckNodePort
                            _cargs_, _args_

                        member _.HealthCheckNodePort((_cargs_, _args_: ServiceSpecArgs), healthCheckNodePort) =
                            _args_.HealthCheckNodePort <- io healthCheckNodePort
                            _cargs_, _args_

                        [<CustomOperation("ipFamily")>]
                        member _.IpFamily((_cargs_, _args_: ServiceSpecArgs), ipFamily) =
                            _args_.IpFamily <- input ipFamily
                            _cargs_, _args_

                        member _.IpFamily((_cargs_, _args_: ServiceSpecArgs), ipFamily) =
                            _args_.IpFamily <- io ipFamily
                            _cargs_, _args_

                        [<CustomOperation("loadBalancerIP")>]
                        member _.LoadBalancerIP((_cargs_, _args_: ServiceSpecArgs), loadBalancerIP) =
                            _args_.LoadBalancerIP <- input loadBalancerIP
                            _cargs_, _args_

                        member _.LoadBalancerIP((_cargs_, _args_: ServiceSpecArgs), loadBalancerIP) =
                            _args_.LoadBalancerIP <- io loadBalancerIP
                            _cargs_, _args_

                        [<CustomOperation("loadBalancerSourceRanges")>]
                        member _.LoadBalancerSourceRanges((_cargs_, _args_: ServiceSpecArgs), loadBalancerSourceRanges) =
                            _args_.LoadBalancerSourceRanges <- inputList loadBalancerSourceRanges
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: ServiceSpecArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                        [<CustomOperation("publishNotReadyAddresses")>]
                        member _.PublishNotReadyAddresses((_cargs_, _args_: ServiceSpecArgs), publishNotReadyAddresses) =
                            _args_.PublishNotReadyAddresses <- input publishNotReadyAddresses
                            _cargs_, _args_

                        member _.PublishNotReadyAddresses((_cargs_, _args_: ServiceSpecArgs), publishNotReadyAddresses) =
                            _args_.PublishNotReadyAddresses <- io publishNotReadyAddresses
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ServiceSpecArgs), selector) =
                            _args_.Selector <- inputMap selector
                            _cargs_, _args_

                        [<CustomOperation("sessionAffinity")>]
                        member _.SessionAffinity((_cargs_, _args_: ServiceSpecArgs), sessionAffinity) =
                            _args_.SessionAffinity <- input sessionAffinity
                            _cargs_, _args_

                        member _.SessionAffinity((_cargs_, _args_: ServiceSpecArgs), sessionAffinity) =
                            _args_.SessionAffinity <- io sessionAffinity
                            _cargs_, _args_

                        [<CustomOperation("sessionAffinityConfig")>]
                        member _.SessionAffinityConfig((_cargs_, _args_: ServiceSpecArgs), sessionAffinityConfig) =
                            _args_.SessionAffinityConfig <- input sessionAffinityConfig
                            _cargs_, _args_

                        [<CustomOperation("topologyKeys")>]
                        member _.TopologyKeys((_cargs_, _args_: ServiceSpecArgs), topologyKeys) =
                            _args_.TopologyKeys <- inputList topologyKeys
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ServiceSpecArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ServiceSpecArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let serviceSpec = ServiceSpecBuilder()

                [<AutoOpen>]
                module ServiceStatus =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type ServiceStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceStatusArgs()
                        member _.Run(_cargs_, _args_: ServiceStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("loadBalancer")>]
                        member _.LoadBalancer((_cargs_, _args_: ServiceStatusArgs), loadBalancer) =
                            _args_.LoadBalancer <- input loadBalancer
                            _cargs_, _args_

                    let serviceStatus = ServiceStatusBuilder()

                [<AutoOpen>]
                module SessionAffinityConfig =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SessionAffinityConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SessionAffinityConfigArgs()
                        member _.Run(_cargs_, _args_: SessionAffinityConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SessionAffinityConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clientIP")>]
                        member _.ClientIP((_cargs_, _args_: SessionAffinityConfigArgs), clientIP) =
                            _args_.ClientIP <- input clientIP
                            _cargs_, _args_

                    let sessionAffinityConfig = SessionAffinityConfigBuilder()

                [<AutoOpen>]
                module StorageOSPersistentVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type StorageOSPersistentVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StorageOSPersistentVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: StorageOSPersistentVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("volumeName")>]
                        member _.VolumeName((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- input volumeName
                            _cargs_, _args_

                        member _.VolumeName((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- io volumeName
                            _cargs_, _args_

                        [<CustomOperation("volumeNamespace")>]
                        member _.VolumeNamespace((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), volumeNamespace) =
                            _args_.VolumeNamespace <- input volumeNamespace
                            _cargs_, _args_

                        member _.VolumeNamespace((_cargs_, _args_: StorageOSPersistentVolumeSourceArgs), volumeNamespace) =
                            _args_.VolumeNamespace <- io volumeNamespace
                            _cargs_, _args_

                    let storageOSPersistentVolumeSource = StorageOSPersistentVolumeSourceBuilder()

                [<AutoOpen>]
                module StorageOSVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type StorageOSVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StorageOSVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: StorageOSVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StorageOSVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: StorageOSVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: StorageOSVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: StorageOSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: StorageOSVolumeSourceArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("secretRef")>]
                        member _.SecretRef((_cargs_, _args_: StorageOSVolumeSourceArgs), secretRef) =
                            _args_.SecretRef <- input secretRef
                            _cargs_, _args_

                        [<CustomOperation("volumeName")>]
                        member _.VolumeName((_cargs_, _args_: StorageOSVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- input volumeName
                            _cargs_, _args_

                        member _.VolumeName((_cargs_, _args_: StorageOSVolumeSourceArgs), volumeName) =
                            _args_.VolumeName <- io volumeName
                            _cargs_, _args_

                        [<CustomOperation("volumeNamespace")>]
                        member _.VolumeNamespace((_cargs_, _args_: StorageOSVolumeSourceArgs), volumeNamespace) =
                            _args_.VolumeNamespace <- input volumeNamespace
                            _cargs_, _args_

                        member _.VolumeNamespace((_cargs_, _args_: StorageOSVolumeSourceArgs), volumeNamespace) =
                            _args_.VolumeNamespace <- io volumeNamespace
                            _cargs_, _args_

                    let storageOSVolumeSource = StorageOSVolumeSourceBuilder()

                [<AutoOpen>]
                module Sysctl =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type SysctlBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SysctlArgs()
                        member _.Run(_cargs_, _args_: SysctlArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SysctlArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SysctlArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SysctlArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: SysctlArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: SysctlArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let sysctl = SysctlBuilder()

                [<AutoOpen>]
                module Taint =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TaintBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TaintArgs()
                        member _.Run(_cargs_, _args_: TaintArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TaintArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("effect")>]
                        member _.Effect((_cargs_, _args_: TaintArgs), effect) =
                            _args_.Effect <- input effect
                            _cargs_, _args_

                        member _.Effect((_cargs_, _args_: TaintArgs), effect) =
                            _args_.Effect <- io effect
                            _cargs_, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: TaintArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: TaintArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("timeAdded")>]
                        member _.TimeAdded((_cargs_, _args_: TaintArgs), timeAdded) =
                            _args_.TimeAdded <- input timeAdded
                            _cargs_, _args_

                        member _.TimeAdded((_cargs_, _args_: TaintArgs), timeAdded) =
                            _args_.TimeAdded <- io timeAdded
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: TaintArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: TaintArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let taint = TaintBuilder()

                [<AutoOpen>]
                module Toleration =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TolerationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TolerationArgs()
                        member _.Run(_cargs_, _args_: TolerationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TolerationArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("effect")>]
                        member _.Effect((_cargs_, _args_: TolerationArgs), effect) =
                            _args_.Effect <- input effect
                            _cargs_, _args_

                        member _.Effect((_cargs_, _args_: TolerationArgs), effect) =
                            _args_.Effect <- io effect
                            _cargs_, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: TolerationArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: TolerationArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("operator")>]
                        member _.Operator((_cargs_, _args_: TolerationArgs), operator) =
                            _args_.Operator <- input operator
                            _cargs_, _args_

                        member _.Operator((_cargs_, _args_: TolerationArgs), operator) =
                            _args_.Operator <- io operator
                            _cargs_, _args_

                        [<CustomOperation("tolerationSeconds")>]
                        member _.TolerationSeconds((_cargs_, _args_: TolerationArgs), tolerationSeconds) =
                            _args_.TolerationSeconds <- input tolerationSeconds
                            _cargs_, _args_

                        member _.TolerationSeconds((_cargs_, _args_: TolerationArgs), tolerationSeconds) =
                            _args_.TolerationSeconds <- io tolerationSeconds
                            _cargs_, _args_

                        [<CustomOperation("value")>]
                        member _.Value((_cargs_, _args_: TolerationArgs), value) =
                            _args_.Value <- input value
                            _cargs_, _args_

                        member _.Value((_cargs_, _args_: TolerationArgs), value) =
                            _args_.Value <- io value
                            _cargs_, _args_

                    let toleration = TolerationBuilder()

                [<AutoOpen>]
                module TopologySelectorLabelRequirement =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TopologySelectorLabelRequirementBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TopologySelectorLabelRequirementArgs()
                        member _.Run(_cargs_, _args_: TopologySelectorLabelRequirementArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TopologySelectorLabelRequirementArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: TopologySelectorLabelRequirementArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: TopologySelectorLabelRequirementArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("values")>]
                        member _.Values((_cargs_, _args_: TopologySelectorLabelRequirementArgs), values) =
                            _args_.Values <- inputList values
                            _cargs_, _args_

                    let topologySelectorLabelRequirement =
                        TopologySelectorLabelRequirementBuilder()

                [<AutoOpen>]
                module TopologySelectorTerm =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TopologySelectorTermBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TopologySelectorTermArgs()
                        member _.Run(_cargs_, _args_: TopologySelectorTermArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TopologySelectorTermArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("matchLabelExpressions")>]
                        member _.MatchLabelExpressions(
                            (_cargs_, _args_: TopologySelectorTermArgs),
                            matchLabelExpressions)
                            =
                            _args_.MatchLabelExpressions <- inputList matchLabelExpressions
                            _cargs_, _args_

                    let topologySelectorTerm = TopologySelectorTermBuilder()

                [<AutoOpen>]
                module TopologySpreadConstraint =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TopologySpreadConstraintBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TopologySpreadConstraintArgs()
                        member _.Run(_cargs_, _args_: TopologySpreadConstraintArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TopologySpreadConstraintArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("labelSelector")>]
                        member _.LabelSelector((_cargs_, _args_: TopologySpreadConstraintArgs), labelSelector) =
                            _args_.LabelSelector <- input labelSelector
                            _cargs_, _args_

                        [<CustomOperation("maxSkew")>]
                        member _.MaxSkew((_cargs_, _args_: TopologySpreadConstraintArgs), maxSkew) =
                            _args_.MaxSkew <- input maxSkew
                            _cargs_, _args_

                        member _.MaxSkew((_cargs_, _args_: TopologySpreadConstraintArgs), maxSkew) =
                            _args_.MaxSkew <- io maxSkew
                            _cargs_, _args_

                        [<CustomOperation("topologyKey")>]
                        member _.TopologyKey((_cargs_, _args_: TopologySpreadConstraintArgs), topologyKey) =
                            _args_.TopologyKey <- input topologyKey
                            _cargs_, _args_

                        member _.TopologyKey((_cargs_, _args_: TopologySpreadConstraintArgs), topologyKey) =
                            _args_.TopologyKey <- io topologyKey
                            _cargs_, _args_

                        [<CustomOperation("whenUnsatisfiable")>]
                        member _.WhenUnsatisfiable((_cargs_, _args_: TopologySpreadConstraintArgs), whenUnsatisfiable) =
                            _args_.WhenUnsatisfiable <- input whenUnsatisfiable
                            _cargs_, _args_

                        member _.WhenUnsatisfiable((_cargs_, _args_: TopologySpreadConstraintArgs), whenUnsatisfiable) =
                            _args_.WhenUnsatisfiable <- io whenUnsatisfiable
                            _cargs_, _args_

                    let topologySpreadConstraint = TopologySpreadConstraintBuilder()

                [<AutoOpen>]
                module TypedLocalObjectReference =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type TypedLocalObjectReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, TypedLocalObjectReferenceArgs()
                        member _.Run(_cargs_, _args_: TypedLocalObjectReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: TypedLocalObjectReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: TypedLocalObjectReferenceArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: TypedLocalObjectReferenceArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: TypedLocalObjectReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: TypedLocalObjectReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: TypedLocalObjectReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: TypedLocalObjectReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let typedLocalObjectReference = TypedLocalObjectReferenceBuilder()

                [<AutoOpen>]
                module Volume =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VolumeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeArgs()
                        member _.Run(_cargs_, _args_: VolumeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("awsElasticBlockStore")>]
                        member _.AwsElasticBlockStore((_cargs_, _args_: VolumeArgs), awsElasticBlockStore) =
                            _args_.AwsElasticBlockStore <- input awsElasticBlockStore
                            _cargs_, _args_

                        [<CustomOperation("azureDisk")>]
                        member _.AzureDisk((_cargs_, _args_: VolumeArgs), azureDisk) =
                            _args_.AzureDisk <- input azureDisk
                            _cargs_, _args_

                        [<CustomOperation("azureFile")>]
                        member _.AzureFile((_cargs_, _args_: VolumeArgs), azureFile) =
                            _args_.AzureFile <- input azureFile
                            _cargs_, _args_

                        [<CustomOperation("cephfs")>]
                        member _.Cephfs((_cargs_, _args_: VolumeArgs), cephfs) =
                            _args_.Cephfs <- input cephfs
                            _cargs_, _args_

                        [<CustomOperation("cinder")>]
                        member _.Cinder((_cargs_, _args_: VolumeArgs), cinder) =
                            _args_.Cinder <- input cinder
                            _cargs_, _args_

                        [<CustomOperation("configMap")>]
                        member _.ConfigMap((_cargs_, _args_: VolumeArgs), configMap) =
                            _args_.ConfigMap <- input configMap
                            _cargs_, _args_

                        [<CustomOperation("csi")>]
                        member _.Csi((_cargs_, _args_: VolumeArgs), csi) =
                            _args_.Csi <- input csi
                            _cargs_, _args_

                        [<CustomOperation("downwardAPI")>]
                        member _.DownwardAPI((_cargs_, _args_: VolumeArgs), downwardAPI) =
                            _args_.DownwardAPI <- input downwardAPI
                            _cargs_, _args_

                        [<CustomOperation("emptyDir")>]
                        member _.EmptyDir((_cargs_, _args_: VolumeArgs), emptyDir) =
                            _args_.EmptyDir <- input emptyDir
                            _cargs_, _args_

                        [<CustomOperation("fc")>]
                        member _.Fc((_cargs_, _args_: VolumeArgs), fc) =
                            _args_.Fc <- input fc
                            _cargs_, _args_

                        [<CustomOperation("flexVolume")>]
                        member _.FlexVolume((_cargs_, _args_: VolumeArgs), flexVolume) =
                            _args_.FlexVolume <- input flexVolume
                            _cargs_, _args_

                        [<CustomOperation("flocker")>]
                        member _.Flocker((_cargs_, _args_: VolumeArgs), flocker) =
                            _args_.Flocker <- input flocker
                            _cargs_, _args_

                        [<CustomOperation("gcePersistentDisk")>]
                        member _.GcePersistentDisk((_cargs_, _args_: VolumeArgs), gcePersistentDisk) =
                            _args_.GcePersistentDisk <- input gcePersistentDisk
                            _cargs_, _args_

                        [<CustomOperation("gitRepo")>]
                        member _.GitRepo((_cargs_, _args_: VolumeArgs), gitRepo) =
                            _args_.GitRepo <- input gitRepo
                            _cargs_, _args_

                        [<CustomOperation("glusterfs")>]
                        member _.Glusterfs((_cargs_, _args_: VolumeArgs), glusterfs) =
                            _args_.Glusterfs <- input glusterfs
                            _cargs_, _args_

                        [<CustomOperation("hostPath")>]
                        member _.HostPath((_cargs_, _args_: VolumeArgs), hostPath) =
                            _args_.HostPath <- input hostPath
                            _cargs_, _args_

                        [<CustomOperation("iscsi")>]
                        member _.Iscsi((_cargs_, _args_: VolumeArgs), iscsi) =
                            _args_.Iscsi <- input iscsi
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: VolumeArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: VolumeArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("nfs")>]
                        member _.Nfs((_cargs_, _args_: VolumeArgs), nfs) =
                            _args_.Nfs <- input nfs
                            _cargs_, _args_

                        [<CustomOperation("persistentVolumeClaim")>]
                        member _.PersistentVolumeClaim((_cargs_, _args_: VolumeArgs), persistentVolumeClaim) =
                            _args_.PersistentVolumeClaim <- input persistentVolumeClaim
                            _cargs_, _args_

                        [<CustomOperation("photonPersistentDisk")>]
                        member _.PhotonPersistentDisk((_cargs_, _args_: VolumeArgs), photonPersistentDisk) =
                            _args_.PhotonPersistentDisk <- input photonPersistentDisk
                            _cargs_, _args_

                        [<CustomOperation("portworxVolume")>]
                        member _.PortworxVolume((_cargs_, _args_: VolumeArgs), portworxVolume) =
                            _args_.PortworxVolume <- input portworxVolume
                            _cargs_, _args_

                        [<CustomOperation("projected")>]
                        member _.Projected((_cargs_, _args_: VolumeArgs), projected) =
                            _args_.Projected <- input projected
                            _cargs_, _args_

                        [<CustomOperation("quobyte")>]
                        member _.Quobyte((_cargs_, _args_: VolumeArgs), quobyte) =
                            _args_.Quobyte <- input quobyte
                            _cargs_, _args_

                        [<CustomOperation("rbd")>]
                        member _.Rbd((_cargs_, _args_: VolumeArgs), rbd) =
                            _args_.Rbd <- input rbd
                            _cargs_, _args_

                        [<CustomOperation("scaleIO")>]
                        member _.ScaleIO((_cargs_, _args_: VolumeArgs), scaleIO) =
                            _args_.ScaleIO <- input scaleIO
                            _cargs_, _args_

                        [<CustomOperation("secret")>]
                        member _.Secret((_cargs_, _args_: VolumeArgs), secret) =
                            _args_.Secret <- input secret
                            _cargs_, _args_

                        [<CustomOperation("storageos")>]
                        member _.Storageos((_cargs_, _args_: VolumeArgs), storageos) =
                            _args_.Storageos <- input storageos
                            _cargs_, _args_

                        [<CustomOperation("vsphereVolume")>]
                        member _.VsphereVolume((_cargs_, _args_: VolumeArgs), vsphereVolume) =
                            _args_.VsphereVolume <- input vsphereVolume
                            _cargs_, _args_

                    let volume = VolumeBuilder()

                [<AutoOpen>]
                module VolumeDevice =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VolumeDeviceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeDeviceArgs()
                        member _.Run(_cargs_, _args_: VolumeDeviceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeDeviceArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("devicePath")>]
                        member _.DevicePath((_cargs_, _args_: VolumeDeviceArgs), devicePath) =
                            _args_.DevicePath <- input devicePath
                            _cargs_, _args_

                        member _.DevicePath((_cargs_, _args_: VolumeDeviceArgs), devicePath) =
                            _args_.DevicePath <- io devicePath
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: VolumeDeviceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: VolumeDeviceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let volumeDevice = VolumeDeviceBuilder()

                [<AutoOpen>]
                module VolumeMount =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VolumeMountBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeMountArgs()
                        member _.Run(_cargs_, _args_: VolumeMountArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeMountArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("mountPath")>]
                        member _.MountPath((_cargs_, _args_: VolumeMountArgs), mountPath) =
                            _args_.MountPath <- input mountPath
                            _cargs_, _args_

                        member _.MountPath((_cargs_, _args_: VolumeMountArgs), mountPath) =
                            _args_.MountPath <- io mountPath
                            _cargs_, _args_

                        [<CustomOperation("mountPropagation")>]
                        member _.MountPropagation((_cargs_, _args_: VolumeMountArgs), mountPropagation) =
                            _args_.MountPropagation <- input mountPropagation
                            _cargs_, _args_

                        member _.MountPropagation((_cargs_, _args_: VolumeMountArgs), mountPropagation) =
                            _args_.MountPropagation <- io mountPropagation
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: VolumeMountArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: VolumeMountArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: VolumeMountArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: VolumeMountArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                        [<CustomOperation("subPath")>]
                        member _.SubPath((_cargs_, _args_: VolumeMountArgs), subPath) =
                            _args_.SubPath <- input subPath
                            _cargs_, _args_

                        member _.SubPath((_cargs_, _args_: VolumeMountArgs), subPath) =
                            _args_.SubPath <- io subPath
                            _cargs_, _args_

                        [<CustomOperation("subPathExpr")>]
                        member _.SubPathExpr((_cargs_, _args_: VolumeMountArgs), subPathExpr) =
                            _args_.SubPathExpr <- input subPathExpr
                            _cargs_, _args_

                        member _.SubPathExpr((_cargs_, _args_: VolumeMountArgs), subPathExpr) =
                            _args_.SubPathExpr <- io subPathExpr
                            _cargs_, _args_

                    let volumeMount = VolumeMountBuilder()

                [<AutoOpen>]
                module VolumeNodeAffinity =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VolumeNodeAffinityBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeNodeAffinityArgs()
                        member _.Run(_cargs_, _args_: VolumeNodeAffinityArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeNodeAffinityArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("required")>]
                        member _.Required((_cargs_, _args_: VolumeNodeAffinityArgs), required) =
                            _args_.Required <- input required
                            _cargs_, _args_

                    let volumeNodeAffinity = VolumeNodeAffinityBuilder()

                [<AutoOpen>]
                module VolumeProjection =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VolumeProjectionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeProjectionArgs()
                        member _.Run(_cargs_, _args_: VolumeProjectionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeProjectionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("configMap")>]
                        member _.ConfigMap((_cargs_, _args_: VolumeProjectionArgs), configMap) =
                            _args_.ConfigMap <- input configMap
                            _cargs_, _args_

                        [<CustomOperation("downwardAPI")>]
                        member _.DownwardAPI((_cargs_, _args_: VolumeProjectionArgs), downwardAPI) =
                            _args_.DownwardAPI <- input downwardAPI
                            _cargs_, _args_

                        [<CustomOperation("secret")>]
                        member _.Secret((_cargs_, _args_: VolumeProjectionArgs), secret) =
                            _args_.Secret <- input secret
                            _cargs_, _args_

                        [<CustomOperation("serviceAccountToken")>]
                        member _.ServiceAccountToken((_cargs_, _args_: VolumeProjectionArgs), serviceAccountToken) =
                            _args_.ServiceAccountToken <- input serviceAccountToken
                            _cargs_, _args_

                    let volumeProjection = VolumeProjectionBuilder()

                [<AutoOpen>]
                module VsphereVirtualDiskVolumeSource =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type VsphereVirtualDiskVolumeSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VsphereVirtualDiskVolumeSourceArgs()
                        member _.Run(_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("fsType")>]
                        member _.FsType((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- input fsType
                            _cargs_, _args_

                        member _.FsType((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), fsType) =
                            _args_.FsType <- io fsType
                            _cargs_, _args_

                        [<CustomOperation("storagePolicyID")>]
                        member _.StoragePolicyID((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), storagePolicyID) =
                            _args_.StoragePolicyID <- input storagePolicyID
                            _cargs_, _args_

                        member _.StoragePolicyID((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), storagePolicyID) =
                            _args_.StoragePolicyID <- io storagePolicyID
                            _cargs_, _args_

                        [<CustomOperation("storagePolicyName")>]
                        member _.StoragePolicyName(
                            (_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs),
                            storagePolicyName)
                            =
                            _args_.StoragePolicyName <- input storagePolicyName
                            _cargs_, _args_

                        member _.StoragePolicyName(
                            (_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs),
                            storagePolicyName)
                            =
                            _args_.StoragePolicyName <- io storagePolicyName
                            _cargs_, _args_

                        [<CustomOperation("volumePath")>]
                        member _.VolumePath((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), volumePath) =
                            _args_.VolumePath <- input volumePath
                            _cargs_, _args_

                        member _.VolumePath((_cargs_, _args_: VsphereVirtualDiskVolumeSourceArgs), volumePath) =
                            _args_.VolumePath <- io volumePath
                            _cargs_, _args_

                    let vsphereVirtualDiskVolumeSource = VsphereVirtualDiskVolumeSourceBuilder()

                [<AutoOpen>]
                module WeightedPodAffinityTerm =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type WeightedPodAffinityTermBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WeightedPodAffinityTermArgs()
                        member _.Run(_cargs_, _args_: WeightedPodAffinityTermArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WeightedPodAffinityTermArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podAffinityTerm")>]
                        member _.PodAffinityTerm((_cargs_, _args_: WeightedPodAffinityTermArgs), podAffinityTerm) =
                            _args_.PodAffinityTerm <- input podAffinityTerm
                            _cargs_, _args_

                        [<CustomOperation("weight")>]
                        member _.Weight((_cargs_, _args_: WeightedPodAffinityTermArgs), weight) =
                            _args_.Weight <- input weight
                            _cargs_, _args_

                        member _.Weight((_cargs_, _args_: WeightedPodAffinityTermArgs), weight) =
                            _args_.Weight <- io weight
                            _cargs_, _args_

                    let weightedPodAffinityTerm = WeightedPodAffinityTermBuilder()

                [<AutoOpen>]
                module WindowsSecurityContextOptions =
                    open Pulumi.Kubernetes.Core.V1
                    open Pulumi.Kubernetes.Types.Inputs.Core.V1

                    type WindowsSecurityContextOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, WindowsSecurityContextOptionsArgs()
                        member _.Run(_cargs_, _args_: WindowsSecurityContextOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: WindowsSecurityContextOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("gmsaCredentialSpec")>]
                        member _.GmsaCredentialSpec(
                            (_cargs_, _args_: WindowsSecurityContextOptionsArgs),
                            gmsaCredentialSpec)
                            =
                            _args_.GmsaCredentialSpec <- input gmsaCredentialSpec
                            _cargs_, _args_

                        member _.GmsaCredentialSpec(
                            (_cargs_, _args_: WindowsSecurityContextOptionsArgs),
                            gmsaCredentialSpec)
                            =
                            _args_.GmsaCredentialSpec <- io gmsaCredentialSpec
                            _cargs_, _args_

                        [<CustomOperation("gmsaCredentialSpecName")>]
                        member _.GmsaCredentialSpecName(
                            (_cargs_, _args_: WindowsSecurityContextOptionsArgs),
                            gmsaCredentialSpecName)
                            =
                            _args_.GmsaCredentialSpecName <- input gmsaCredentialSpecName
                            _cargs_, _args_

                        member _.GmsaCredentialSpecName(
                            (_cargs_, _args_: WindowsSecurityContextOptionsArgs),
                            gmsaCredentialSpecName)
                            =
                            _args_.GmsaCredentialSpecName <- io gmsaCredentialSpecName
                            _cargs_, _args_

                        [<CustomOperation("runAsUserName")>]
                        member _.RunAsUserName((_cargs_, _args_: WindowsSecurityContextOptionsArgs), runAsUserName) =
                            _args_.RunAsUserName <- input runAsUserName
                            _cargs_, _args_

                        member _.RunAsUserName((_cargs_, _args_: WindowsSecurityContextOptionsArgs), runAsUserName) =
                            _args_.RunAsUserName <- io runAsUserName
                            _cargs_, _args_

                    let windowsSecurityContextOptions = WindowsSecurityContextOptionsBuilder()

        module Discovery =
            module V1Beta1 =
                [<AutoOpen>]
                module Endpoint =
                    open Pulumi.Kubernetes.Discovery.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Discovery.V1Beta1

                    type EndpointBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointArgs()
                        member _.Run(_cargs_, _args_: EndpointArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("addresses")>]
                        member _.Addresses((_cargs_, _args_: EndpointArgs), addresses) =
                            _args_.Addresses <- inputList addresses
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: EndpointArgs), conditions) =
                            _args_.Conditions <- input conditions
                            _cargs_, _args_

                        [<CustomOperation("hostname")>]
                        member _.Hostname((_cargs_, _args_: EndpointArgs), hostname) =
                            _args_.Hostname <- input hostname
                            _cargs_, _args_

                        member _.Hostname((_cargs_, _args_: EndpointArgs), hostname) =
                            _args_.Hostname <- io hostname
                            _cargs_, _args_

                        [<CustomOperation("targetRef")>]
                        member _.TargetRef((_cargs_, _args_: EndpointArgs), targetRef) =
                            _args_.TargetRef <- input targetRef
                            _cargs_, _args_

                        [<CustomOperation("topology")>]
                        member _.Topology((_cargs_, _args_: EndpointArgs), topology) =
                            _args_.Topology <- inputMap topology
                            _cargs_, _args_

                    let endpoint = EndpointBuilder()

                [<AutoOpen>]
                module EndpointConditions =
                    open Pulumi.Kubernetes.Discovery.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Discovery.V1Beta1

                    type EndpointConditionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointConditionsArgs()
                        member _.Run(_cargs_, _args_: EndpointConditionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointConditionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ready")>]
                        member _.Ready((_cargs_, _args_: EndpointConditionsArgs), ready) =
                            _args_.Ready <- input ready
                            _cargs_, _args_

                        member _.Ready((_cargs_, _args_: EndpointConditionsArgs), ready) =
                            _args_.Ready <- io ready
                            _cargs_, _args_

                    let endpointConditions = EndpointConditionsBuilder()

                [<AutoOpen>]
                module EndpointPort =
                    open Pulumi.Kubernetes.Discovery.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Discovery.V1Beta1

                    type EndpointPortBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EndpointPortArgs()
                        member _.Run(_cargs_, _args_: EndpointPortArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EndpointPortArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("appProtocol")>]
                        member _.AppProtocol((_cargs_, _args_: EndpointPortArgs), appProtocol) =
                            _args_.AppProtocol <- input appProtocol
                            _cargs_, _args_

                        member _.AppProtocol((_cargs_, _args_: EndpointPortArgs), appProtocol) =
                            _args_.AppProtocol <- io appProtocol
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: EndpointPortArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: EndpointPortArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("port")>]
                        member _.Port((_cargs_, _args_: EndpointPortArgs), port) =
                            _args_.Port <- input port
                            _cargs_, _args_

                        member _.Port((_cargs_, _args_: EndpointPortArgs), port) =
                            _args_.Port <- io port
                            _cargs_, _args_

                        [<CustomOperation("protocol")>]
                        member _.Protocol((_cargs_, _args_: EndpointPortArgs), protocol) =
                            _args_.Protocol <- input protocol
                            _cargs_, _args_

                        member _.Protocol((_cargs_, _args_: EndpointPortArgs), protocol) =
                            _args_.Protocol <- io protocol
                            _cargs_, _args_

                    let endpointPort = EndpointPortBuilder()

        module Events =
            module V1Beta1 =
                [<AutoOpen>]
                module EventSeries =
                    open Pulumi.Kubernetes.Events.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Events.V1Beta1

                    type EventSeriesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, EventSeriesArgs()
                        member _.Run(_cargs_, _args_: EventSeriesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: EventSeriesArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("count")>]
                        member _.Count((_cargs_, _args_: EventSeriesArgs), count) =
                            _args_.Count <- input count
                            _cargs_, _args_

                        member _.Count((_cargs_, _args_: EventSeriesArgs), count) =
                            _args_.Count <- io count
                            _cargs_, _args_

                        [<CustomOperation("lastObservedTime")>]
                        member _.LastObservedTime((_cargs_, _args_: EventSeriesArgs), lastObservedTime) =
                            _args_.LastObservedTime <- input lastObservedTime
                            _cargs_, _args_

                        member _.LastObservedTime((_cargs_, _args_: EventSeriesArgs), lastObservedTime) =
                            _args_.LastObservedTime <- io lastObservedTime
                            _cargs_, _args_

                        [<CustomOperation("state")>]
                        member _.State((_cargs_, _args_: EventSeriesArgs), state) =
                            _args_.State <- input state
                            _cargs_, _args_

                        member _.State((_cargs_, _args_: EventSeriesArgs), state) =
                            _args_.State <- io state
                            _cargs_, _args_

                    let eventSeries = EventSeriesBuilder()

        module Extensions =
            module V1Beta1 =
                [<AutoOpen>]
                module AllowedCSIDriver =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type AllowedCSIDriverBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedCSIDriverArgs()
                        member _.Run(_cargs_, _args_: AllowedCSIDriverArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let allowedCSIDriver = AllowedCSIDriverBuilder()

                [<AutoOpen>]
                module AllowedFlexVolume =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type AllowedFlexVolumeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedFlexVolumeArgs()
                        member _.Run(_cargs_, _args_: AllowedFlexVolumeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedFlexVolumeArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: AllowedFlexVolumeArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: AllowedFlexVolumeArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                    let allowedFlexVolume = AllowedFlexVolumeBuilder()

                [<AutoOpen>]
                module AllowedHostPath =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type AllowedHostPathBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedHostPathArgs()
                        member _.Run(_cargs_, _args_: AllowedHostPathArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedHostPathArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("pathPrefix")>]
                        member _.PathPrefix((_cargs_, _args_: AllowedHostPathArgs), pathPrefix) =
                            _args_.PathPrefix <- input pathPrefix
                            _cargs_, _args_

                        member _.PathPrefix((_cargs_, _args_: AllowedHostPathArgs), pathPrefix) =
                            _args_.PathPrefix <- io pathPrefix
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AllowedHostPathArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AllowedHostPathArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let allowedHostPath = AllowedHostPathBuilder()

                [<AutoOpen>]
                module DaemonSetCondition =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DaemonSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetConditionArgs()
                        member _.Run(_cargs_, _args_: DaemonSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DaemonSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DaemonSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DaemonSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DaemonSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetCondition = DaemonSetConditionBuilder()

                [<AutoOpen>]
                module DaemonSetSpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DaemonSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetSpecArgs()
                        member _.Run(_cargs_, _args_: DaemonSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DaemonSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DaemonSetSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DaemonSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DaemonSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                        [<CustomOperation("templateGeneration")>]
                        member _.TemplateGeneration((_cargs_, _args_: DaemonSetSpecArgs), templateGeneration) =
                            _args_.TemplateGeneration <- input templateGeneration
                            _cargs_, _args_

                        member _.TemplateGeneration((_cargs_, _args_: DaemonSetSpecArgs), templateGeneration) =
                            _args_.TemplateGeneration <- io templateGeneration
                            _cargs_, _args_

                        [<CustomOperation("updateStrategy")>]
                        member _.UpdateStrategy((_cargs_, _args_: DaemonSetSpecArgs), updateStrategy) =
                            _args_.UpdateStrategy <- input updateStrategy
                            _cargs_, _args_

                    let daemonSetSpec = DaemonSetSpecBuilder()

                [<AutoOpen>]
                module DaemonSetStatus =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DaemonSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetStatusArgs()
                        member _.Run(_cargs_, _args_: DaemonSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DaemonSetStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DaemonSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("currentNumberScheduled")>]
                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- input currentNumberScheduled
                            _cargs_, _args_

                        member _.CurrentNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), currentNumberScheduled) =
                            _args_.CurrentNumberScheduled <- io currentNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("desiredNumberScheduled")>]
                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- input desiredNumberScheduled
                            _cargs_, _args_

                        member _.DesiredNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), desiredNumberScheduled) =
                            _args_.DesiredNumberScheduled <- io desiredNumberScheduled
                            _cargs_, _args_

                        [<CustomOperation("numberAvailable")>]
                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- input numberAvailable
                            _cargs_, _args_

                        member _.NumberAvailable((_cargs_, _args_: DaemonSetStatusArgs), numberAvailable) =
                            _args_.NumberAvailable <- io numberAvailable
                            _cargs_, _args_

                        [<CustomOperation("numberMisscheduled")>]
                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- input numberMisscheduled
                            _cargs_, _args_

                        member _.NumberMisscheduled((_cargs_, _args_: DaemonSetStatusArgs), numberMisscheduled) =
                            _args_.NumberMisscheduled <- io numberMisscheduled
                            _cargs_, _args_

                        [<CustomOperation("numberReady")>]
                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- input numberReady
                            _cargs_, _args_

                        member _.NumberReady((_cargs_, _args_: DaemonSetStatusArgs), numberReady) =
                            _args_.NumberReady <- io numberReady
                            _cargs_, _args_

                        [<CustomOperation("numberUnavailable")>]
                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- input numberUnavailable
                            _cargs_, _args_

                        member _.NumberUnavailable((_cargs_, _args_: DaemonSetStatusArgs), numberUnavailable) =
                            _args_.NumberUnavailable <- io numberUnavailable
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DaemonSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("updatedNumberScheduled")>]
                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- input updatedNumberScheduled
                            _cargs_, _args_

                        member _.UpdatedNumberScheduled((_cargs_, _args_: DaemonSetStatusArgs), updatedNumberScheduled) =
                            _args_.UpdatedNumberScheduled <- io updatedNumberScheduled
                            _cargs_, _args_

                    let daemonSetStatus = DaemonSetStatusBuilder()

                [<AutoOpen>]
                module DaemonSetUpdateStrategy =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DaemonSetUpdateStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DaemonSetUpdateStrategyArgs()
                        member _.Run(_cargs_, _args_: DaemonSetUpdateStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DaemonSetUpdateStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DaemonSetUpdateStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DaemonSetUpdateStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let daemonSetUpdateStrategy = DaemonSetUpdateStrategyBuilder()

                [<AutoOpen>]
                module DeploymentCondition =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DeploymentConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentConditionArgs()
                        member _.Run(_cargs_, _args_: DeploymentConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: DeploymentConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("lastUpdateTime")>]
                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- input lastUpdateTime
                            _cargs_, _args_

                        member _.LastUpdateTime((_cargs_, _args_: DeploymentConditionArgs), lastUpdateTime) =
                            _args_.LastUpdateTime <- io lastUpdateTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: DeploymentConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: DeploymentConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: DeploymentConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentCondition = DeploymentConditionBuilder()

                [<AutoOpen>]
                module DeploymentSpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DeploymentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentSpecArgs()
                        member _.Run(_cargs_, _args_: DeploymentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: DeploymentSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("paused")>]
                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- input paused
                            _cargs_, _args_

                        member _.Paused((_cargs_, _args_: DeploymentSpecArgs), paused) =
                            _args_.Paused <- io paused
                            _cargs_, _args_

                        [<CustomOperation("progressDeadlineSeconds")>]
                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- input progressDeadlineSeconds
                            _cargs_, _args_

                        member _.ProgressDeadlineSeconds((_cargs_, _args_: DeploymentSpecArgs), progressDeadlineSeconds) =
                            _args_.ProgressDeadlineSeconds <- io progressDeadlineSeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("revisionHistoryLimit")>]
                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- input revisionHistoryLimit
                            _cargs_, _args_

                        member _.RevisionHistoryLimit((_cargs_, _args_: DeploymentSpecArgs), revisionHistoryLimit) =
                            _args_.RevisionHistoryLimit <- io revisionHistoryLimit
                            _cargs_, _args_

                        [<CustomOperation("rollbackTo")>]
                        member _.RollbackTo((_cargs_, _args_: DeploymentSpecArgs), rollbackTo) =
                            _args_.RollbackTo <- input rollbackTo
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: DeploymentSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("strategy")>]
                        member _.Strategy((_cargs_, _args_: DeploymentSpecArgs), strategy) =
                            _args_.Strategy <- input strategy
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: DeploymentSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let deploymentSpec = DeploymentSpecBuilder()

                [<AutoOpen>]
                module DeploymentStatus =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DeploymentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStatusArgs()
                        member _.Run(_cargs_, _args_: DeploymentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: DeploymentStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("collisionCount")>]
                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- input collisionCount
                            _cargs_, _args_

                        member _.CollisionCount((_cargs_, _args_: DeploymentStatusArgs), collisionCount) =
                            _args_.CollisionCount <- io collisionCount
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: DeploymentStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: DeploymentStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: DeploymentStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: DeploymentStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("unavailableReplicas")>]
                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- input unavailableReplicas
                            _cargs_, _args_

                        member _.UnavailableReplicas((_cargs_, _args_: DeploymentStatusArgs), unavailableReplicas) =
                            _args_.UnavailableReplicas <- io unavailableReplicas
                            _cargs_, _args_

                        [<CustomOperation("updatedReplicas")>]
                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- input updatedReplicas
                            _cargs_, _args_

                        member _.UpdatedReplicas((_cargs_, _args_: DeploymentStatusArgs), updatedReplicas) =
                            _args_.UpdatedReplicas <- io updatedReplicas
                            _cargs_, _args_

                    let deploymentStatus = DeploymentStatusBuilder()

                [<AutoOpen>]
                module DeploymentStrategy =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type DeploymentStrategyBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, DeploymentStrategyArgs()
                        member _.Run(_cargs_, _args_: DeploymentStrategyArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: DeploymentStrategyArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rollingUpdate")>]
                        member _.RollingUpdate((_cargs_, _args_: DeploymentStrategyArgs), rollingUpdate) =
                            _args_.RollingUpdate <- input rollingUpdate
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: DeploymentStrategyArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let deploymentStrategy = DeploymentStrategyBuilder()

                [<AutoOpen>]
                module FSGroupStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type FSGroupStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FSGroupStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: FSGroupStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FSGroupStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: FSGroupStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: FSGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: FSGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let fSGroupStrategyOptions = FSGroupStrategyOptionsBuilder()

                [<AutoOpen>]
                module HTTPIngressPath =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type HTTPIngressPathBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HTTPIngressPathArgs()
                        member _.Run(_cargs_, _args_: HTTPIngressPathArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HTTPIngressPathArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("backend")>]
                        member _.Backend((_cargs_, _args_: HTTPIngressPathArgs), backend) =
                            _args_.Backend <- input backend
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: HTTPIngressPathArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: HTTPIngressPathArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("pathType")>]
                        member _.PathType((_cargs_, _args_: HTTPIngressPathArgs), pathType) =
                            _args_.PathType <- input pathType
                            _cargs_, _args_

                        member _.PathType((_cargs_, _args_: HTTPIngressPathArgs), pathType) =
                            _args_.PathType <- io pathType
                            _cargs_, _args_

                    let hTTPIngressPath = HTTPIngressPathBuilder()

                [<AutoOpen>]
                module HTTPIngressRuleValue =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type HTTPIngressRuleValueBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HTTPIngressRuleValueArgs()
                        member _.Run(_cargs_, _args_: HTTPIngressRuleValueArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HTTPIngressRuleValueArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("paths")>]
                        member _.Paths((_cargs_, _args_: HTTPIngressRuleValueArgs), paths) =
                            _args_.Paths <- inputList paths
                            _cargs_, _args_

                    let hTTPIngressRuleValue = HTTPIngressRuleValueBuilder()

                [<AutoOpen>]
                module HostPortRange =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type HostPortRangeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HostPortRangeArgs()
                        member _.Run(_cargs_, _args_: HostPortRangeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HostPortRangeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("max")>]
                        member _.Max((_cargs_, _args_: HostPortRangeArgs), max) =
                            _args_.Max <- input max
                            _cargs_, _args_

                        member _.Max((_cargs_, _args_: HostPortRangeArgs), max) =
                            _args_.Max <- io max
                            _cargs_, _args_

                        [<CustomOperation("min")>]
                        member _.Min((_cargs_, _args_: HostPortRangeArgs), min) =
                            _args_.Min <- input min
                            _cargs_, _args_

                        member _.Min((_cargs_, _args_: HostPortRangeArgs), min) =
                            _args_.Min <- io min
                            _cargs_, _args_

                    let hostPortRange = HostPortRangeBuilder()

                [<AutoOpen>]
                module IDRange =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IDRangeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IDRangeArgs()
                        member _.Run(_cargs_, _args_: IDRangeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IDRangeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("max")>]
                        member _.Max((_cargs_, _args_: IDRangeArgs), max) =
                            _args_.Max <- input max
                            _cargs_, _args_

                        member _.Max((_cargs_, _args_: IDRangeArgs), max) =
                            _args_.Max <- io max
                            _cargs_, _args_

                        [<CustomOperation("min")>]
                        member _.Min((_cargs_, _args_: IDRangeArgs), min) =
                            _args_.Min <- input min
                            _cargs_, _args_

                        member _.Min((_cargs_, _args_: IDRangeArgs), min) =
                            _args_.Min <- io min
                            _cargs_, _args_

                    let iDRange = IDRangeBuilder()

                [<AutoOpen>]
                module IPBlock =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IPBlockBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IPBlockArgs()
                        member _.Run(_cargs_, _args_: IPBlockArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IPBlockArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("cidr")>]
                        member _.Cidr((_cargs_, _args_: IPBlockArgs), cidr) =
                            _args_.Cidr <- input cidr
                            _cargs_, _args_

                        member _.Cidr((_cargs_, _args_: IPBlockArgs), cidr) =
                            _args_.Cidr <- io cidr
                            _cargs_, _args_

                        [<CustomOperation("except")>]
                        member _.Except((_cargs_, _args_: IPBlockArgs), except) =
                            _args_.Except <- inputList except
                            _cargs_, _args_

                    let iPBlock = IPBlockBuilder()

                [<AutoOpen>]
                module IngressRule =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IngressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressRuleArgs()
                        member _.Run(_cargs_, _args_: IngressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressRuleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("host")>]
                        member _.Host((_cargs_, _args_: IngressRuleArgs), host) =
                            _args_.Host <- input host
                            _cargs_, _args_

                        member _.Host((_cargs_, _args_: IngressRuleArgs), host) =
                            _args_.Host <- io host
                            _cargs_, _args_

                        [<CustomOperation("http")>]
                        member _.Http((_cargs_, _args_: IngressRuleArgs), http) =
                            _args_.Http <- input http
                            _cargs_, _args_

                    let ingressRule = IngressRuleBuilder()

                [<AutoOpen>]
                module IngressSpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IngressSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressSpecArgs()
                        member _.Run(_cargs_, _args_: IngressSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("backend")>]
                        member _.Backend((_cargs_, _args_: IngressSpecArgs), backend) =
                            _args_.Backend <- input backend
                            _cargs_, _args_

                        [<CustomOperation("ingressClassName")>]
                        member _.IngressClassName((_cargs_, _args_: IngressSpecArgs), ingressClassName) =
                            _args_.IngressClassName <- input ingressClassName
                            _cargs_, _args_

                        member _.IngressClassName((_cargs_, _args_: IngressSpecArgs), ingressClassName) =
                            _args_.IngressClassName <- io ingressClassName
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: IngressSpecArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("tls")>]
                        member _.Tls((_cargs_, _args_: IngressSpecArgs), tls) =
                            _args_.Tls <- inputList tls
                            _cargs_, _args_

                    let ingressSpec = IngressSpecBuilder()

                [<AutoOpen>]
                module IngressStatus =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IngressStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressStatusArgs()
                        member _.Run(_cargs_, _args_: IngressStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("loadBalancer")>]
                        member _.LoadBalancer((_cargs_, _args_: IngressStatusArgs), loadBalancer) =
                            _args_.LoadBalancer <- input loadBalancer
                            _cargs_, _args_

                    let ingressStatus = IngressStatusBuilder()

                [<AutoOpen>]
                module IngressTLS =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type IngressTLSBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressTLSArgs()
                        member _.Run(_cargs_, _args_: IngressTLSArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressTLSArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hosts")>]
                        member _.Hosts((_cargs_, _args_: IngressTLSArgs), hosts) =
                            _args_.Hosts <- inputList hosts
                            _cargs_, _args_

                        [<CustomOperation("secretName")>]
                        member _.SecretName((_cargs_, _args_: IngressTLSArgs), secretName) =
                            _args_.SecretName <- input secretName
                            _cargs_, _args_

                        member _.SecretName((_cargs_, _args_: IngressTLSArgs), secretName) =
                            _args_.SecretName <- io secretName
                            _cargs_, _args_

                    let ingressTLS = IngressTLSBuilder()

                [<AutoOpen>]
                module NetworkPolicyEgressRule =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type NetworkPolicyEgressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyEgressRuleArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyEgressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyEgressRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: NetworkPolicyEgressRuleArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                        [<CustomOperation("to")>]
                        member _.To((_cargs_, _args_: NetworkPolicyEgressRuleArgs), ``to``) =
                            _args_.To <- inputList ``to``
                            _cargs_, _args_

                    let networkPolicyEgressRule = NetworkPolicyEgressRuleBuilder()

                [<AutoOpen>]
                module NetworkPolicyIngressRule =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type NetworkPolicyIngressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyIngressRuleArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyIngressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyIngressRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("from")>]
                        member _.From((_cargs_, _args_: NetworkPolicyIngressRuleArgs), from) =
                            _args_.From <- inputList from
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: NetworkPolicyIngressRuleArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                    let networkPolicyIngressRule = NetworkPolicyIngressRuleBuilder()

                [<AutoOpen>]
                module NetworkPolicyPeer =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type NetworkPolicyPeerBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyPeerArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyPeerArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyPeerArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ipBlock")>]
                        member _.IpBlock((_cargs_, _args_: NetworkPolicyPeerArgs), ipBlock) =
                            _args_.IpBlock <- input ipBlock
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: NetworkPolicyPeerArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("podSelector")>]
                        member _.PodSelector((_cargs_, _args_: NetworkPolicyPeerArgs), podSelector) =
                            _args_.PodSelector <- input podSelector
                            _cargs_, _args_

                    let networkPolicyPeer = NetworkPolicyPeerBuilder()

                [<AutoOpen>]
                module NetworkPolicySpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type NetworkPolicySpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicySpecArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicySpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicySpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("egress")>]
                        member _.Egress((_cargs_, _args_: NetworkPolicySpecArgs), egress) =
                            _args_.Egress <- inputList egress
                            _cargs_, _args_

                        [<CustomOperation("ingress")>]
                        member _.Ingress((_cargs_, _args_: NetworkPolicySpecArgs), ingress) =
                            _args_.Ingress <- inputList ingress
                            _cargs_, _args_

                        [<CustomOperation("podSelector")>]
                        member _.PodSelector((_cargs_, _args_: NetworkPolicySpecArgs), podSelector) =
                            _args_.PodSelector <- input podSelector
                            _cargs_, _args_

                        [<CustomOperation("policyTypes")>]
                        member _.PolicyTypes((_cargs_, _args_: NetworkPolicySpecArgs), policyTypes) =
                            _args_.PolicyTypes <- inputList policyTypes
                            _cargs_, _args_

                    let networkPolicySpec = NetworkPolicySpecBuilder()

                [<AutoOpen>]
                module PodSecurityPolicySpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type PodSecurityPolicySpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicySpecArgs()
                        member _.Run(_cargs_, _args_: PodSecurityPolicySpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodSecurityPolicySpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allowPrivilegeEscalation")>]
                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- input allowPrivilegeEscalation
                            _cargs_, _args_

                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- io allowPrivilegeEscalation
                            _cargs_, _args_

                        [<CustomOperation("allowedCSIDrivers")>]
                        member _.AllowedCSIDrivers((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedCSIDrivers) =
                            _args_.AllowedCSIDrivers <- inputList allowedCSIDrivers
                            _cargs_, _args_

                        [<CustomOperation("allowedCapabilities")>]
                        member _.AllowedCapabilities((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedCapabilities) =
                            _args_.AllowedCapabilities <- inputList allowedCapabilities
                            _cargs_, _args_

                        [<CustomOperation("allowedFlexVolumes")>]
                        member _.AllowedFlexVolumes((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedFlexVolumes) =
                            _args_.AllowedFlexVolumes <- inputList allowedFlexVolumes
                            _cargs_, _args_

                        [<CustomOperation("allowedHostPaths")>]
                        member _.AllowedHostPaths((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedHostPaths) =
                            _args_.AllowedHostPaths <- inputList allowedHostPaths
                            _cargs_, _args_

                        [<CustomOperation("allowedProcMountTypes")>]
                        member _.AllowedProcMountTypes(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowedProcMountTypes)
                            =
                            _args_.AllowedProcMountTypes <- inputList allowedProcMountTypes
                            _cargs_, _args_

                        [<CustomOperation("allowedUnsafeSysctls")>]
                        member _.AllowedUnsafeSysctls((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedUnsafeSysctls) =
                            _args_.AllowedUnsafeSysctls <- inputList allowedUnsafeSysctls
                            _cargs_, _args_

                        [<CustomOperation("defaultAddCapabilities")>]
                        member _.DefaultAddCapabilities(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAddCapabilities)
                            =
                            _args_.DefaultAddCapabilities <- inputList defaultAddCapabilities
                            _cargs_, _args_

                        [<CustomOperation("defaultAllowPrivilegeEscalation")>]
                        member _.DefaultAllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAllowPrivilegeEscalation)
                            =
                            _args_.DefaultAllowPrivilegeEscalation <- input defaultAllowPrivilegeEscalation
                            _cargs_, _args_

                        member _.DefaultAllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAllowPrivilegeEscalation)
                            =
                            _args_.DefaultAllowPrivilegeEscalation <- io defaultAllowPrivilegeEscalation
                            _cargs_, _args_

                        [<CustomOperation("forbiddenSysctls")>]
                        member _.ForbiddenSysctls((_cargs_, _args_: PodSecurityPolicySpecArgs), forbiddenSysctls) =
                            _args_.ForbiddenSysctls <- inputList forbiddenSysctls
                            _cargs_, _args_

                        [<CustomOperation("fsGroup")>]
                        member _.FsGroup((_cargs_, _args_: PodSecurityPolicySpecArgs), fsGroup) =
                            _args_.FsGroup <- input fsGroup
                            _cargs_, _args_

                        [<CustomOperation("hostIPC")>]
                        member _.HostIPC((_cargs_, _args_: PodSecurityPolicySpecArgs), hostIPC) =
                            _args_.HostIPC <- input hostIPC
                            _cargs_, _args_

                        member _.HostIPC((_cargs_, _args_: PodSecurityPolicySpecArgs), hostIPC) =
                            _args_.HostIPC <- io hostIPC
                            _cargs_, _args_

                        [<CustomOperation("hostNetwork")>]
                        member _.HostNetwork((_cargs_, _args_: PodSecurityPolicySpecArgs), hostNetwork) =
                            _args_.HostNetwork <- input hostNetwork
                            _cargs_, _args_

                        member _.HostNetwork((_cargs_, _args_: PodSecurityPolicySpecArgs), hostNetwork) =
                            _args_.HostNetwork <- io hostNetwork
                            _cargs_, _args_

                        [<CustomOperation("hostPID")>]
                        member _.HostPID((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPID) =
                            _args_.HostPID <- input hostPID
                            _cargs_, _args_

                        member _.HostPID((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPID) =
                            _args_.HostPID <- io hostPID
                            _cargs_, _args_

                        [<CustomOperation("hostPorts")>]
                        member _.HostPorts((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPorts) =
                            _args_.HostPorts <- inputList hostPorts
                            _cargs_, _args_

                        [<CustomOperation("privileged")>]
                        member _.Privileged((_cargs_, _args_: PodSecurityPolicySpecArgs), privileged) =
                            _args_.Privileged <- input privileged
                            _cargs_, _args_

                        member _.Privileged((_cargs_, _args_: PodSecurityPolicySpecArgs), privileged) =
                            _args_.Privileged <- io privileged
                            _cargs_, _args_

                        [<CustomOperation("readOnlyRootFilesystem")>]
                        member _.ReadOnlyRootFilesystem(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            readOnlyRootFilesystem)
                            =
                            _args_.ReadOnlyRootFilesystem <- input readOnlyRootFilesystem
                            _cargs_, _args_

                        member _.ReadOnlyRootFilesystem(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            readOnlyRootFilesystem)
                            =
                            _args_.ReadOnlyRootFilesystem <- io readOnlyRootFilesystem
                            _cargs_, _args_

                        [<CustomOperation("requiredDropCapabilities")>]
                        member _.RequiredDropCapabilities(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            requiredDropCapabilities)
                            =
                            _args_.RequiredDropCapabilities <- inputList requiredDropCapabilities
                            _cargs_, _args_

                        [<CustomOperation("runAsGroup")>]
                        member _.RunAsGroup((_cargs_, _args_: PodSecurityPolicySpecArgs), runAsGroup) =
                            _args_.RunAsGroup <- input runAsGroup
                            _cargs_, _args_

                        [<CustomOperation("runAsUser")>]
                        member _.RunAsUser((_cargs_, _args_: PodSecurityPolicySpecArgs), runAsUser) =
                            _args_.RunAsUser <- input runAsUser
                            _cargs_, _args_

                        [<CustomOperation("runtimeClass")>]
                        member _.RuntimeClass((_cargs_, _args_: PodSecurityPolicySpecArgs), runtimeClass) =
                            _args_.RuntimeClass <- input runtimeClass
                            _cargs_, _args_

                        [<CustomOperation("seLinux")>]
                        member _.SeLinux((_cargs_, _args_: PodSecurityPolicySpecArgs), seLinux) =
                            _args_.SeLinux <- input seLinux
                            _cargs_, _args_

                        [<CustomOperation("supplementalGroups")>]
                        member _.SupplementalGroups((_cargs_, _args_: PodSecurityPolicySpecArgs), supplementalGroups) =
                            _args_.SupplementalGroups <- input supplementalGroups
                            _cargs_, _args_

                        [<CustomOperation("volumes")>]
                        member _.Volumes((_cargs_, _args_: PodSecurityPolicySpecArgs), volumes) =
                            _args_.Volumes <- inputList volumes
                            _cargs_, _args_

                    let podSecurityPolicySpec = PodSecurityPolicySpecBuilder()

                [<AutoOpen>]
                module ReplicaSetCondition =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type ReplicaSetConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetConditionArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: ReplicaSetConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: ReplicaSetConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: ReplicaSetConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: ReplicaSetConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: ReplicaSetConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let replicaSetCondition = ReplicaSetConditionBuilder()

                [<AutoOpen>]
                module ReplicaSetSpec =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type ReplicaSetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetSpecArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("minReadySeconds")>]
                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- input minReadySeconds
                            _cargs_, _args_

                        member _.MinReadySeconds((_cargs_, _args_: ReplicaSetSpecArgs), minReadySeconds) =
                            _args_.MinReadySeconds <- io minReadySeconds
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetSpecArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: ReplicaSetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("template")>]
                        member _.Template((_cargs_, _args_: ReplicaSetSpecArgs), template) =
                            _args_.Template <- input template
                            _cargs_, _args_

                    let replicaSetSpec = ReplicaSetSpecBuilder()

                [<AutoOpen>]
                module ReplicaSetStatus =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type ReplicaSetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ReplicaSetStatusArgs()
                        member _.Run(_cargs_, _args_: ReplicaSetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ReplicaSetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("availableReplicas")>]
                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- input availableReplicas
                            _cargs_, _args_

                        member _.AvailableReplicas((_cargs_, _args_: ReplicaSetStatusArgs), availableReplicas) =
                            _args_.AvailableReplicas <- io availableReplicas
                            _cargs_, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: ReplicaSetStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                        [<CustomOperation("fullyLabeledReplicas")>]
                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- input fullyLabeledReplicas
                            _cargs_, _args_

                        member _.FullyLabeledReplicas((_cargs_, _args_: ReplicaSetStatusArgs), fullyLabeledReplicas) =
                            _args_.FullyLabeledReplicas <- io fullyLabeledReplicas
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: ReplicaSetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                        [<CustomOperation("readyReplicas")>]
                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- input readyReplicas
                            _cargs_, _args_

                        member _.ReadyReplicas((_cargs_, _args_: ReplicaSetStatusArgs), readyReplicas) =
                            _args_.ReadyReplicas <- io readyReplicas
                            _cargs_, _args_

                        [<CustomOperation("replicas")>]
                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- input replicas
                            _cargs_, _args_

                        member _.Replicas((_cargs_, _args_: ReplicaSetStatusArgs), replicas) =
                            _args_.Replicas <- io replicas
                            _cargs_, _args_

                    let replicaSetStatus = ReplicaSetStatusBuilder()

                [<AutoOpen>]
                module RollbackConfig =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type RollbackConfigBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RollbackConfigArgs()
                        member _.Run(_cargs_, _args_: RollbackConfigArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RollbackConfigArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("revision")>]
                        member _.Revision((_cargs_, _args_: RollbackConfigArgs), revision) =
                            _args_.Revision <- input revision
                            _cargs_, _args_

                        member _.Revision((_cargs_, _args_: RollbackConfigArgs), revision) =
                            _args_.Revision <- io revision
                            _cargs_, _args_

                    let rollbackConfig = RollbackConfigBuilder()

                [<AutoOpen>]
                module RunAsGroupStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type RunAsGroupStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RunAsGroupStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RunAsGroupStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let runAsGroupStrategyOptions = RunAsGroupStrategyOptionsBuilder()

                [<AutoOpen>]
                module RunAsUserStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type RunAsUserStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RunAsUserStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RunAsUserStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RunAsUserStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: RunAsUserStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: RunAsUserStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: RunAsUserStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let runAsUserStrategyOptions = RunAsUserStrategyOptionsBuilder()

                [<AutoOpen>]
                module RuntimeClassStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type RuntimeClassStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RuntimeClassStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RuntimeClassStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RuntimeClassStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allowedRuntimeClassNames")>]
                        member _.AllowedRuntimeClassNames(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            allowedRuntimeClassNames)
                            =
                            _args_.AllowedRuntimeClassNames <- inputList allowedRuntimeClassNames
                            _cargs_, _args_

                        [<CustomOperation("defaultRuntimeClassName")>]
                        member _.DefaultRuntimeClassName(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            defaultRuntimeClassName)
                            =
                            _args_.DefaultRuntimeClassName <- input defaultRuntimeClassName
                            _cargs_, _args_

                        member _.DefaultRuntimeClassName(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            defaultRuntimeClassName)
                            =
                            _args_.DefaultRuntimeClassName <- io defaultRuntimeClassName
                            _cargs_, _args_

                    let runtimeClassStrategyOptions = RuntimeClassStrategyOptionsBuilder()

                [<AutoOpen>]
                module SELinuxStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type SELinuxStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SELinuxStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: SELinuxStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SELinuxStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: SELinuxStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: SELinuxStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                        [<CustomOperation("seLinuxOptions")>]
                        member _.SeLinuxOptions((_cargs_, _args_: SELinuxStrategyOptionsArgs), seLinuxOptions) =
                            _args_.SeLinuxOptions <- input seLinuxOptions
                            _cargs_, _args_

                    let sELinuxStrategyOptions = SELinuxStrategyOptionsBuilder()

                [<AutoOpen>]
                module SupplementalGroupsStrategyOptions =
                    open Pulumi.Kubernetes.Extensions.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

                    type SupplementalGroupsStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SupplementalGroupsStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let supplementalGroupsStrategyOptions =
                        SupplementalGroupsStrategyOptionsBuilder()

        module FlowControl =
            module V1Alpha1 =
                [<AutoOpen>]
                module FlowDistinguisherMethod =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type FlowDistinguisherMethodBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlowDistinguisherMethodArgs()
                        member _.Run(_cargs_, _args_: FlowDistinguisherMethodArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlowDistinguisherMethodArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: FlowDistinguisherMethodArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: FlowDistinguisherMethodArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let flowDistinguisherMethod = FlowDistinguisherMethodBuilder()

                [<AutoOpen>]
                module FlowSchemaCondition =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type FlowSchemaConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlowSchemaConditionArgs()
                        member _.Run(_cargs_, _args_: FlowSchemaConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlowSchemaConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime((_cargs_, _args_: FlowSchemaConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime((_cargs_, _args_: FlowSchemaConditionArgs), lastTransitionTime) =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: FlowSchemaConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: FlowSchemaConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: FlowSchemaConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: FlowSchemaConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: FlowSchemaConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: FlowSchemaConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: FlowSchemaConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: FlowSchemaConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let flowSchemaCondition = FlowSchemaConditionBuilder()

                [<AutoOpen>]
                module FlowSchemaSpec =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type FlowSchemaSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlowSchemaSpecArgs()
                        member _.Run(_cargs_, _args_: FlowSchemaSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlowSchemaSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("distinguisherMethod")>]
                        member _.DistinguisherMethod((_cargs_, _args_: FlowSchemaSpecArgs), distinguisherMethod) =
                            _args_.DistinguisherMethod <- input distinguisherMethod
                            _cargs_, _args_

                        [<CustomOperation("matchingPrecedence")>]
                        member _.MatchingPrecedence((_cargs_, _args_: FlowSchemaSpecArgs), matchingPrecedence) =
                            _args_.MatchingPrecedence <- input matchingPrecedence
                            _cargs_, _args_

                        member _.MatchingPrecedence((_cargs_, _args_: FlowSchemaSpecArgs), matchingPrecedence) =
                            _args_.MatchingPrecedence <- io matchingPrecedence
                            _cargs_, _args_

                        [<CustomOperation("priorityLevelConfiguration")>]
                        member _.PriorityLevelConfiguration(
                            (_cargs_, _args_: FlowSchemaSpecArgs),
                            priorityLevelConfiguration)
                            =
                            _args_.PriorityLevelConfiguration <- input priorityLevelConfiguration
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: FlowSchemaSpecArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                    let flowSchemaSpec = FlowSchemaSpecBuilder()

                [<AutoOpen>]
                module FlowSchemaStatus =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type FlowSchemaStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FlowSchemaStatusArgs()
                        member _.Run(_cargs_, _args_: FlowSchemaStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FlowSchemaStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: FlowSchemaStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                    let flowSchemaStatus = FlowSchemaStatusBuilder()

                [<AutoOpen>]
                module GroupSubject =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type GroupSubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, GroupSubjectArgs()
                        member _.Run(_cargs_, _args_: GroupSubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: GroupSubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: GroupSubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: GroupSubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let groupSubject = GroupSubjectBuilder()

                [<AutoOpen>]
                module LimitResponse =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type LimitResponseBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LimitResponseArgs()
                        member _.Run(_cargs_, _args_: LimitResponseArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LimitResponseArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("queuing")>]
                        member _.Queuing((_cargs_, _args_: LimitResponseArgs), queuing) =
                            _args_.Queuing <- input queuing
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: LimitResponseArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: LimitResponseArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let limitResponse = LimitResponseBuilder()

                [<AutoOpen>]
                module LimitedPriorityLevelConfiguration =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type LimitedPriorityLevelConfigurationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LimitedPriorityLevelConfigurationArgs()
                        member _.Run(_cargs_, _args_: LimitedPriorityLevelConfigurationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LimitedPriorityLevelConfigurationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("assuredConcurrencyShares")>]
                        member _.AssuredConcurrencyShares(
                            (_cargs_, _args_: LimitedPriorityLevelConfigurationArgs),
                            assuredConcurrencyShares)
                            =
                            _args_.AssuredConcurrencyShares <- input assuredConcurrencyShares
                            _cargs_, _args_

                        member _.AssuredConcurrencyShares(
                            (_cargs_, _args_: LimitedPriorityLevelConfigurationArgs),
                            assuredConcurrencyShares)
                            =
                            _args_.AssuredConcurrencyShares <- io assuredConcurrencyShares
                            _cargs_, _args_

                        [<CustomOperation("limitResponse")>]
                        member _.LimitResponse((_cargs_, _args_: LimitedPriorityLevelConfigurationArgs), limitResponse) =
                            _args_.LimitResponse <- input limitResponse
                            _cargs_, _args_

                    let limitedPriorityLevelConfiguration =
                        LimitedPriorityLevelConfigurationBuilder()

                [<AutoOpen>]
                module NonResourcePolicyRule =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type NonResourcePolicyRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NonResourcePolicyRuleArgs()
                        member _.Run(_cargs_, _args_: NonResourcePolicyRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NonResourcePolicyRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nonResourceURLs")>]
                        member _.NonResourceURLs((_cargs_, _args_: NonResourcePolicyRuleArgs), nonResourceURLs) =
                            _args_.NonResourceURLs <- inputList nonResourceURLs
                            _cargs_, _args_

                        [<CustomOperation("verbs")>]
                        member _.Verbs((_cargs_, _args_: NonResourcePolicyRuleArgs), verbs) =
                            _args_.Verbs <- inputList verbs
                            _cargs_, _args_

                    let nonResourcePolicyRule = NonResourcePolicyRuleBuilder()

                [<AutoOpen>]
                module PolicyRulesWithSubjects =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type PolicyRulesWithSubjectsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PolicyRulesWithSubjectsArgs()
                        member _.Run(_cargs_, _args_: PolicyRulesWithSubjectsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PolicyRulesWithSubjectsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nonResourceRules")>]
                        member _.NonResourceRules((_cargs_, _args_: PolicyRulesWithSubjectsArgs), nonResourceRules) =
                            _args_.NonResourceRules <- inputList nonResourceRules
                            _cargs_, _args_

                        [<CustomOperation("resourceRules")>]
                        member _.ResourceRules((_cargs_, _args_: PolicyRulesWithSubjectsArgs), resourceRules) =
                            _args_.ResourceRules <- inputList resourceRules
                            _cargs_, _args_

                        [<CustomOperation("subjects")>]
                        member _.Subjects((_cargs_, _args_: PolicyRulesWithSubjectsArgs), subjects) =
                            _args_.Subjects <- inputList subjects
                            _cargs_, _args_

                    let policyRulesWithSubjects = PolicyRulesWithSubjectsBuilder()

                [<AutoOpen>]
                module PriorityLevelConfigurationCondition =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type PriorityLevelConfigurationConditionBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationConditionArgs()
                        member _.Run(_cargs_, _args_: PriorityLevelConfigurationConditionArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("lastTransitionTime")>]
                        member _.LastTransitionTime(
                            (_cargs_, _args_: PriorityLevelConfigurationConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- input lastTransitionTime
                            _cargs_, _args_

                        member _.LastTransitionTime(
                            (_cargs_, _args_: PriorityLevelConfigurationConditionArgs),
                            lastTransitionTime)
                            =
                            _args_.LastTransitionTime <- io lastTransitionTime
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                        [<CustomOperation("status")>]
                        member _.Status((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), status) =
                            _args_.Status <- input status
                            _cargs_, _args_

                        member _.Status((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), status) =
                            _args_.Status <- io status
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: PriorityLevelConfigurationConditionArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let priorityLevelConfigurationCondition =
                        PriorityLevelConfigurationConditionBuilder()

                [<AutoOpen>]
                module PriorityLevelConfigurationReference =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type PriorityLevelConfigurationReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationReferenceArgs()
                        member _.Run(_cargs_, _args_: PriorityLevelConfigurationReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PriorityLevelConfigurationReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: PriorityLevelConfigurationReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: PriorityLevelConfigurationReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let priorityLevelConfigurationReference =
                        PriorityLevelConfigurationReferenceBuilder()

                [<AutoOpen>]
                module PriorityLevelConfigurationSpec =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type PriorityLevelConfigurationSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationSpecArgs()
                        member _.Run(_cargs_, _args_: PriorityLevelConfigurationSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PriorityLevelConfigurationSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("limited")>]
                        member _.Limited((_cargs_, _args_: PriorityLevelConfigurationSpecArgs), limited) =
                            _args_.Limited <- input limited
                            _cargs_, _args_

                        [<CustomOperation("type")>]
                        member _.Type((_cargs_, _args_: PriorityLevelConfigurationSpecArgs), ``type``) =
                            _args_.Type <- input ``type``
                            _cargs_, _args_

                        member _.Type((_cargs_, _args_: PriorityLevelConfigurationSpecArgs), ``type``) =
                            _args_.Type <- io ``type``
                            _cargs_, _args_

                    let priorityLevelConfigurationSpec = PriorityLevelConfigurationSpecBuilder()

                [<AutoOpen>]
                module PriorityLevelConfigurationStatus =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type PriorityLevelConfigurationStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationStatusArgs()
                        member _.Run(_cargs_, _args_: PriorityLevelConfigurationStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PriorityLevelConfigurationStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("conditions")>]
                        member _.Conditions((_cargs_, _args_: PriorityLevelConfigurationStatusArgs), conditions) =
                            _args_.Conditions <- inputList conditions
                            _cargs_, _args_

                    let priorityLevelConfigurationStatus =
                        PriorityLevelConfigurationStatusBuilder()

                [<AutoOpen>]
                module QueuingConfiguration =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type QueuingConfigurationBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, QueuingConfigurationArgs()
                        member _.Run(_cargs_, _args_: QueuingConfigurationArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: QueuingConfigurationArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("handSize")>]
                        member _.HandSize((_cargs_, _args_: QueuingConfigurationArgs), handSize) =
                            _args_.HandSize <- input handSize
                            _cargs_, _args_

                        member _.HandSize((_cargs_, _args_: QueuingConfigurationArgs), handSize) =
                            _args_.HandSize <- io handSize
                            _cargs_, _args_

                        [<CustomOperation("queueLengthLimit")>]
                        member _.QueueLengthLimit((_cargs_, _args_: QueuingConfigurationArgs), queueLengthLimit) =
                            _args_.QueueLengthLimit <- input queueLengthLimit
                            _cargs_, _args_

                        member _.QueueLengthLimit((_cargs_, _args_: QueuingConfigurationArgs), queueLengthLimit) =
                            _args_.QueueLengthLimit <- io queueLengthLimit
                            _cargs_, _args_

                        [<CustomOperation("queues")>]
                        member _.Queues((_cargs_, _args_: QueuingConfigurationArgs), queues) =
                            _args_.Queues <- input queues
                            _cargs_, _args_

                        member _.Queues((_cargs_, _args_: QueuingConfigurationArgs), queues) =
                            _args_.Queues <- io queues
                            _cargs_, _args_

                    let queuingConfiguration = QueuingConfigurationBuilder()

                [<AutoOpen>]
                module ResourcePolicyRule =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type ResourcePolicyRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ResourcePolicyRuleArgs()
                        member _.Run(_cargs_, _args_: ResourcePolicyRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ResourcePolicyRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: ResourcePolicyRuleArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("clusterScope")>]
                        member _.ClusterScope((_cargs_, _args_: ResourcePolicyRuleArgs), clusterScope) =
                            _args_.ClusterScope <- input clusterScope
                            _cargs_, _args_

                        member _.ClusterScope((_cargs_, _args_: ResourcePolicyRuleArgs), clusterScope) =
                            _args_.ClusterScope <- io clusterScope
                            _cargs_, _args_

                        [<CustomOperation("namespaces")>]
                        member _.Namespaces((_cargs_, _args_: ResourcePolicyRuleArgs), namespaces) =
                            _args_.Namespaces <- inputList namespaces
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: ResourcePolicyRuleArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("verbs")>]
                        member _.Verbs((_cargs_, _args_: ResourcePolicyRuleArgs), verbs) =
                            _args_.Verbs <- inputList verbs
                            _cargs_, _args_

                    let resourcePolicyRule = ResourcePolicyRuleBuilder()

                [<AutoOpen>]
                module ServiceAccountSubject =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type ServiceAccountSubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ServiceAccountSubjectArgs()
                        member _.Run(_cargs_, _args_: ServiceAccountSubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ServiceAccountSubjectArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ServiceAccountSubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ServiceAccountSubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ServiceAccountSubjectArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ServiceAccountSubjectArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let serviceAccountSubject = ServiceAccountSubjectBuilder()

                [<AutoOpen>]
                module Subject =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type SubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectArgs()
                        member _.Run(_cargs_, _args_: SubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: SubjectArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("serviceAccount")>]
                        member _.ServiceAccount((_cargs_, _args_: SubjectArgs), serviceAccount) =
                            _args_.ServiceAccount <- input serviceAccount
                            _cargs_, _args_

                        [<CustomOperation("user")>]
                        member _.User((_cargs_, _args_: SubjectArgs), user) =
                            _args_.User <- input user
                            _cargs_, _args_

                    let subject = SubjectBuilder()

                [<AutoOpen>]
                module UserSubject =
                    open Pulumi.Kubernetes.FlowControl.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

                    type UserSubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, UserSubjectArgs()
                        member _.Run(_cargs_, _args_: UserSubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: UserSubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: UserSubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: UserSubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let userSubject = UserSubjectBuilder()

        module Meta =
            module V1 =
                [<AutoOpen>]
                module LabelSelector =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type LabelSelectorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LabelSelectorArgs()
                        member _.Run(_cargs_, _args_: LabelSelectorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LabelSelectorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("matchExpressions")>]
                        member _.MatchExpressions((_cargs_, _args_: LabelSelectorArgs), matchExpressions) =
                            _args_.MatchExpressions <- inputList matchExpressions
                            _cargs_, _args_

                        [<CustomOperation("matchLabels")>]
                        member _.MatchLabels((_cargs_, _args_: LabelSelectorArgs), matchLabels) =
                            _args_.MatchLabels <- inputMap matchLabels
                            _cargs_, _args_

                    let labelSelector = LabelSelectorBuilder()

                [<AutoOpen>]
                module LabelSelectorRequirement =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type LabelSelectorRequirementBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, LabelSelectorRequirementArgs()
                        member _.Run(_cargs_, _args_: LabelSelectorRequirementArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: LabelSelectorRequirementArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("key")>]
                        member _.Key((_cargs_, _args_: LabelSelectorRequirementArgs), key) =
                            _args_.Key <- input key
                            _cargs_, _args_

                        member _.Key((_cargs_, _args_: LabelSelectorRequirementArgs), key) =
                            _args_.Key <- io key
                            _cargs_, _args_

                        [<CustomOperation("operator")>]
                        member _.Operator((_cargs_, _args_: LabelSelectorRequirementArgs), operator) =
                            _args_.Operator <- input operator
                            _cargs_, _args_

                        member _.Operator((_cargs_, _args_: LabelSelectorRequirementArgs), operator) =
                            _args_.Operator <- io operator
                            _cargs_, _args_

                        [<CustomOperation("values")>]
                        member _.Values((_cargs_, _args_: LabelSelectorRequirementArgs), values) =
                            _args_.Values <- inputList values
                            _cargs_, _args_

                    let labelSelectorRequirement = LabelSelectorRequirementBuilder()

                [<AutoOpen>]
                module ListMeta =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type ListMetaBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ListMetaArgs()
                        member _.Run(_cargs_, _args_: ListMetaArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ListMetaArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("continue")>]
                        member _.Continue((_cargs_, _args_: ListMetaArgs), ``continue``) =
                            _args_.Continue <- input ``continue``
                            _cargs_, _args_

                        member _.Continue((_cargs_, _args_: ListMetaArgs), ``continue``) =
                            _args_.Continue <- io ``continue``
                            _cargs_, _args_

                        [<CustomOperation("remainingItemCount")>]
                        member _.RemainingItemCount((_cargs_, _args_: ListMetaArgs), remainingItemCount) =
                            _args_.RemainingItemCount <- input remainingItemCount
                            _cargs_, _args_

                        member _.RemainingItemCount((_cargs_, _args_: ListMetaArgs), remainingItemCount) =
                            _args_.RemainingItemCount <- io remainingItemCount
                            _cargs_, _args_

                        [<CustomOperation("resourceVersion")>]
                        member _.ResourceVersion((_cargs_, _args_: ListMetaArgs), resourceVersion) =
                            _args_.ResourceVersion <- input resourceVersion
                            _cargs_, _args_

                        member _.ResourceVersion((_cargs_, _args_: ListMetaArgs), resourceVersion) =
                            _args_.ResourceVersion <- io resourceVersion
                            _cargs_, _args_

                        [<CustomOperation("selfLink")>]
                        member _.SelfLink((_cargs_, _args_: ListMetaArgs), selfLink) =
                            _args_.SelfLink <- input selfLink
                            _cargs_, _args_

                        member _.SelfLink((_cargs_, _args_: ListMetaArgs), selfLink) =
                            _args_.SelfLink <- io selfLink
                            _cargs_, _args_

                    let listMeta = ListMetaBuilder()

                [<AutoOpen>]
                module ObjectMeta =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type ObjectMetaBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, ObjectMetaArgs()
                        member _.Run(_cargs_, _args_: ObjectMetaArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: ObjectMetaArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("annotations")>]
                        member _.Annotations((_cargs_, _args_: ObjectMetaArgs), annotations) =
                            _args_.Annotations <- inputMap annotations
                            _cargs_, _args_

                        [<CustomOperation("clusterName")>]
                        member _.ClusterName((_cargs_, _args_: ObjectMetaArgs), clusterName) =
                            _args_.ClusterName <- input clusterName
                            _cargs_, _args_

                        member _.ClusterName((_cargs_, _args_: ObjectMetaArgs), clusterName) =
                            _args_.ClusterName <- io clusterName
                            _cargs_, _args_

                        [<CustomOperation("creationTimestamp")>]
                        member _.CreationTimestamp((_cargs_, _args_: ObjectMetaArgs), creationTimestamp) =
                            _args_.CreationTimestamp <- input creationTimestamp
                            _cargs_, _args_

                        member _.CreationTimestamp((_cargs_, _args_: ObjectMetaArgs), creationTimestamp) =
                            _args_.CreationTimestamp <- io creationTimestamp
                            _cargs_, _args_

                        [<CustomOperation("deletionGracePeriodSeconds")>]
                        member _.DeletionGracePeriodSeconds(
                            (_cargs_, _args_: ObjectMetaArgs),
                            deletionGracePeriodSeconds)
                            =
                            _args_.DeletionGracePeriodSeconds <- input deletionGracePeriodSeconds
                            _cargs_, _args_

                        member _.DeletionGracePeriodSeconds(
                            (_cargs_, _args_: ObjectMetaArgs),
                            deletionGracePeriodSeconds)
                            =
                            _args_.DeletionGracePeriodSeconds <- io deletionGracePeriodSeconds
                            _cargs_, _args_

                        [<CustomOperation("deletionTimestamp")>]
                        member _.DeletionTimestamp((_cargs_, _args_: ObjectMetaArgs), deletionTimestamp) =
                            _args_.DeletionTimestamp <- input deletionTimestamp
                            _cargs_, _args_

                        member _.DeletionTimestamp((_cargs_, _args_: ObjectMetaArgs), deletionTimestamp) =
                            _args_.DeletionTimestamp <- io deletionTimestamp
                            _cargs_, _args_

                        [<CustomOperation("finalizers")>]
                        member _.Finalizers((_cargs_, _args_: ObjectMetaArgs), finalizers) =
                            _args_.Finalizers <- inputList finalizers
                            _cargs_, _args_

                        [<CustomOperation("generateName")>]
                        member _.GenerateName((_cargs_, _args_: ObjectMetaArgs), generateName) =
                            _args_.GenerateName <- input generateName
                            _cargs_, _args_

                        member _.GenerateName((_cargs_, _args_: ObjectMetaArgs), generateName) =
                            _args_.GenerateName <- io generateName
                            _cargs_, _args_

                        [<CustomOperation("generation")>]
                        member _.Generation((_cargs_, _args_: ObjectMetaArgs), generation) =
                            _args_.Generation <- input generation
                            _cargs_, _args_

                        member _.Generation((_cargs_, _args_: ObjectMetaArgs), generation) =
                            _args_.Generation <- io generation
                            _cargs_, _args_

                        [<CustomOperation("labels")>]
                        member _.Labels((_cargs_, _args_: ObjectMetaArgs), labels) =
                            _args_.Labels <- inputMap labels
                            _cargs_, _args_

                        [<CustomOperation("managedFields")>]
                        member _.ManagedFields((_cargs_, _args_: ObjectMetaArgs), managedFields) =
                            _args_.ManagedFields <- inputList managedFields
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: ObjectMetaArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: ObjectMetaArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: ObjectMetaArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: ObjectMetaArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                        [<CustomOperation("ownerReferences")>]
                        member _.OwnerReferences((_cargs_, _args_: ObjectMetaArgs), ownerReferences) =
                            _args_.OwnerReferences <- inputList ownerReferences
                            _cargs_, _args_

                        [<CustomOperation("resourceVersion")>]
                        member _.ResourceVersion((_cargs_, _args_: ObjectMetaArgs), resourceVersion) =
                            _args_.ResourceVersion <- input resourceVersion
                            _cargs_, _args_

                        member _.ResourceVersion((_cargs_, _args_: ObjectMetaArgs), resourceVersion) =
                            _args_.ResourceVersion <- io resourceVersion
                            _cargs_, _args_

                        [<CustomOperation("selfLink")>]
                        member _.SelfLink((_cargs_, _args_: ObjectMetaArgs), selfLink) =
                            _args_.SelfLink <- input selfLink
                            _cargs_, _args_

                        member _.SelfLink((_cargs_, _args_: ObjectMetaArgs), selfLink) =
                            _args_.SelfLink <- io selfLink
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: ObjectMetaArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: ObjectMetaArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let objectMeta = ObjectMetaBuilder()

                [<AutoOpen>]
                module OwnerReference =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type OwnerReferenceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, OwnerReferenceArgs()
                        member _.Run(_cargs_, _args_: OwnerReferenceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: OwnerReferenceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: OwnerReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: OwnerReferenceArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("blockOwnerDeletion")>]
                        member _.BlockOwnerDeletion((_cargs_, _args_: OwnerReferenceArgs), blockOwnerDeletion) =
                            _args_.BlockOwnerDeletion <- input blockOwnerDeletion
                            _cargs_, _args_

                        member _.BlockOwnerDeletion((_cargs_, _args_: OwnerReferenceArgs), blockOwnerDeletion) =
                            _args_.BlockOwnerDeletion <- io blockOwnerDeletion
                            _cargs_, _args_

                        [<CustomOperation("controller")>]
                        member _.Controller((_cargs_, _args_: OwnerReferenceArgs), controller) =
                            _args_.Controller <- input controller
                            _cargs_, _args_

                        member _.Controller((_cargs_, _args_: OwnerReferenceArgs), controller) =
                            _args_.Controller <- io controller
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: OwnerReferenceArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: OwnerReferenceArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: OwnerReferenceArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: OwnerReferenceArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: OwnerReferenceArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: OwnerReferenceArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let ownerReference = OwnerReferenceBuilder()

                [<AutoOpen>]
                module StatusCause =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type StatusCauseBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatusCauseArgs()
                        member _.Run(_cargs_, _args_: StatusCauseArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatusCauseArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("field")>]
                        member _.Field((_cargs_, _args_: StatusCauseArgs), field) =
                            _args_.Field <- input field
                            _cargs_, _args_

                        member _.Field((_cargs_, _args_: StatusCauseArgs), field) =
                            _args_.Field <- io field
                            _cargs_, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: StatusCauseArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: StatusCauseArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("reason")>]
                        member _.Reason((_cargs_, _args_: StatusCauseArgs), reason) =
                            _args_.Reason <- input reason
                            _cargs_, _args_

                        member _.Reason((_cargs_, _args_: StatusCauseArgs), reason) =
                            _args_.Reason <- io reason
                            _cargs_, _args_

                    let statusCause = StatusCauseBuilder()

                [<AutoOpen>]
                module StatusDetails =
                    open Pulumi.Kubernetes.Meta.V1
                    open Pulumi.Kubernetes.Types.Inputs.Meta.V1

                    type StatusDetailsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, StatusDetailsArgs()
                        member _.Run(_cargs_, _args_: StatusDetailsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: StatusDetailsArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("causes")>]
                        member _.Causes((_cargs_, _args_: StatusDetailsArgs), causes) =
                            _args_.Causes <- inputList causes
                            _cargs_, _args_

                        [<CustomOperation("group")>]
                        member _.Group((_cargs_, _args_: StatusDetailsArgs), group) =
                            _args_.Group <- input group
                            _cargs_, _args_

                        member _.Group((_cargs_, _args_: StatusDetailsArgs), group) =
                            _args_.Group <- io group
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: StatusDetailsArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: StatusDetailsArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: StatusDetailsArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: StatusDetailsArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("retryAfterSeconds")>]
                        member _.RetryAfterSeconds((_cargs_, _args_: StatusDetailsArgs), retryAfterSeconds) =
                            _args_.RetryAfterSeconds <- input retryAfterSeconds
                            _cargs_, _args_

                        member _.RetryAfterSeconds((_cargs_, _args_: StatusDetailsArgs), retryAfterSeconds) =
                            _args_.RetryAfterSeconds <- io retryAfterSeconds
                            _cargs_, _args_

                        [<CustomOperation("uid")>]
                        member _.Uid((_cargs_, _args_: StatusDetailsArgs), uid) =
                            _args_.Uid <- input uid
                            _cargs_, _args_

                        member _.Uid((_cargs_, _args_: StatusDetailsArgs), uid) =
                            _args_.Uid <- io uid
                            _cargs_, _args_

                    let statusDetails = StatusDetailsBuilder()

        module Networking =
            module V1 =
                [<AutoOpen>]
                module IPBlock =
                    open Pulumi.Kubernetes.Networking.V1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1

                    type IPBlockBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IPBlockArgs()
                        member _.Run(_cargs_, _args_: IPBlockArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IPBlockArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("cidr")>]
                        member _.Cidr((_cargs_, _args_: IPBlockArgs), cidr) =
                            _args_.Cidr <- input cidr
                            _cargs_, _args_

                        member _.Cidr((_cargs_, _args_: IPBlockArgs), cidr) =
                            _args_.Cidr <- io cidr
                            _cargs_, _args_

                        [<CustomOperation("except")>]
                        member _.Except((_cargs_, _args_: IPBlockArgs), except) =
                            _args_.Except <- inputList except
                            _cargs_, _args_

                    let iPBlock = IPBlockBuilder()

                [<AutoOpen>]
                module NetworkPolicyEgressRule =
                    open Pulumi.Kubernetes.Networking.V1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1

                    type NetworkPolicyEgressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyEgressRuleArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyEgressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyEgressRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: NetworkPolicyEgressRuleArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                        [<CustomOperation("to")>]
                        member _.To((_cargs_, _args_: NetworkPolicyEgressRuleArgs), ``to``) =
                            _args_.To <- inputList ``to``
                            _cargs_, _args_

                    let networkPolicyEgressRule = NetworkPolicyEgressRuleBuilder()

                [<AutoOpen>]
                module NetworkPolicyIngressRule =
                    open Pulumi.Kubernetes.Networking.V1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1

                    type NetworkPolicyIngressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyIngressRuleArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyIngressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyIngressRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("from")>]
                        member _.From((_cargs_, _args_: NetworkPolicyIngressRuleArgs), from) =
                            _args_.From <- inputList from
                            _cargs_, _args_

                        [<CustomOperation("ports")>]
                        member _.Ports((_cargs_, _args_: NetworkPolicyIngressRuleArgs), ports) =
                            _args_.Ports <- inputList ports
                            _cargs_, _args_

                    let networkPolicyIngressRule = NetworkPolicyIngressRuleBuilder()

                [<AutoOpen>]
                module NetworkPolicyPeer =
                    open Pulumi.Kubernetes.Networking.V1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1

                    type NetworkPolicyPeerBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicyPeerArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicyPeerArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicyPeerArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ipBlock")>]
                        member _.IpBlock((_cargs_, _args_: NetworkPolicyPeerArgs), ipBlock) =
                            _args_.IpBlock <- input ipBlock
                            _cargs_, _args_

                        [<CustomOperation("namespaceSelector")>]
                        member _.NamespaceSelector((_cargs_, _args_: NetworkPolicyPeerArgs), namespaceSelector) =
                            _args_.NamespaceSelector <- input namespaceSelector
                            _cargs_, _args_

                        [<CustomOperation("podSelector")>]
                        member _.PodSelector((_cargs_, _args_: NetworkPolicyPeerArgs), podSelector) =
                            _args_.PodSelector <- input podSelector
                            _cargs_, _args_

                    let networkPolicyPeer = NetworkPolicyPeerBuilder()

                [<AutoOpen>]
                module NetworkPolicySpec =
                    open Pulumi.Kubernetes.Networking.V1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1

                    type NetworkPolicySpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, NetworkPolicySpecArgs()
                        member _.Run(_cargs_, _args_: NetworkPolicySpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: NetworkPolicySpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("egress")>]
                        member _.Egress((_cargs_, _args_: NetworkPolicySpecArgs), egress) =
                            _args_.Egress <- inputList egress
                            _cargs_, _args_

                        [<CustomOperation("ingress")>]
                        member _.Ingress((_cargs_, _args_: NetworkPolicySpecArgs), ingress) =
                            _args_.Ingress <- inputList ingress
                            _cargs_, _args_

                        [<CustomOperation("podSelector")>]
                        member _.PodSelector((_cargs_, _args_: NetworkPolicySpecArgs), podSelector) =
                            _args_.PodSelector <- input podSelector
                            _cargs_, _args_

                        [<CustomOperation("policyTypes")>]
                        member _.PolicyTypes((_cargs_, _args_: NetworkPolicySpecArgs), policyTypes) =
                            _args_.PolicyTypes <- inputList policyTypes
                            _cargs_, _args_

                    let networkPolicySpec = NetworkPolicySpecBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module HTTPIngressPath =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type HTTPIngressPathBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HTTPIngressPathArgs()
                        member _.Run(_cargs_, _args_: HTTPIngressPathArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HTTPIngressPathArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("backend")>]
                        member _.Backend((_cargs_, _args_: HTTPIngressPathArgs), backend) =
                            _args_.Backend <- input backend
                            _cargs_, _args_

                        [<CustomOperation("path")>]
                        member _.Path((_cargs_, _args_: HTTPIngressPathArgs), path) =
                            _args_.Path <- input path
                            _cargs_, _args_

                        member _.Path((_cargs_, _args_: HTTPIngressPathArgs), path) =
                            _args_.Path <- io path
                            _cargs_, _args_

                        [<CustomOperation("pathType")>]
                        member _.PathType((_cargs_, _args_: HTTPIngressPathArgs), pathType) =
                            _args_.PathType <- input pathType
                            _cargs_, _args_

                        member _.PathType((_cargs_, _args_: HTTPIngressPathArgs), pathType) =
                            _args_.PathType <- io pathType
                            _cargs_, _args_

                    let hTTPIngressPath = HTTPIngressPathBuilder()

                [<AutoOpen>]
                module HTTPIngressRuleValue =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type HTTPIngressRuleValueBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HTTPIngressRuleValueArgs()
                        member _.Run(_cargs_, _args_: HTTPIngressRuleValueArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HTTPIngressRuleValueArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("paths")>]
                        member _.Paths((_cargs_, _args_: HTTPIngressRuleValueArgs), paths) =
                            _args_.Paths <- inputList paths
                            _cargs_, _args_

                    let hTTPIngressRuleValue = HTTPIngressRuleValueBuilder()

                [<AutoOpen>]
                module IngressClassSpec =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type IngressClassSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressClassSpecArgs()
                        member _.Run(_cargs_, _args_: IngressClassSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressClassSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("controller")>]
                        member _.Controller((_cargs_, _args_: IngressClassSpecArgs), controller) =
                            _args_.Controller <- input controller
                            _cargs_, _args_

                        member _.Controller((_cargs_, _args_: IngressClassSpecArgs), controller) =
                            _args_.Controller <- io controller
                            _cargs_, _args_

                        [<CustomOperation("parameters")>]
                        member _.Parameters((_cargs_, _args_: IngressClassSpecArgs), parameters) =
                            _args_.Parameters <- input parameters
                            _cargs_, _args_

                    let ingressClassSpec = IngressClassSpecBuilder()

                [<AutoOpen>]
                module IngressRule =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type IngressRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressRuleArgs()
                        member _.Run(_cargs_, _args_: IngressRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressRuleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("host")>]
                        member _.Host((_cargs_, _args_: IngressRuleArgs), host) =
                            _args_.Host <- input host
                            _cargs_, _args_

                        member _.Host((_cargs_, _args_: IngressRuleArgs), host) =
                            _args_.Host <- io host
                            _cargs_, _args_

                        [<CustomOperation("http")>]
                        member _.Http((_cargs_, _args_: IngressRuleArgs), http) =
                            _args_.Http <- input http
                            _cargs_, _args_

                    let ingressRule = IngressRuleBuilder()

                [<AutoOpen>]
                module IngressSpec =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type IngressSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressSpecArgs()
                        member _.Run(_cargs_, _args_: IngressSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("backend")>]
                        member _.Backend((_cargs_, _args_: IngressSpecArgs), backend) =
                            _args_.Backend <- input backend
                            _cargs_, _args_

                        [<CustomOperation("ingressClassName")>]
                        member _.IngressClassName((_cargs_, _args_: IngressSpecArgs), ingressClassName) =
                            _args_.IngressClassName <- input ingressClassName
                            _cargs_, _args_

                        member _.IngressClassName((_cargs_, _args_: IngressSpecArgs), ingressClassName) =
                            _args_.IngressClassName <- io ingressClassName
                            _cargs_, _args_

                        [<CustomOperation("rules")>]
                        member _.Rules((_cargs_, _args_: IngressSpecArgs), rules) =
                            _args_.Rules <- inputList rules
                            _cargs_, _args_

                        [<CustomOperation("tls")>]
                        member _.Tls((_cargs_, _args_: IngressSpecArgs), tls) =
                            _args_.Tls <- inputList tls
                            _cargs_, _args_

                    let ingressSpec = IngressSpecBuilder()

                [<AutoOpen>]
                module IngressStatus =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type IngressStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressStatusArgs()
                        member _.Run(_cargs_, _args_: IngressStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressStatusArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("loadBalancer")>]
                        member _.LoadBalancer((_cargs_, _args_: IngressStatusArgs), loadBalancer) =
                            _args_.LoadBalancer <- input loadBalancer
                            _cargs_, _args_

                    let ingressStatus = IngressStatusBuilder()

                [<AutoOpen>]
                module IngressTLS =
                    open Pulumi.Kubernetes.Networking.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

                    type IngressTLSBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IngressTLSArgs()
                        member _.Run(_cargs_, _args_: IngressTLSArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IngressTLSArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("hosts")>]
                        member _.Hosts((_cargs_, _args_: IngressTLSArgs), hosts) =
                            _args_.Hosts <- inputList hosts
                            _cargs_, _args_

                        [<CustomOperation("secretName")>]
                        member _.SecretName((_cargs_, _args_: IngressTLSArgs), secretName) =
                            _args_.SecretName <- input secretName
                            _cargs_, _args_

                        member _.SecretName((_cargs_, _args_: IngressTLSArgs), secretName) =
                            _args_.SecretName <- io secretName
                            _cargs_, _args_

                    let ingressTLS = IngressTLSBuilder()

        module Node =
            module V1Alpha1 =
                [<AutoOpen>]
                module Overhead =
                    open Pulumi.Kubernetes.Node.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Node.V1Alpha1

                    type OverheadBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, OverheadArgs()
                        member _.Run(_cargs_, _args_: OverheadArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: OverheadArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podFixed")>]
                        member _.PodFixed((_cargs_, _args_: OverheadArgs), podFixed) =
                            _args_.PodFixed <- inputMap podFixed
                            _cargs_, _args_

                    let overhead = OverheadBuilder()

                [<AutoOpen>]
                module RuntimeClassSpec =
                    open Pulumi.Kubernetes.Node.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Node.V1Alpha1

                    type RuntimeClassSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RuntimeClassSpecArgs()
                        member _.Run(_cargs_, _args_: RuntimeClassSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RuntimeClassSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("overhead")>]
                        member _.Overhead((_cargs_, _args_: RuntimeClassSpecArgs), overhead) =
                            _args_.Overhead <- input overhead
                            _cargs_, _args_

                        [<CustomOperation("runtimeHandler")>]
                        member _.RuntimeHandler((_cargs_, _args_: RuntimeClassSpecArgs), runtimeHandler) =
                            _args_.RuntimeHandler <- input runtimeHandler
                            _cargs_, _args_

                        member _.RuntimeHandler((_cargs_, _args_: RuntimeClassSpecArgs), runtimeHandler) =
                            _args_.RuntimeHandler <- io runtimeHandler
                            _cargs_, _args_

                        [<CustomOperation("scheduling")>]
                        member _.Scheduling((_cargs_, _args_: RuntimeClassSpecArgs), scheduling) =
                            _args_.Scheduling <- input scheduling
                            _cargs_, _args_

                    let runtimeClassSpec = RuntimeClassSpecBuilder()

                [<AutoOpen>]
                module Scheduling =
                    open Pulumi.Kubernetes.Node.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Node.V1Alpha1

                    type SchedulingBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SchedulingArgs()
                        member _.Run(_cargs_, _args_: SchedulingArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SchedulingArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nodeSelector")>]
                        member _.NodeSelector((_cargs_, _args_: SchedulingArgs), nodeSelector) =
                            _args_.NodeSelector <- inputMap nodeSelector
                            _cargs_, _args_

                        [<CustomOperation("tolerations")>]
                        member _.Tolerations((_cargs_, _args_: SchedulingArgs), tolerations) =
                            _args_.Tolerations <- inputList tolerations
                            _cargs_, _args_

                    let scheduling = SchedulingBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module Overhead =
                    open Pulumi.Kubernetes.Node.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Node.V1Beta1

                    type OverheadBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, OverheadArgs()
                        member _.Run(_cargs_, _args_: OverheadArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: OverheadArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("podFixed")>]
                        member _.PodFixed((_cargs_, _args_: OverheadArgs), podFixed) =
                            _args_.PodFixed <- inputMap podFixed
                            _cargs_, _args_

                    let overhead = OverheadBuilder()

                [<AutoOpen>]
                module Scheduling =
                    open Pulumi.Kubernetes.Node.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Node.V1Beta1

                    type SchedulingBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SchedulingArgs()
                        member _.Run(_cargs_, _args_: SchedulingArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SchedulingArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("nodeSelector")>]
                        member _.NodeSelector((_cargs_, _args_: SchedulingArgs), nodeSelector) =
                            _args_.NodeSelector <- inputMap nodeSelector
                            _cargs_, _args_

                        [<CustomOperation("tolerations")>]
                        member _.Tolerations((_cargs_, _args_: SchedulingArgs), tolerations) =
                            _args_.Tolerations <- inputList tolerations
                            _cargs_, _args_

                    let scheduling = SchedulingBuilder()

        module Policy =
            module V1Beta1 =
                [<AutoOpen>]
                module AllowedCSIDriver =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type AllowedCSIDriverBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedCSIDriverArgs()
                        member _.Run(_cargs_, _args_: AllowedCSIDriverArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: AllowedCSIDriverArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let allowedCSIDriver = AllowedCSIDriverBuilder()

                [<AutoOpen>]
                module AllowedFlexVolume =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type AllowedFlexVolumeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedFlexVolumeArgs()
                        member _.Run(_cargs_, _args_: AllowedFlexVolumeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedFlexVolumeArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("driver")>]
                        member _.Driver((_cargs_, _args_: AllowedFlexVolumeArgs), driver) =
                            _args_.Driver <- input driver
                            _cargs_, _args_

                        member _.Driver((_cargs_, _args_: AllowedFlexVolumeArgs), driver) =
                            _args_.Driver <- io driver
                            _cargs_, _args_

                    let allowedFlexVolume = AllowedFlexVolumeBuilder()

                [<AutoOpen>]
                module AllowedHostPath =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type AllowedHostPathBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AllowedHostPathArgs()
                        member _.Run(_cargs_, _args_: AllowedHostPathArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AllowedHostPathArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("pathPrefix")>]
                        member _.PathPrefix((_cargs_, _args_: AllowedHostPathArgs), pathPrefix) =
                            _args_.PathPrefix <- input pathPrefix
                            _cargs_, _args_

                        member _.PathPrefix((_cargs_, _args_: AllowedHostPathArgs), pathPrefix) =
                            _args_.PathPrefix <- io pathPrefix
                            _cargs_, _args_

                        [<CustomOperation("readOnly")>]
                        member _.ReadOnly((_cargs_, _args_: AllowedHostPathArgs), readOnly) =
                            _args_.ReadOnly <- input readOnly
                            _cargs_, _args_

                        member _.ReadOnly((_cargs_, _args_: AllowedHostPathArgs), readOnly) =
                            _args_.ReadOnly <- io readOnly
                            _cargs_, _args_

                    let allowedHostPath = AllowedHostPathBuilder()

                [<AutoOpen>]
                module FSGroupStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type FSGroupStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, FSGroupStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: FSGroupStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: FSGroupStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: FSGroupStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: FSGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: FSGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let fSGroupStrategyOptions = FSGroupStrategyOptionsBuilder()

                [<AutoOpen>]
                module HostPortRange =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type HostPortRangeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, HostPortRangeArgs()
                        member _.Run(_cargs_, _args_: HostPortRangeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: HostPortRangeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("max")>]
                        member _.Max((_cargs_, _args_: HostPortRangeArgs), max) =
                            _args_.Max <- input max
                            _cargs_, _args_

                        member _.Max((_cargs_, _args_: HostPortRangeArgs), max) =
                            _args_.Max <- io max
                            _cargs_, _args_

                        [<CustomOperation("min")>]
                        member _.Min((_cargs_, _args_: HostPortRangeArgs), min) =
                            _args_.Min <- input min
                            _cargs_, _args_

                        member _.Min((_cargs_, _args_: HostPortRangeArgs), min) =
                            _args_.Min <- io min
                            _cargs_, _args_

                    let hostPortRange = HostPortRangeBuilder()

                [<AutoOpen>]
                module IDRange =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type IDRangeBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, IDRangeArgs()
                        member _.Run(_cargs_, _args_: IDRangeArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: IDRangeArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("max")>]
                        member _.Max((_cargs_, _args_: IDRangeArgs), max) =
                            _args_.Max <- input max
                            _cargs_, _args_

                        member _.Max((_cargs_, _args_: IDRangeArgs), max) =
                            _args_.Max <- io max
                            _cargs_, _args_

                        [<CustomOperation("min")>]
                        member _.Min((_cargs_, _args_: IDRangeArgs), min) =
                            _args_.Min <- input min
                            _cargs_, _args_

                        member _.Min((_cargs_, _args_: IDRangeArgs), min) =
                            _args_.Min <- io min
                            _cargs_, _args_

                    let iDRange = IDRangeBuilder()

                [<AutoOpen>]
                module PodDisruptionBudgetStatus =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type PodDisruptionBudgetStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodDisruptionBudgetStatusArgs()
                        member _.Run(_cargs_, _args_: PodDisruptionBudgetStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodDisruptionBudgetStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("currentHealthy")>]
                        member _.CurrentHealthy((_cargs_, _args_: PodDisruptionBudgetStatusArgs), currentHealthy) =
                            _args_.CurrentHealthy <- input currentHealthy
                            _cargs_, _args_

                        member _.CurrentHealthy((_cargs_, _args_: PodDisruptionBudgetStatusArgs), currentHealthy) =
                            _args_.CurrentHealthy <- io currentHealthy
                            _cargs_, _args_

                        [<CustomOperation("desiredHealthy")>]
                        member _.DesiredHealthy((_cargs_, _args_: PodDisruptionBudgetStatusArgs), desiredHealthy) =
                            _args_.DesiredHealthy <- input desiredHealthy
                            _cargs_, _args_

                        member _.DesiredHealthy((_cargs_, _args_: PodDisruptionBudgetStatusArgs), desiredHealthy) =
                            _args_.DesiredHealthy <- io desiredHealthy
                            _cargs_, _args_

                        [<CustomOperation("disruptedPods")>]
                        member _.DisruptedPods((_cargs_, _args_: PodDisruptionBudgetStatusArgs), disruptedPods) =
                            _args_.DisruptedPods <- inputMap disruptedPods
                            _cargs_, _args_

                        [<CustomOperation("disruptionsAllowed")>]
                        member _.DisruptionsAllowed((_cargs_, _args_: PodDisruptionBudgetStatusArgs), disruptionsAllowed) =
                            _args_.DisruptionsAllowed <- input disruptionsAllowed
                            _cargs_, _args_

                        member _.DisruptionsAllowed((_cargs_, _args_: PodDisruptionBudgetStatusArgs), disruptionsAllowed) =
                            _args_.DisruptionsAllowed <- io disruptionsAllowed
                            _cargs_, _args_

                        [<CustomOperation("expectedPods")>]
                        member _.ExpectedPods((_cargs_, _args_: PodDisruptionBudgetStatusArgs), expectedPods) =
                            _args_.ExpectedPods <- input expectedPods
                            _cargs_, _args_

                        member _.ExpectedPods((_cargs_, _args_: PodDisruptionBudgetStatusArgs), expectedPods) =
                            _args_.ExpectedPods <- io expectedPods
                            _cargs_, _args_

                        [<CustomOperation("observedGeneration")>]
                        member _.ObservedGeneration((_cargs_, _args_: PodDisruptionBudgetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- input observedGeneration
                            _cargs_, _args_

                        member _.ObservedGeneration((_cargs_, _args_: PodDisruptionBudgetStatusArgs), observedGeneration) =
                            _args_.ObservedGeneration <- io observedGeneration
                            _cargs_, _args_

                    let podDisruptionBudgetStatus = PodDisruptionBudgetStatusBuilder()

                [<AutoOpen>]
                module PodSecurityPolicySpec =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type PodSecurityPolicySpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicySpecArgs()
                        member _.Run(_cargs_, _args_: PodSecurityPolicySpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodSecurityPolicySpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allowPrivilegeEscalation")>]
                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- input allowPrivilegeEscalation
                            _cargs_, _args_

                        member _.AllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowPrivilegeEscalation)
                            =
                            _args_.AllowPrivilegeEscalation <- io allowPrivilegeEscalation
                            _cargs_, _args_

                        [<CustomOperation("allowedCSIDrivers")>]
                        member _.AllowedCSIDrivers((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedCSIDrivers) =
                            _args_.AllowedCSIDrivers <- inputList allowedCSIDrivers
                            _cargs_, _args_

                        [<CustomOperation("allowedCapabilities")>]
                        member _.AllowedCapabilities((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedCapabilities) =
                            _args_.AllowedCapabilities <- inputList allowedCapabilities
                            _cargs_, _args_

                        [<CustomOperation("allowedFlexVolumes")>]
                        member _.AllowedFlexVolumes((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedFlexVolumes) =
                            _args_.AllowedFlexVolumes <- inputList allowedFlexVolumes
                            _cargs_, _args_

                        [<CustomOperation("allowedHostPaths")>]
                        member _.AllowedHostPaths((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedHostPaths) =
                            _args_.AllowedHostPaths <- inputList allowedHostPaths
                            _cargs_, _args_

                        [<CustomOperation("allowedProcMountTypes")>]
                        member _.AllowedProcMountTypes(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            allowedProcMountTypes)
                            =
                            _args_.AllowedProcMountTypes <- inputList allowedProcMountTypes
                            _cargs_, _args_

                        [<CustomOperation("allowedUnsafeSysctls")>]
                        member _.AllowedUnsafeSysctls((_cargs_, _args_: PodSecurityPolicySpecArgs), allowedUnsafeSysctls) =
                            _args_.AllowedUnsafeSysctls <- inputList allowedUnsafeSysctls
                            _cargs_, _args_

                        [<CustomOperation("defaultAddCapabilities")>]
                        member _.DefaultAddCapabilities(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAddCapabilities)
                            =
                            _args_.DefaultAddCapabilities <- inputList defaultAddCapabilities
                            _cargs_, _args_

                        [<CustomOperation("defaultAllowPrivilegeEscalation")>]
                        member _.DefaultAllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAllowPrivilegeEscalation)
                            =
                            _args_.DefaultAllowPrivilegeEscalation <- input defaultAllowPrivilegeEscalation
                            _cargs_, _args_

                        member _.DefaultAllowPrivilegeEscalation(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            defaultAllowPrivilegeEscalation)
                            =
                            _args_.DefaultAllowPrivilegeEscalation <- io defaultAllowPrivilegeEscalation
                            _cargs_, _args_

                        [<CustomOperation("forbiddenSysctls")>]
                        member _.ForbiddenSysctls((_cargs_, _args_: PodSecurityPolicySpecArgs), forbiddenSysctls) =
                            _args_.ForbiddenSysctls <- inputList forbiddenSysctls
                            _cargs_, _args_

                        [<CustomOperation("fsGroup")>]
                        member _.FsGroup((_cargs_, _args_: PodSecurityPolicySpecArgs), fsGroup) =
                            _args_.FsGroup <- input fsGroup
                            _cargs_, _args_

                        [<CustomOperation("hostIPC")>]
                        member _.HostIPC((_cargs_, _args_: PodSecurityPolicySpecArgs), hostIPC) =
                            _args_.HostIPC <- input hostIPC
                            _cargs_, _args_

                        member _.HostIPC((_cargs_, _args_: PodSecurityPolicySpecArgs), hostIPC) =
                            _args_.HostIPC <- io hostIPC
                            _cargs_, _args_

                        [<CustomOperation("hostNetwork")>]
                        member _.HostNetwork((_cargs_, _args_: PodSecurityPolicySpecArgs), hostNetwork) =
                            _args_.HostNetwork <- input hostNetwork
                            _cargs_, _args_

                        member _.HostNetwork((_cargs_, _args_: PodSecurityPolicySpecArgs), hostNetwork) =
                            _args_.HostNetwork <- io hostNetwork
                            _cargs_, _args_

                        [<CustomOperation("hostPID")>]
                        member _.HostPID((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPID) =
                            _args_.HostPID <- input hostPID
                            _cargs_, _args_

                        member _.HostPID((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPID) =
                            _args_.HostPID <- io hostPID
                            _cargs_, _args_

                        [<CustomOperation("hostPorts")>]
                        member _.HostPorts((_cargs_, _args_: PodSecurityPolicySpecArgs), hostPorts) =
                            _args_.HostPorts <- inputList hostPorts
                            _cargs_, _args_

                        [<CustomOperation("privileged")>]
                        member _.Privileged((_cargs_, _args_: PodSecurityPolicySpecArgs), privileged) =
                            _args_.Privileged <- input privileged
                            _cargs_, _args_

                        member _.Privileged((_cargs_, _args_: PodSecurityPolicySpecArgs), privileged) =
                            _args_.Privileged <- io privileged
                            _cargs_, _args_

                        [<CustomOperation("readOnlyRootFilesystem")>]
                        member _.ReadOnlyRootFilesystem(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            readOnlyRootFilesystem)
                            =
                            _args_.ReadOnlyRootFilesystem <- input readOnlyRootFilesystem
                            _cargs_, _args_

                        member _.ReadOnlyRootFilesystem(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            readOnlyRootFilesystem)
                            =
                            _args_.ReadOnlyRootFilesystem <- io readOnlyRootFilesystem
                            _cargs_, _args_

                        [<CustomOperation("requiredDropCapabilities")>]
                        member _.RequiredDropCapabilities(
                            (_cargs_, _args_: PodSecurityPolicySpecArgs),
                            requiredDropCapabilities)
                            =
                            _args_.RequiredDropCapabilities <- inputList requiredDropCapabilities
                            _cargs_, _args_

                        [<CustomOperation("runAsGroup")>]
                        member _.RunAsGroup((_cargs_, _args_: PodSecurityPolicySpecArgs), runAsGroup) =
                            _args_.RunAsGroup <- input runAsGroup
                            _cargs_, _args_

                        [<CustomOperation("runAsUser")>]
                        member _.RunAsUser((_cargs_, _args_: PodSecurityPolicySpecArgs), runAsUser) =
                            _args_.RunAsUser <- input runAsUser
                            _cargs_, _args_

                        [<CustomOperation("runtimeClass")>]
                        member _.RuntimeClass((_cargs_, _args_: PodSecurityPolicySpecArgs), runtimeClass) =
                            _args_.RuntimeClass <- input runtimeClass
                            _cargs_, _args_

                        [<CustomOperation("seLinux")>]
                        member _.SeLinux((_cargs_, _args_: PodSecurityPolicySpecArgs), seLinux) =
                            _args_.SeLinux <- input seLinux
                            _cargs_, _args_

                        [<CustomOperation("supplementalGroups")>]
                        member _.SupplementalGroups((_cargs_, _args_: PodSecurityPolicySpecArgs), supplementalGroups) =
                            _args_.SupplementalGroups <- input supplementalGroups
                            _cargs_, _args_

                        [<CustomOperation("volumes")>]
                        member _.Volumes((_cargs_, _args_: PodSecurityPolicySpecArgs), volumes) =
                            _args_.Volumes <- inputList volumes
                            _cargs_, _args_

                    let podSecurityPolicySpec = PodSecurityPolicySpecBuilder()

                [<AutoOpen>]
                module RunAsGroupStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type RunAsGroupStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RunAsGroupStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RunAsGroupStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: RunAsGroupStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let runAsGroupStrategyOptions = RunAsGroupStrategyOptionsBuilder()

                [<AutoOpen>]
                module RunAsUserStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type RunAsUserStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RunAsUserStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RunAsUserStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RunAsUserStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: RunAsUserStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: RunAsUserStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: RunAsUserStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let runAsUserStrategyOptions = RunAsUserStrategyOptionsBuilder()

                [<AutoOpen>]
                module RuntimeClassStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type RuntimeClassStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RuntimeClassStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: RuntimeClassStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RuntimeClassStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allowedRuntimeClassNames")>]
                        member _.AllowedRuntimeClassNames(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            allowedRuntimeClassNames)
                            =
                            _args_.AllowedRuntimeClassNames <- inputList allowedRuntimeClassNames
                            _cargs_, _args_

                        [<CustomOperation("defaultRuntimeClassName")>]
                        member _.DefaultRuntimeClassName(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            defaultRuntimeClassName)
                            =
                            _args_.DefaultRuntimeClassName <- input defaultRuntimeClassName
                            _cargs_, _args_

                        member _.DefaultRuntimeClassName(
                            (_cargs_, _args_: RuntimeClassStrategyOptionsArgs),
                            defaultRuntimeClassName)
                            =
                            _args_.DefaultRuntimeClassName <- io defaultRuntimeClassName
                            _cargs_, _args_

                    let runtimeClassStrategyOptions = RuntimeClassStrategyOptionsBuilder()

                [<AutoOpen>]
                module SELinuxStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type SELinuxStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SELinuxStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: SELinuxStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SELinuxStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: SELinuxStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: SELinuxStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                        [<CustomOperation("seLinuxOptions")>]
                        member _.SeLinuxOptions((_cargs_, _args_: SELinuxStrategyOptionsArgs), seLinuxOptions) =
                            _args_.SeLinuxOptions <- input seLinuxOptions
                            _cargs_, _args_

                    let sELinuxStrategyOptions = SELinuxStrategyOptionsBuilder()

                [<AutoOpen>]
                module SupplementalGroupsStrategyOptions =
                    open Pulumi.Kubernetes.Policy.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

                    type SupplementalGroupsStrategyOptionsBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SupplementalGroupsStrategyOptionsArgs()
                        member _.Run(_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("ranges")>]
                        member _.Ranges((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), ranges) =
                            _args_.Ranges <- inputList ranges
                            _cargs_, _args_

                        [<CustomOperation("rule")>]
                        member _.Rule((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), rule) =
                            _args_.Rule <- input rule
                            _cargs_, _args_

                        member _.Rule((_cargs_, _args_: SupplementalGroupsStrategyOptionsArgs), rule) =
                            _args_.Rule <- io rule
                            _cargs_, _args_

                    let supplementalGroupsStrategyOptions =
                        SupplementalGroupsStrategyOptionsBuilder()

        module Rbac =
            module V1 =
                [<AutoOpen>]
                module AggregationRule =
                    open Pulumi.Kubernetes.Rbac.V1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

                    type AggregationRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AggregationRuleArgs()
                        member _.Run(_cargs_, _args_: AggregationRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AggregationRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clusterRoleSelectors")>]
                        member _.ClusterRoleSelectors((_cargs_, _args_: AggregationRuleArgs), clusterRoleSelectors) =
                            _args_.ClusterRoleSelectors <- inputList clusterRoleSelectors
                            _cargs_, _args_

                    let aggregationRule = AggregationRuleBuilder()

                [<AutoOpen>]
                module PolicyRule =
                    open Pulumi.Kubernetes.Rbac.V1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

                    type PolicyRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PolicyRuleArgs()
                        member _.Run(_cargs_, _args_: PolicyRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PolicyRuleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: PolicyRuleArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("nonResourceURLs")>]
                        member _.NonResourceURLs((_cargs_, _args_: PolicyRuleArgs), nonResourceURLs) =
                            _args_.NonResourceURLs <- inputList nonResourceURLs
                            _cargs_, _args_

                        [<CustomOperation("resourceNames")>]
                        member _.ResourceNames((_cargs_, _args_: PolicyRuleArgs), resourceNames) =
                            _args_.ResourceNames <- inputList resourceNames
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: PolicyRuleArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("verbs")>]
                        member _.Verbs((_cargs_, _args_: PolicyRuleArgs), verbs) =
                            _args_.Verbs <- inputList verbs
                            _cargs_, _args_

                    let policyRule = PolicyRuleBuilder()

                [<AutoOpen>]
                module RoleRef =
                    open Pulumi.Kubernetes.Rbac.V1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

                    type RoleRefBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RoleRefArgs()
                        member _.Run(_cargs_, _args_: RoleRefArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RoleRefArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let roleRef = RoleRefBuilder()

                [<AutoOpen>]
                module Subject =
                    open Pulumi.Kubernetes.Rbac.V1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

                    type SubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectArgs()
                        member _.Run(_cargs_, _args_: SubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: SubjectArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: SubjectArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let subject = SubjectBuilder()

            module V1Alpha1 =
                [<AutoOpen>]
                module AggregationRule =
                    open Pulumi.Kubernetes.Rbac.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

                    type AggregationRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AggregationRuleArgs()
                        member _.Run(_cargs_, _args_: AggregationRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AggregationRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clusterRoleSelectors")>]
                        member _.ClusterRoleSelectors((_cargs_, _args_: AggregationRuleArgs), clusterRoleSelectors) =
                            _args_.ClusterRoleSelectors <- inputList clusterRoleSelectors
                            _cargs_, _args_

                    let aggregationRule = AggregationRuleBuilder()

                [<AutoOpen>]
                module PolicyRule =
                    open Pulumi.Kubernetes.Rbac.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

                    type PolicyRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PolicyRuleArgs()
                        member _.Run(_cargs_, _args_: PolicyRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PolicyRuleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: PolicyRuleArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("nonResourceURLs")>]
                        member _.NonResourceURLs((_cargs_, _args_: PolicyRuleArgs), nonResourceURLs) =
                            _args_.NonResourceURLs <- inputList nonResourceURLs
                            _cargs_, _args_

                        [<CustomOperation("resourceNames")>]
                        member _.ResourceNames((_cargs_, _args_: PolicyRuleArgs), resourceNames) =
                            _args_.ResourceNames <- inputList resourceNames
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: PolicyRuleArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("verbs")>]
                        member _.Verbs((_cargs_, _args_: PolicyRuleArgs), verbs) =
                            _args_.Verbs <- inputList verbs
                            _cargs_, _args_

                    let policyRule = PolicyRuleBuilder()

                [<AutoOpen>]
                module RoleRef =
                    open Pulumi.Kubernetes.Rbac.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

                    type RoleRefBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RoleRefArgs()
                        member _.Run(_cargs_, _args_: RoleRefArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RoleRefArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let roleRef = RoleRefBuilder()

                [<AutoOpen>]
                module Subject =
                    open Pulumi.Kubernetes.Rbac.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

                    type SubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectArgs()
                        member _.Run(_cargs_, _args_: SubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiVersion")>]
                        member _.ApiVersion((_cargs_, _args_: SubjectArgs), apiVersion) =
                            _args_.ApiVersion <- input apiVersion
                            _cargs_, _args_

                        member _.ApiVersion((_cargs_, _args_: SubjectArgs), apiVersion) =
                            _args_.ApiVersion <- io apiVersion
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let subject = SubjectBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module AggregationRule =
                    open Pulumi.Kubernetes.Rbac.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

                    type AggregationRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, AggregationRuleArgs()
                        member _.Run(_cargs_, _args_: AggregationRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: AggregationRuleArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("clusterRoleSelectors")>]
                        member _.ClusterRoleSelectors((_cargs_, _args_: AggregationRuleArgs), clusterRoleSelectors) =
                            _args_.ClusterRoleSelectors <- inputList clusterRoleSelectors
                            _cargs_, _args_

                    let aggregationRule = AggregationRuleBuilder()

                [<AutoOpen>]
                module PolicyRule =
                    open Pulumi.Kubernetes.Rbac.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

                    type PolicyRuleBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PolicyRuleArgs()
                        member _.Run(_cargs_, _args_: PolicyRuleArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PolicyRuleArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroups")>]
                        member _.ApiGroups((_cargs_, _args_: PolicyRuleArgs), apiGroups) =
                            _args_.ApiGroups <- inputList apiGroups
                            _cargs_, _args_

                        [<CustomOperation("nonResourceURLs")>]
                        member _.NonResourceURLs((_cargs_, _args_: PolicyRuleArgs), nonResourceURLs) =
                            _args_.NonResourceURLs <- inputList nonResourceURLs
                            _cargs_, _args_

                        [<CustomOperation("resourceNames")>]
                        member _.ResourceNames((_cargs_, _args_: PolicyRuleArgs), resourceNames) =
                            _args_.ResourceNames <- inputList resourceNames
                            _cargs_, _args_

                        [<CustomOperation("resources")>]
                        member _.Resources((_cargs_, _args_: PolicyRuleArgs), resources) =
                            _args_.Resources <- inputList resources
                            _cargs_, _args_

                        [<CustomOperation("verbs")>]
                        member _.Verbs((_cargs_, _args_: PolicyRuleArgs), verbs) =
                            _args_.Verbs <- inputList verbs
                            _cargs_, _args_

                    let policyRule = PolicyRuleBuilder()

                [<AutoOpen>]
                module RoleRef =
                    open Pulumi.Kubernetes.Rbac.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

                    type RoleRefBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, RoleRefArgs()
                        member _.Run(_cargs_, _args_: RoleRefArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: RoleRefArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: RoleRefArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: RoleRefArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: RoleRefArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                    let roleRef = RoleRefBuilder()

                [<AutoOpen>]
                module Subject =
                    open Pulumi.Kubernetes.Rbac.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

                    type SubjectBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, SubjectArgs()
                        member _.Run(_cargs_, _args_: SubjectArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: SubjectArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("apiGroup")>]
                        member _.ApiGroup((_cargs_, _args_: SubjectArgs), apiGroup) =
                            _args_.ApiGroup <- input apiGroup
                            _cargs_, _args_

                        member _.ApiGroup((_cargs_, _args_: SubjectArgs), apiGroup) =
                            _args_.ApiGroup <- io apiGroup
                            _cargs_, _args_

                        [<CustomOperation("kind")>]
                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- input kind
                            _cargs_, _args_

                        member _.Kind((_cargs_, _args_: SubjectArgs), kind) =
                            _args_.Kind <- io kind
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: SubjectArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("namespace")>]
                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- input ``namespace``
                            _cargs_, _args_

                        member _.Namespace((_cargs_, _args_: SubjectArgs), ``namespace``) =
                            _args_.Namespace <- io ``namespace``
                            _cargs_, _args_

                    let subject = SubjectBuilder()

        module Settings =
            module V1Alpha1 =
                [<AutoOpen>]
                module PodPresetSpec =
                    open Pulumi.Kubernetes.Settings.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Settings.V1Alpha1

                    type PodPresetSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, PodPresetSpecArgs()
                        member _.Run(_cargs_, _args_: PodPresetSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: PodPresetSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("env")>]
                        member _.Env((_cargs_, _args_: PodPresetSpecArgs), env) =
                            _args_.Env <- inputList env
                            _cargs_, _args_

                        [<CustomOperation("envFrom")>]
                        member _.EnvFrom((_cargs_, _args_: PodPresetSpecArgs), envFrom) =
                            _args_.EnvFrom <- inputList envFrom
                            _cargs_, _args_

                        [<CustomOperation("selector")>]
                        member _.Selector((_cargs_, _args_: PodPresetSpecArgs), selector) =
                            _args_.Selector <- input selector
                            _cargs_, _args_

                        [<CustomOperation("volumeMounts")>]
                        member _.VolumeMounts((_cargs_, _args_: PodPresetSpecArgs), volumeMounts) =
                            _args_.VolumeMounts <- inputList volumeMounts
                            _cargs_, _args_

                        [<CustomOperation("volumes")>]
                        member _.Volumes((_cargs_, _args_: PodPresetSpecArgs), volumes) =
                            _args_.Volumes <- inputList volumes
                            _cargs_, _args_

                    let podPresetSpec = PodPresetSpecBuilder()

        module Storage =
            module V1 =
                [<AutoOpen>]
                module CSIDriverSpec =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type CSIDriverSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSIDriverSpecArgs()
                        member _.Run(_cargs_, _args_: CSIDriverSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSIDriverSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attachRequired")>]
                        member _.AttachRequired((_cargs_, _args_: CSIDriverSpecArgs), attachRequired) =
                            _args_.AttachRequired <- input attachRequired
                            _cargs_, _args_

                        member _.AttachRequired((_cargs_, _args_: CSIDriverSpecArgs), attachRequired) =
                            _args_.AttachRequired <- io attachRequired
                            _cargs_, _args_

                        [<CustomOperation("podInfoOnMount")>]
                        member _.PodInfoOnMount((_cargs_, _args_: CSIDriverSpecArgs), podInfoOnMount) =
                            _args_.PodInfoOnMount <- input podInfoOnMount
                            _cargs_, _args_

                        member _.PodInfoOnMount((_cargs_, _args_: CSIDriverSpecArgs), podInfoOnMount) =
                            _args_.PodInfoOnMount <- io podInfoOnMount
                            _cargs_, _args_

                        [<CustomOperation("volumeLifecycleModes")>]
                        member _.VolumeLifecycleModes((_cargs_, _args_: CSIDriverSpecArgs), volumeLifecycleModes) =
                            _args_.VolumeLifecycleModes <- inputList volumeLifecycleModes
                            _cargs_, _args_

                    let cSIDriverSpec = CSIDriverSpecBuilder()

                [<AutoOpen>]
                module CSINodeDriver =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type CSINodeDriverBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSINodeDriverArgs()
                        member _.Run(_cargs_, _args_: CSINodeDriverArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSINodeDriverArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allocatable")>]
                        member _.Allocatable((_cargs_, _args_: CSINodeDriverArgs), allocatable) =
                            _args_.Allocatable <- input allocatable
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CSINodeDriverArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CSINodeDriverArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("nodeID")>]
                        member _.NodeID((_cargs_, _args_: CSINodeDriverArgs), nodeID) =
                            _args_.NodeID <- input nodeID
                            _cargs_, _args_

                        member _.NodeID((_cargs_, _args_: CSINodeDriverArgs), nodeID) =
                            _args_.NodeID <- io nodeID
                            _cargs_, _args_

                        [<CustomOperation("topologyKeys")>]
                        member _.TopologyKeys((_cargs_, _args_: CSINodeDriverArgs), topologyKeys) =
                            _args_.TopologyKeys <- inputList topologyKeys
                            _cargs_, _args_

                    let cSINodeDriver = CSINodeDriverBuilder()

                [<AutoOpen>]
                module CSINodeSpec =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type CSINodeSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSINodeSpecArgs()
                        member _.Run(_cargs_, _args_: CSINodeSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSINodeSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("drivers")>]
                        member _.Drivers((_cargs_, _args_: CSINodeSpecArgs), drivers) =
                            _args_.Drivers <- inputList drivers
                            _cargs_, _args_

                    let cSINodeSpec = CSINodeSpecBuilder()

                [<AutoOpen>]
                module VolumeAttachmentSource =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type VolumeAttachmentSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSourceArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("inlineVolumeSpec")>]
                        member _.InlineVolumeSpec((_cargs_, _args_: VolumeAttachmentSourceArgs), inlineVolumeSpec) =
                            _args_.InlineVolumeSpec <- input inlineVolumeSpec
                            _cargs_, _args_

                        [<CustomOperation("persistentVolumeName")>]
                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- input persistentVolumeName
                            _cargs_, _args_

                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- io persistentVolumeName
                            _cargs_, _args_

                    let volumeAttachmentSource = VolumeAttachmentSourceBuilder()

                [<AutoOpen>]
                module VolumeAttachmentSpec =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type VolumeAttachmentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSpecArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attacher")>]
                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- input attacher
                            _cargs_, _args_

                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- io attacher
                            _cargs_, _args_

                        [<CustomOperation("nodeName")>]
                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- input nodeName
                            _cargs_, _args_

                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- io nodeName
                            _cargs_, _args_

                        [<CustomOperation("source")>]
                        member _.Source((_cargs_, _args_: VolumeAttachmentSpecArgs), source) =
                            _args_.Source <- input source
                            _cargs_, _args_

                    let volumeAttachmentSpec = VolumeAttachmentSpecBuilder()

                [<AutoOpen>]
                module VolumeAttachmentStatus =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type VolumeAttachmentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentStatusArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attachError")>]
                        member _.AttachError((_cargs_, _args_: VolumeAttachmentStatusArgs), attachError) =
                            _args_.AttachError <- input attachError
                            _cargs_, _args_

                        [<CustomOperation("attached")>]
                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- input attached
                            _cargs_, _args_

                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- io attached
                            _cargs_, _args_

                        [<CustomOperation("attachmentMetadata")>]
                        member _.AttachmentMetadata((_cargs_, _args_: VolumeAttachmentStatusArgs), attachmentMetadata) =
                            _args_.AttachmentMetadata <- inputMap attachmentMetadata
                            _cargs_, _args_

                        [<CustomOperation("detachError")>]
                        member _.DetachError((_cargs_, _args_: VolumeAttachmentStatusArgs), detachError) =
                            _args_.DetachError <- input detachError
                            _cargs_, _args_

                    let volumeAttachmentStatus = VolumeAttachmentStatusBuilder()

                [<AutoOpen>]
                module VolumeError =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type VolumeErrorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeErrorArgs()
                        member _.Run(_cargs_, _args_: VolumeErrorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeErrorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("time")>]
                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- input time
                            _cargs_, _args_

                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- io time
                            _cargs_, _args_

                    let volumeError = VolumeErrorBuilder()

                [<AutoOpen>]
                module VolumeNodeResources =
                    open Pulumi.Kubernetes.Storage.V1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1

                    type VolumeNodeResourcesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeNodeResourcesArgs()
                        member _.Run(_cargs_, _args_: VolumeNodeResourcesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeNodeResourcesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("count")>]
                        member _.Count((_cargs_, _args_: VolumeNodeResourcesArgs), count) =
                            _args_.Count <- input count
                            _cargs_, _args_

                        member _.Count((_cargs_, _args_: VolumeNodeResourcesArgs), count) =
                            _args_.Count <- io count
                            _cargs_, _args_

                    let volumeNodeResources = VolumeNodeResourcesBuilder()

            module V1Alpha1 =
                [<AutoOpen>]
                module VolumeAttachmentSource =
                    open Pulumi.Kubernetes.Storage.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

                    type VolumeAttachmentSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSourceArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("inlineVolumeSpec")>]
                        member _.InlineVolumeSpec((_cargs_, _args_: VolumeAttachmentSourceArgs), inlineVolumeSpec) =
                            _args_.InlineVolumeSpec <- input inlineVolumeSpec
                            _cargs_, _args_

                        [<CustomOperation("persistentVolumeName")>]
                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- input persistentVolumeName
                            _cargs_, _args_

                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- io persistentVolumeName
                            _cargs_, _args_

                    let volumeAttachmentSource = VolumeAttachmentSourceBuilder()

                [<AutoOpen>]
                module VolumeAttachmentSpec =
                    open Pulumi.Kubernetes.Storage.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

                    type VolumeAttachmentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSpecArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attacher")>]
                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- input attacher
                            _cargs_, _args_

                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- io attacher
                            _cargs_, _args_

                        [<CustomOperation("nodeName")>]
                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- input nodeName
                            _cargs_, _args_

                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- io nodeName
                            _cargs_, _args_

                        [<CustomOperation("source")>]
                        member _.Source((_cargs_, _args_: VolumeAttachmentSpecArgs), source) =
                            _args_.Source <- input source
                            _cargs_, _args_

                    let volumeAttachmentSpec = VolumeAttachmentSpecBuilder()

                [<AutoOpen>]
                module VolumeAttachmentStatus =
                    open Pulumi.Kubernetes.Storage.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

                    type VolumeAttachmentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentStatusArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attachError")>]
                        member _.AttachError((_cargs_, _args_: VolumeAttachmentStatusArgs), attachError) =
                            _args_.AttachError <- input attachError
                            _cargs_, _args_

                        [<CustomOperation("attached")>]
                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- input attached
                            _cargs_, _args_

                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- io attached
                            _cargs_, _args_

                        [<CustomOperation("attachmentMetadata")>]
                        member _.AttachmentMetadata((_cargs_, _args_: VolumeAttachmentStatusArgs), attachmentMetadata) =
                            _args_.AttachmentMetadata <- inputMap attachmentMetadata
                            _cargs_, _args_

                        [<CustomOperation("detachError")>]
                        member _.DetachError((_cargs_, _args_: VolumeAttachmentStatusArgs), detachError) =
                            _args_.DetachError <- input detachError
                            _cargs_, _args_

                    let volumeAttachmentStatus = VolumeAttachmentStatusBuilder()

                [<AutoOpen>]
                module VolumeError =
                    open Pulumi.Kubernetes.Storage.V1Alpha1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

                    type VolumeErrorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeErrorArgs()
                        member _.Run(_cargs_, _args_: VolumeErrorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeErrorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("time")>]
                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- input time
                            _cargs_, _args_

                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- io time
                            _cargs_, _args_

                    let volumeError = VolumeErrorBuilder()

            module V1Beta1 =
                [<AutoOpen>]
                module CSIDriverSpec =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type CSIDriverSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSIDriverSpecArgs()
                        member _.Run(_cargs_, _args_: CSIDriverSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSIDriverSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attachRequired")>]
                        member _.AttachRequired((_cargs_, _args_: CSIDriverSpecArgs), attachRequired) =
                            _args_.AttachRequired <- input attachRequired
                            _cargs_, _args_

                        member _.AttachRequired((_cargs_, _args_: CSIDriverSpecArgs), attachRequired) =
                            _args_.AttachRequired <- io attachRequired
                            _cargs_, _args_

                        [<CustomOperation("podInfoOnMount")>]
                        member _.PodInfoOnMount((_cargs_, _args_: CSIDriverSpecArgs), podInfoOnMount) =
                            _args_.PodInfoOnMount <- input podInfoOnMount
                            _cargs_, _args_

                        member _.PodInfoOnMount((_cargs_, _args_: CSIDriverSpecArgs), podInfoOnMount) =
                            _args_.PodInfoOnMount <- io podInfoOnMount
                            _cargs_, _args_

                        [<CustomOperation("volumeLifecycleModes")>]
                        member _.VolumeLifecycleModes((_cargs_, _args_: CSIDriverSpecArgs), volumeLifecycleModes) =
                            _args_.VolumeLifecycleModes <- inputList volumeLifecycleModes
                            _cargs_, _args_

                    let cSIDriverSpec = CSIDriverSpecBuilder()

                [<AutoOpen>]
                module CSINodeDriver =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type CSINodeDriverBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSINodeDriverArgs()
                        member _.Run(_cargs_, _args_: CSINodeDriverArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSINodeDriverArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("allocatable")>]
                        member _.Allocatable((_cargs_, _args_: CSINodeDriverArgs), allocatable) =
                            _args_.Allocatable <- input allocatable
                            _cargs_, _args_

                        [<CustomOperation("resourceName")>]
                        member _.ResourceName((_cargs_, _args_: CSINodeDriverArgs), name) =
                            _args_.Name <- input name
                            _cargs_, _args_

                        member _.ResourceName((_cargs_, _args_: CSINodeDriverArgs), name) =
                            _args_.Name <- io name
                            _cargs_, _args_

                        [<CustomOperation("nodeID")>]
                        member _.NodeID((_cargs_, _args_: CSINodeDriverArgs), nodeID) =
                            _args_.NodeID <- input nodeID
                            _cargs_, _args_

                        member _.NodeID((_cargs_, _args_: CSINodeDriverArgs), nodeID) =
                            _args_.NodeID <- io nodeID
                            _cargs_, _args_

                        [<CustomOperation("topologyKeys")>]
                        member _.TopologyKeys((_cargs_, _args_: CSINodeDriverArgs), topologyKeys) =
                            _args_.TopologyKeys <- inputList topologyKeys
                            _cargs_, _args_

                    let cSINodeDriver = CSINodeDriverBuilder()

                [<AutoOpen>]
                module CSINodeSpec =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type CSINodeSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, CSINodeSpecArgs()
                        member _.Run(_cargs_, _args_: CSINodeSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: CSINodeSpecArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("drivers")>]
                        member _.Drivers((_cargs_, _args_: CSINodeSpecArgs), drivers) =
                            _args_.Drivers <- inputList drivers
                            _cargs_, _args_

                    let cSINodeSpec = CSINodeSpecBuilder()

                [<AutoOpen>]
                module VolumeAttachmentSource =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type VolumeAttachmentSourceBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSourceArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSourceArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSourceArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("inlineVolumeSpec")>]
                        member _.InlineVolumeSpec((_cargs_, _args_: VolumeAttachmentSourceArgs), inlineVolumeSpec) =
                            _args_.InlineVolumeSpec <- input inlineVolumeSpec
                            _cargs_, _args_

                        [<CustomOperation("persistentVolumeName")>]
                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- input persistentVolumeName
                            _cargs_, _args_

                        member _.PersistentVolumeName(
                            (_cargs_, _args_: VolumeAttachmentSourceArgs),
                            persistentVolumeName)
                            =
                            _args_.PersistentVolumeName <- io persistentVolumeName
                            _cargs_, _args_

                    let volumeAttachmentSource = VolumeAttachmentSourceBuilder()

                [<AutoOpen>]
                module VolumeAttachmentSpec =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type VolumeAttachmentSpecBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentSpecArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentSpecArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentSpecArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attacher")>]
                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- input attacher
                            _cargs_, _args_

                        member _.Attacher((_cargs_, _args_: VolumeAttachmentSpecArgs), attacher) =
                            _args_.Attacher <- io attacher
                            _cargs_, _args_

                        [<CustomOperation("nodeName")>]
                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- input nodeName
                            _cargs_, _args_

                        member _.NodeName((_cargs_, _args_: VolumeAttachmentSpecArgs), nodeName) =
                            _args_.NodeName <- io nodeName
                            _cargs_, _args_

                        [<CustomOperation("source")>]
                        member _.Source((_cargs_, _args_: VolumeAttachmentSpecArgs), source) =
                            _args_.Source <- input source
                            _cargs_, _args_

                    let volumeAttachmentSpec = VolumeAttachmentSpecBuilder()

                [<AutoOpen>]
                module VolumeAttachmentStatus =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type VolumeAttachmentStatusBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentStatusArgs()
                        member _.Run(_cargs_, _args_: VolumeAttachmentStatusArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeAttachmentStatusArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("attachError")>]
                        member _.AttachError((_cargs_, _args_: VolumeAttachmentStatusArgs), attachError) =
                            _args_.AttachError <- input attachError
                            _cargs_, _args_

                        [<CustomOperation("attached")>]
                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- input attached
                            _cargs_, _args_

                        member _.Attached((_cargs_, _args_: VolumeAttachmentStatusArgs), attached) =
                            _args_.Attached <- io attached
                            _cargs_, _args_

                        [<CustomOperation("attachmentMetadata")>]
                        member _.AttachmentMetadata((_cargs_, _args_: VolumeAttachmentStatusArgs), attachmentMetadata) =
                            _args_.AttachmentMetadata <- inputMap attachmentMetadata
                            _cargs_, _args_

                        [<CustomOperation("detachError")>]
                        member _.DetachError((_cargs_, _args_: VolumeAttachmentStatusArgs), detachError) =
                            _args_.DetachError <- input detachError
                            _cargs_, _args_

                    let volumeAttachmentStatus = VolumeAttachmentStatusBuilder()

                [<AutoOpen>]
                module VolumeError =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type VolumeErrorBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeErrorArgs()
                        member _.Run(_cargs_, _args_: VolumeErrorArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeErrorArgs), name) = { _cargs_ with Name = name }, _args_

                        [<CustomOperation("message")>]
                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- input message
                            _cargs_, _args_

                        member _.Message((_cargs_, _args_: VolumeErrorArgs), message) =
                            _args_.Message <- io message
                            _cargs_, _args_

                        [<CustomOperation("time")>]
                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- input time
                            _cargs_, _args_

                        member _.Time((_cargs_, _args_: VolumeErrorArgs), time) =
                            _args_.Time <- io time
                            _cargs_, _args_

                    let volumeError = VolumeErrorBuilder()

                [<AutoOpen>]
                module VolumeNodeResources =
                    open Pulumi.Kubernetes.Storage.V1Beta1
                    open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

                    type VolumeNodeResourcesBuilder() =
                        member _.Yield _ = KubernetesResource.Zero, VolumeNodeResourcesArgs()
                        member _.Run(_cargs_, _args_: VolumeNodeResourcesArgs) = _args_

                        [<CustomOperation("name")>]
                        member _.Name((_cargs_, _args_: VolumeNodeResourcesArgs), name) =
                            { _cargs_ with Name = name }, _args_

                        [<CustomOperation("count")>]
                        member _.Count((_cargs_, _args_: VolumeNodeResourcesArgs), count) =
                            _args_.Count <- input count
                            _cargs_, _args_

                        member _.Count((_cargs_, _args_: VolumeNodeResourcesArgs), count) =
                            _args_.Count <- io count
                            _cargs_, _args_

                    let volumeNodeResources = VolumeNodeResourcesBuilder()

module AdmissionRegistration =
    module V1 =
        [<AutoOpen>]
        module MutatingWebhookConfiguration =
            open Pulumi.Kubernetes.AdmissionRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

            type MutatingWebhookConfigurationBuilder() =
                member _.Yield _ = KubernetesResource.Zero, MutatingWebhookConfigurationArgs()

                member _.Run(_cargs_, _args_: MutatingWebhookConfigurationArgs) =
                    MutatingWebhookConfiguration(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: MutatingWebhookConfigurationArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: MutatingWebhookConfigurationArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("webhooks")>]
                member _.Webhooks((_cargs_, _args_: MutatingWebhookConfigurationArgs), webhooks) =
                    _args_.Webhooks <- inputList webhooks
                    _cargs_, _args_

            let mutatingWebhookConfiguration = MutatingWebhookConfigurationBuilder()

        [<AutoOpen>]
        module MutatingWebhookConfigurationList =
            open Pulumi.Kubernetes.AdmissionRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

            type MutatingWebhookConfigurationListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, MutatingWebhookConfigurationListArgs()

                member _.Run(_cargs_, _args_: MutatingWebhookConfigurationListArgs) =
                    MutatingWebhookConfigurationList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: MutatingWebhookConfigurationListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: MutatingWebhookConfigurationListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: MutatingWebhookConfigurationListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let mutatingWebhookConfigurationList =
                MutatingWebhookConfigurationListBuilder()

        [<AutoOpen>]
        module ValidatingWebhookConfiguration =
            open Pulumi.Kubernetes.AdmissionRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

            type ValidatingWebhookConfigurationBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookConfigurationArgs()

                member _.Run(_cargs_, _args_: ValidatingWebhookConfigurationArgs) =
                    ValidatingWebhookConfiguration(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ValidatingWebhookConfigurationArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ValidatingWebhookConfigurationArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("webhooks")>]
                member _.Webhooks((_cargs_, _args_: ValidatingWebhookConfigurationArgs), webhooks) =
                    _args_.Webhooks <- inputList webhooks
                    _cargs_, _args_

            let validatingWebhookConfiguration = ValidatingWebhookConfigurationBuilder()

        [<AutoOpen>]
        module ValidatingWebhookConfigurationList =
            open Pulumi.Kubernetes.AdmissionRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1

            type ValidatingWebhookConfigurationListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookConfigurationListArgs()

                member _.Run(_cargs_, _args_: ValidatingWebhookConfigurationListArgs) =
                    ValidatingWebhookConfigurationList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let validatingWebhookConfigurationList =
                ValidatingWebhookConfigurationListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module MutatingWebhookConfiguration =
            open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

            type MutatingWebhookConfigurationBuilder() =
                member _.Yield _ = KubernetesResource.Zero, MutatingWebhookConfigurationArgs()

                member _.Run(_cargs_, _args_: MutatingWebhookConfigurationArgs) =
                    MutatingWebhookConfiguration(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: MutatingWebhookConfigurationArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: MutatingWebhookConfigurationArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("webhooks")>]
                member _.Webhooks((_cargs_, _args_: MutatingWebhookConfigurationArgs), webhooks) =
                    _args_.Webhooks <- inputList webhooks
                    _cargs_, _args_

            let mutatingWebhookConfiguration = MutatingWebhookConfigurationBuilder()

        [<AutoOpen>]
        module MutatingWebhookConfigurationList =
            open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

            type MutatingWebhookConfigurationListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, MutatingWebhookConfigurationListArgs()

                member _.Run(_cargs_, _args_: MutatingWebhookConfigurationListArgs) =
                    MutatingWebhookConfigurationList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: MutatingWebhookConfigurationListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: MutatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: MutatingWebhookConfigurationListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: MutatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: MutatingWebhookConfigurationListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let mutatingWebhookConfigurationList =
                MutatingWebhookConfigurationListBuilder()

        [<AutoOpen>]
        module ValidatingWebhookConfiguration =
            open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

            type ValidatingWebhookConfigurationBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookConfigurationArgs()

                member _.Run(_cargs_, _args_: ValidatingWebhookConfigurationArgs) =
                    ValidatingWebhookConfiguration(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ValidatingWebhookConfigurationArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ValidatingWebhookConfigurationArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("webhooks")>]
                member _.Webhooks((_cargs_, _args_: ValidatingWebhookConfigurationArgs), webhooks) =
                    _args_.Webhooks <- inputList webhooks
                    _cargs_, _args_

            let validatingWebhookConfiguration = ValidatingWebhookConfigurationBuilder()

        [<AutoOpen>]
        module ValidatingWebhookConfigurationList =
            open Pulumi.Kubernetes.AdmissionRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.AdmissionRegistration.V1Beta1

            type ValidatingWebhookConfigurationListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ValidatingWebhookConfigurationListArgs()

                member _.Run(_cargs_, _args_: ValidatingWebhookConfigurationListArgs) =
                    ValidatingWebhookConfigurationList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ValidatingWebhookConfigurationListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let validatingWebhookConfigurationList =
                ValidatingWebhookConfigurationListBuilder()

module ApiExtensions =
    module V1 =
        [<AutoOpen>]
        module CustomResourceDefinition =
            open Pulumi.Kubernetes.ApiExtensions.V1
            open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

            type CustomResourceDefinitionBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionArgs()

                member _.Run(_cargs_, _args_: CustomResourceDefinitionArgs) =
                    CustomResourceDefinition(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CustomResourceDefinitionArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CustomResourceDefinitionArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CustomResourceDefinitionArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CustomResourceDefinitionArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CustomResourceDefinitionArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let customResourceDefinition = CustomResourceDefinitionBuilder()

        [<AutoOpen>]
        module CustomResourceDefinitionList =
            open Pulumi.Kubernetes.ApiExtensions.V1
            open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1

            type CustomResourceDefinitionListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionListArgs()

                member _.Run(_cargs_, _args_: CustomResourceDefinitionListArgs) =
                    CustomResourceDefinitionList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CustomResourceDefinitionListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CustomResourceDefinitionListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CustomResourceDefinitionListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CustomResourceDefinitionListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CustomResourceDefinitionListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let customResourceDefinitionList = CustomResourceDefinitionListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module CustomResourceDefinition =
            open Pulumi.Kubernetes.ApiExtensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

            type CustomResourceDefinitionBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionArgs()

                member _.Run(_cargs_, _args_: CustomResourceDefinitionArgs) =
                    CustomResourceDefinition(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CustomResourceDefinitionArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CustomResourceDefinitionArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CustomResourceDefinitionArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CustomResourceDefinitionArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CustomResourceDefinitionArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let customResourceDefinition = CustomResourceDefinitionBuilder()

        [<AutoOpen>]
        module CustomResourceDefinitionList =
            open Pulumi.Kubernetes.ApiExtensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.ApiExtensions.V1Beta1

            type CustomResourceDefinitionListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CustomResourceDefinitionListArgs()

                member _.Run(_cargs_, _args_: CustomResourceDefinitionListArgs) =
                    CustomResourceDefinitionList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CustomResourceDefinitionListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CustomResourceDefinitionListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CustomResourceDefinitionListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CustomResourceDefinitionListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CustomResourceDefinitionListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CustomResourceDefinitionListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let customResourceDefinitionList = CustomResourceDefinitionListBuilder()

module ApiRegistration =
    module V1 =
        [<AutoOpen>]
        module APIService =
            open Pulumi.Kubernetes.ApiRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

            type APIServiceBuilder() =
                member _.Yield _ = KubernetesResource.Zero, APIServiceArgs()
                member _.Run(_cargs_, _args_: APIServiceArgs) = APIService(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: APIServiceArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: APIServiceArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: APIServiceArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: APIServiceArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: APIServiceArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: APIServiceArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: APIServiceArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let aPIService = APIServiceBuilder()

        [<AutoOpen>]
        module APIServiceList =
            open Pulumi.Kubernetes.ApiRegistration.V1
            open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1

            type APIServiceListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, APIServiceListArgs()
                member _.Run(_cargs_, _args_: APIServiceListArgs) = APIServiceList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: APIServiceListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: APIServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: APIServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: APIServiceListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: APIServiceListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: APIServiceListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: APIServiceListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let aPIServiceList = APIServiceListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module APIService =
            open Pulumi.Kubernetes.ApiRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

            type APIServiceBuilder() =
                member _.Yield _ = KubernetesResource.Zero, APIServiceArgs()
                member _.Run(_cargs_, _args_: APIServiceArgs) = APIService(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: APIServiceArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: APIServiceArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: APIServiceArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: APIServiceArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: APIServiceArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: APIServiceArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: APIServiceArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let aPIService = APIServiceBuilder()

        [<AutoOpen>]
        module APIServiceList =
            open Pulumi.Kubernetes.ApiRegistration.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.ApiRegistration.V1Beta1

            type APIServiceListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, APIServiceListArgs()
                member _.Run(_cargs_, _args_: APIServiceListArgs) = APIServiceList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: APIServiceListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: APIServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: APIServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: APIServiceListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: APIServiceListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: APIServiceListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: APIServiceListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let aPIServiceList = APIServiceListBuilder()

module Apps =
    module V1 =
        [<AutoOpen>]
        module ControllerRevisionList =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type ControllerRevisionListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ControllerRevisionListArgs()
                member _.Run(_cargs_, _args_: ControllerRevisionListArgs) = ControllerRevisionList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ControllerRevisionListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ControllerRevisionListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ControllerRevisionListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let controllerRevisionList = ControllerRevisionListBuilder()

        [<AutoOpen>]
        module DaemonSet =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type DaemonSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetArgs()
                member _.Run(_cargs_, _args_: DaemonSetArgs) = DaemonSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DaemonSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let daemonSet = DaemonSetBuilder()

        [<AutoOpen>]
        module DaemonSetList =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type DaemonSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetListArgs()
                member _.Run(_cargs_, _args_: DaemonSetListArgs) = DaemonSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DaemonSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let daemonSetList = DaemonSetListBuilder()

        [<AutoOpen>]
        module Deployment =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type DeploymentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentArgs()
                member _.Run(_cargs_, _args_: DeploymentArgs) = Deployment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DeploymentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let deployment = DeploymentBuilder()

        [<AutoOpen>]
        module DeploymentList =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type DeploymentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentListArgs()
                member _.Run(_cargs_, _args_: DeploymentListArgs) = DeploymentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DeploymentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let deploymentList = DeploymentListBuilder()

        [<AutoOpen>]
        module ReplicaSet =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type ReplicaSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetArgs()
                member _.Run(_cargs_, _args_: ReplicaSetArgs) = ReplicaSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ReplicaSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let replicaSet = ReplicaSetBuilder()

        [<AutoOpen>]
        module ReplicaSetList =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type ReplicaSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetListArgs()
                member _.Run(_cargs_, _args_: ReplicaSetListArgs) = ReplicaSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ReplicaSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let replicaSetList = ReplicaSetListBuilder()

        [<AutoOpen>]
        module StatefulSet =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type StatefulSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetArgs()
                member _.Run(_cargs_, _args_: StatefulSetArgs) = StatefulSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: StatefulSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let statefulSet = StatefulSetBuilder()

        [<AutoOpen>]
        module StatefulSetList =
            open Pulumi.Kubernetes.Apps.V1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1

            type StatefulSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetListArgs()
                member _.Run(_cargs_, _args_: StatefulSetListArgs) = StatefulSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: StatefulSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let statefulSetList = StatefulSetListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module ControllerRevisionList =
            open Pulumi.Kubernetes.Apps.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

            type ControllerRevisionListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ControllerRevisionListArgs()
                member _.Run(_cargs_, _args_: ControllerRevisionListArgs) = ControllerRevisionList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ControllerRevisionListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ControllerRevisionListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ControllerRevisionListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let controllerRevisionList = ControllerRevisionListBuilder()

        [<AutoOpen>]
        module Deployment =
            open Pulumi.Kubernetes.Apps.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

            type DeploymentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentArgs()
                member _.Run(_cargs_, _args_: DeploymentArgs) = Deployment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DeploymentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let deployment = DeploymentBuilder()

        [<AutoOpen>]
        module DeploymentList =
            open Pulumi.Kubernetes.Apps.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

            type DeploymentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentListArgs()
                member _.Run(_cargs_, _args_: DeploymentListArgs) = DeploymentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DeploymentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let deploymentList = DeploymentListBuilder()

        [<AutoOpen>]
        module StatefulSet =
            open Pulumi.Kubernetes.Apps.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

            type StatefulSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetArgs()
                member _.Run(_cargs_, _args_: StatefulSetArgs) = StatefulSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: StatefulSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let statefulSet = StatefulSetBuilder()

        [<AutoOpen>]
        module StatefulSetList =
            open Pulumi.Kubernetes.Apps.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta1

            type StatefulSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetListArgs()
                member _.Run(_cargs_, _args_: StatefulSetListArgs) = StatefulSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: StatefulSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let statefulSetList = StatefulSetListBuilder()

    module V1Beta2 =
        [<AutoOpen>]
        module ControllerRevisionList =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type ControllerRevisionListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ControllerRevisionListArgs()
                member _.Run(_cargs_, _args_: ControllerRevisionListArgs) = ControllerRevisionList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ControllerRevisionListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ControllerRevisionListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ControllerRevisionListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ControllerRevisionListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ControllerRevisionListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let controllerRevisionList = ControllerRevisionListBuilder()

        [<AutoOpen>]
        module DaemonSet =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type DaemonSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetArgs()
                member _.Run(_cargs_, _args_: DaemonSetArgs) = DaemonSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DaemonSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let daemonSet = DaemonSetBuilder()

        [<AutoOpen>]
        module DaemonSetList =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type DaemonSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetListArgs()
                member _.Run(_cargs_, _args_: DaemonSetListArgs) = DaemonSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DaemonSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let daemonSetList = DaemonSetListBuilder()

        [<AutoOpen>]
        module Deployment =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type DeploymentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentArgs()
                member _.Run(_cargs_, _args_: DeploymentArgs) = Deployment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DeploymentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let deployment = DeploymentBuilder()

        [<AutoOpen>]
        module DeploymentList =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type DeploymentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentListArgs()
                member _.Run(_cargs_, _args_: DeploymentListArgs) = DeploymentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DeploymentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let deploymentList = DeploymentListBuilder()

        [<AutoOpen>]
        module ReplicaSet =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type ReplicaSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetArgs()
                member _.Run(_cargs_, _args_: ReplicaSetArgs) = ReplicaSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ReplicaSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let replicaSet = ReplicaSetBuilder()

        [<AutoOpen>]
        module ReplicaSetList =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type ReplicaSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetListArgs()
                member _.Run(_cargs_, _args_: ReplicaSetListArgs) = ReplicaSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ReplicaSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let replicaSetList = ReplicaSetListBuilder()

        [<AutoOpen>]
        module StatefulSet =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type StatefulSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetArgs()
                member _.Run(_cargs_, _args_: StatefulSetArgs) = StatefulSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: StatefulSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let statefulSet = StatefulSetBuilder()

        [<AutoOpen>]
        module StatefulSetList =
            open Pulumi.Kubernetes.Apps.V1Beta2
            open Pulumi.Kubernetes.Types.Inputs.Apps.V1Beta2

            type StatefulSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatefulSetListArgs()
                member _.Run(_cargs_, _args_: StatefulSetListArgs) = StatefulSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatefulSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatefulSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: StatefulSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatefulSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatefulSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let statefulSetList = StatefulSetListBuilder()

module AuditRegistraion =
    module V1Alpha1 =
        [<AutoOpen>]
        module AuditSink =
            open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

            type AuditSinkBuilder() =
                member _.Yield _ = KubernetesResource.Zero, AuditSinkArgs()
                member _.Run(_cargs_, _args_: AuditSinkArgs) = AuditSink(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: AuditSinkArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: AuditSinkArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: AuditSinkArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: AuditSinkArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: AuditSinkArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: AuditSinkArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: AuditSinkArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let auditSink = AuditSinkBuilder()

        [<AutoOpen>]
        module AuditSinkList =
            open Pulumi.Kubernetes.AuditRegistraion.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.AuditRegistraion.V1Alpha1

            type AuditSinkListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, AuditSinkListArgs()
                member _.Run(_cargs_, _args_: AuditSinkListArgs) = AuditSinkList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: AuditSinkListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: AuditSinkListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: AuditSinkListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: AuditSinkListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: AuditSinkListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: AuditSinkListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: AuditSinkListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let auditSinkList = AuditSinkListBuilder()

module Authentication =
    module V1 =
        [<AutoOpen>]
        module TokenRequest =
            open Pulumi.Kubernetes.Authentication.V1
            open Pulumi.Kubernetes.Types.Inputs.Authentication.V1

            type TokenRequestBuilder() =
                member _.Yield _ = KubernetesResource.Zero, TokenRequestArgs()
                member _.Run(_cargs_, _args_: TokenRequestArgs) = TokenRequest(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: TokenRequestArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: TokenRequestArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: TokenRequestArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: TokenRequestArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: TokenRequestArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: TokenRequestArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: TokenRequestArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let tokenRequest = TokenRequestBuilder()

        [<AutoOpen>]
        module TokenReview =
            open Pulumi.Kubernetes.Authentication.V1
            open Pulumi.Kubernetes.Types.Inputs.Authentication.V1

            type TokenReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, TokenReviewArgs()
                member _.Run(_cargs_, _args_: TokenReviewArgs) = TokenReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: TokenReviewArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: TokenReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: TokenReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: TokenReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: TokenReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: TokenReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: TokenReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let tokenReview = TokenReviewBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module TokenReview =
            open Pulumi.Kubernetes.Authentication.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Authentication.V1Beta1

            type TokenReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, TokenReviewArgs()
                member _.Run(_cargs_, _args_: TokenReviewArgs) = TokenReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: TokenReviewArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: TokenReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: TokenReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: TokenReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: TokenReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: TokenReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: TokenReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let tokenReview = TokenReviewBuilder()

module Authorization =
    module V1 =
        [<AutoOpen>]
        module LocalSubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

            type LocalSubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LocalSubjectAccessReviewArgs()

                member _.Run(_cargs_, _args_: LocalSubjectAccessReviewArgs) =
                    LocalSubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LocalSubjectAccessReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LocalSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LocalSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LocalSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LocalSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LocalSubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: LocalSubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let localSubjectAccessReview = LocalSubjectAccessReviewBuilder()

        [<AutoOpen>]
        module SelfSubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

            type SelfSubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SelfSubjectAccessReviewArgs()

                member _.Run(_cargs_, _args_: SelfSubjectAccessReviewArgs) =
                    SelfSubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SelfSubjectAccessReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SelfSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SelfSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SelfSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SelfSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SelfSubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SelfSubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let selfSubjectAccessReview = SelfSubjectAccessReviewBuilder()

        [<AutoOpen>]
        module SelfSubjectRulesReview =
            open Pulumi.Kubernetes.Authorization.V1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

            type SelfSubjectRulesReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SelfSubjectRulesReviewArgs()
                member _.Run(_cargs_, _args_: SelfSubjectRulesReviewArgs) = SelfSubjectRulesReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SelfSubjectRulesReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SelfSubjectRulesReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SelfSubjectRulesReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SelfSubjectRulesReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SelfSubjectRulesReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SelfSubjectRulesReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SelfSubjectRulesReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let selfSubjectRulesReview = SelfSubjectRulesReviewBuilder()

        [<AutoOpen>]
        module SubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1

            type SubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SubjectAccessReviewArgs()
                member _.Run(_cargs_, _args_: SubjectAccessReviewArgs) = SubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SubjectAccessReviewArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let subjectAccessReview = SubjectAccessReviewBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module LocalSubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

            type LocalSubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LocalSubjectAccessReviewArgs()

                member _.Run(_cargs_, _args_: LocalSubjectAccessReviewArgs) =
                    LocalSubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LocalSubjectAccessReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LocalSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LocalSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LocalSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LocalSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LocalSubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: LocalSubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let localSubjectAccessReview = LocalSubjectAccessReviewBuilder()

        [<AutoOpen>]
        module SelfSubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

            type SelfSubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SelfSubjectAccessReviewArgs()

                member _.Run(_cargs_, _args_: SelfSubjectAccessReviewArgs) =
                    SelfSubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SelfSubjectAccessReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SelfSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SelfSubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SelfSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SelfSubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SelfSubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SelfSubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let selfSubjectAccessReview = SelfSubjectAccessReviewBuilder()

        [<AutoOpen>]
        module SelfSubjectRulesReview =
            open Pulumi.Kubernetes.Authorization.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

            type SelfSubjectRulesReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SelfSubjectRulesReviewArgs()
                member _.Run(_cargs_, _args_: SelfSubjectRulesReviewArgs) = SelfSubjectRulesReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SelfSubjectRulesReviewArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SelfSubjectRulesReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SelfSubjectRulesReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SelfSubjectRulesReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SelfSubjectRulesReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SelfSubjectRulesReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SelfSubjectRulesReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let selfSubjectRulesReview = SelfSubjectRulesReviewBuilder()

        [<AutoOpen>]
        module SubjectAccessReview =
            open Pulumi.Kubernetes.Authorization.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Authorization.V1Beta1

            type SubjectAccessReviewBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SubjectAccessReviewArgs()
                member _.Run(_cargs_, _args_: SubjectAccessReviewArgs) = SubjectAccessReview(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SubjectAccessReviewArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SubjectAccessReviewArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SubjectAccessReviewArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SubjectAccessReviewArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SubjectAccessReviewArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: SubjectAccessReviewArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let subjectAccessReview = SubjectAccessReviewBuilder()

module Autoscaling =
    module V1 =
        [<AutoOpen>]
        module HorizontalPodAutoscaler =
            open Pulumi.Kubernetes.Autoscaling.V1
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V1

            type HorizontalPodAutoscalerBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerArgs) =
                    HorizontalPodAutoscaler(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: HorizontalPodAutoscalerArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let horizontalPodAutoscaler = HorizontalPodAutoscalerBuilder()

        [<AutoOpen>]
        module HorizontalPodAutoscalerList =
            open Pulumi.Kubernetes.Autoscaling.V1
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V1

            type HorizontalPodAutoscalerListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerListArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerListArgs) =
                    HorizontalPodAutoscalerList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: HorizontalPodAutoscalerListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let horizontalPodAutoscalerList = HorizontalPodAutoscalerListBuilder()

    module V2Beta1 =
        [<AutoOpen>]
        module HorizontalPodAutoscaler =
            open Pulumi.Kubernetes.Autoscaling.V2Beta1
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

            type HorizontalPodAutoscalerBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerArgs) =
                    HorizontalPodAutoscaler(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: HorizontalPodAutoscalerArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let horizontalPodAutoscaler = HorizontalPodAutoscalerBuilder()

        [<AutoOpen>]
        module HorizontalPodAutoscalerList =
            open Pulumi.Kubernetes.Autoscaling.V2Beta1
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta1

            type HorizontalPodAutoscalerListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerListArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerListArgs) =
                    HorizontalPodAutoscalerList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: HorizontalPodAutoscalerListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let horizontalPodAutoscalerList = HorizontalPodAutoscalerListBuilder()

    module V2Beta2 =
        [<AutoOpen>]
        module HorizontalPodAutoscaler =
            open Pulumi.Kubernetes.Autoscaling.V2Beta2
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

            type HorizontalPodAutoscalerBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerArgs) =
                    HorizontalPodAutoscaler(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: HorizontalPodAutoscalerArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let horizontalPodAutoscaler = HorizontalPodAutoscalerBuilder()

        [<AutoOpen>]
        module HorizontalPodAutoscalerList =
            open Pulumi.Kubernetes.Autoscaling.V2Beta2
            open Pulumi.Kubernetes.Types.Inputs.Autoscaling.V2Beta2

            type HorizontalPodAutoscalerListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, HorizontalPodAutoscalerListArgs()

                member _.Run(_cargs_, _args_: HorizontalPodAutoscalerListArgs) =
                    HorizontalPodAutoscalerList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: HorizontalPodAutoscalerListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: HorizontalPodAutoscalerListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: HorizontalPodAutoscalerListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: HorizontalPodAutoscalerListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: HorizontalPodAutoscalerListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let horizontalPodAutoscalerList = HorizontalPodAutoscalerListBuilder()

module Batch =
    module V1 =
        [<AutoOpen>]
        module Job =
            open Pulumi.Kubernetes.Batch.V1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V1

            type JobBuilder() =
                member _.Yield _ = KubernetesResource.Zero, JobArgs()
                member _.Run(_cargs_, _args_: JobArgs) = Job(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: JobArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: JobArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: JobArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: JobArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: JobArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: JobArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: JobArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let job = JobBuilder()

        [<AutoOpen>]
        module JobList =
            open Pulumi.Kubernetes.Batch.V1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V1

            type JobListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, JobListArgs()
                member _.Run(_cargs_, _args_: JobListArgs) = JobList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: JobListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: JobListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: JobListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: JobListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: JobListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: JobListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: JobListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let jobList = JobListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module CronJob =
            open Pulumi.Kubernetes.Batch.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V1Beta1

            type CronJobBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CronJobArgs()
                member _.Run(_cargs_, _args_: CronJobArgs) = CronJob(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CronJobArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CronJobArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CronJobArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CronJobArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CronJobArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CronJobArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CronJobArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cronJob = CronJobBuilder()

        [<AutoOpen>]
        module CronJobList =
            open Pulumi.Kubernetes.Batch.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V1Beta1

            type CronJobListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CronJobListArgs()
                member _.Run(_cargs_, _args_: CronJobListArgs) = CronJobList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CronJobListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CronJobListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CronJobListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CronJobListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CronJobListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CronJobListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CronJobListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cronJobList = CronJobListBuilder()

    module V2Alpha1 =
        [<AutoOpen>]
        module CronJob =
            open Pulumi.Kubernetes.Batch.V2Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V2Alpha1

            type CronJobBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CronJobArgs()
                member _.Run(_cargs_, _args_: CronJobArgs) = CronJob(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CronJobArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CronJobArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CronJobArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CronJobArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CronJobArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CronJobArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CronJobArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cronJob = CronJobBuilder()

        [<AutoOpen>]
        module CronJobList =
            open Pulumi.Kubernetes.Batch.V2Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Batch.V2Alpha1

            type CronJobListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CronJobListArgs()
                member _.Run(_cargs_, _args_: CronJobListArgs) = CronJobList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CronJobListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CronJobListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CronJobListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CronJobListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CronJobListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CronJobListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CronJobListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cronJobList = CronJobListBuilder()

module Certificates =
    module V1Beta1 =
        [<AutoOpen>]
        module CertificateSigningRequest =
            open Pulumi.Kubernetes.Certificates.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Certificates.V1Beta1

            type CertificateSigningRequestBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CertificateSigningRequestArgs()

                member _.Run(_cargs_, _args_: CertificateSigningRequestArgs) =
                    CertificateSigningRequest(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CertificateSigningRequestArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CertificateSigningRequestArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CertificateSigningRequestArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CertificateSigningRequestArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CertificateSigningRequestArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CertificateSigningRequestArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CertificateSigningRequestArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let certificateSigningRequest = CertificateSigningRequestBuilder()

        [<AutoOpen>]
        module CertificateSigningRequestList =
            open Pulumi.Kubernetes.Certificates.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Certificates.V1Beta1

            type CertificateSigningRequestListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CertificateSigningRequestListArgs()

                member _.Run(_cargs_, _args_: CertificateSigningRequestListArgs) =
                    CertificateSigningRequestList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CertificateSigningRequestListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CertificateSigningRequestListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CertificateSigningRequestListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CertificateSigningRequestListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CertificateSigningRequestListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CertificateSigningRequestListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CertificateSigningRequestListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let certificateSigningRequestList = CertificateSigningRequestListBuilder()

module Coordination =
    module V1 =
        [<AutoOpen>]
        module Lease =
            open Pulumi.Kubernetes.Coordination.V1
            open Pulumi.Kubernetes.Types.Inputs.Coordination.V1

            type LeaseBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LeaseArgs()
                member _.Run(_cargs_, _args_: LeaseArgs) = Lease(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LeaseArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LeaseArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LeaseArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LeaseArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LeaseArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LeaseArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: LeaseArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let lease = LeaseBuilder()

        [<AutoOpen>]
        module LeaseList =
            open Pulumi.Kubernetes.Coordination.V1
            open Pulumi.Kubernetes.Types.Inputs.Coordination.V1

            type LeaseListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LeaseListArgs()
                member _.Run(_cargs_, _args_: LeaseListArgs) = LeaseList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LeaseListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LeaseListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LeaseListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: LeaseListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LeaseListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LeaseListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LeaseListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let leaseList = LeaseListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module Lease =
            open Pulumi.Kubernetes.Coordination.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Coordination.V1Beta1

            type LeaseBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LeaseArgs()
                member _.Run(_cargs_, _args_: LeaseArgs) = Lease(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LeaseArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LeaseArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LeaseArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LeaseArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LeaseArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LeaseArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: LeaseArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let lease = LeaseBuilder()

        [<AutoOpen>]
        module LeaseList =
            open Pulumi.Kubernetes.Coordination.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Coordination.V1Beta1

            type LeaseListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LeaseListArgs()
                member _.Run(_cargs_, _args_: LeaseListArgs) = LeaseList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LeaseListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LeaseListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LeaseListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: LeaseListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LeaseListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LeaseListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LeaseListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let leaseList = LeaseListBuilder()

module Core =
    module V1 =
        [<AutoOpen>]
        module Binding =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type BindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, BindingArgs()
                member _.Run(_cargs_, _args_: BindingArgs) = Binding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: BindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: BindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: BindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: BindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: BindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: BindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("target")>]
                member _.Target((_cargs_, _args_: BindingArgs), target) =
                    _args_.Target <- input target
                    _cargs_, _args_

            let binding = BindingBuilder()

        [<AutoOpen>]
        module ComponentStatus =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ComponentStatusBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ComponentStatusArgs()
                member _.Run(_cargs_, _args_: ComponentStatusArgs) = ComponentStatus(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ComponentStatusArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ComponentStatusArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ComponentStatusArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("conditions")>]
                member _.Conditions((_cargs_, _args_: ComponentStatusArgs), conditions) =
                    _args_.Conditions <- inputList conditions
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ComponentStatusArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ComponentStatusArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ComponentStatusArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let componentStatus = ComponentStatusBuilder()

        [<AutoOpen>]
        module ComponentStatusList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ComponentStatusListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ComponentStatusListArgs()
                member _.Run(_cargs_, _args_: ComponentStatusListArgs) = ComponentStatusList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ComponentStatusListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ComponentStatusListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ComponentStatusListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ComponentStatusListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ComponentStatusListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ComponentStatusListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ComponentStatusListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let componentStatusList = ComponentStatusListBuilder()

        [<AutoOpen>]
        module ConfigMap =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ConfigMapBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ConfigMapArgs()
                member _.Run(_cargs_, _args_: ConfigMapArgs) = ConfigMap(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ConfigMapArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ConfigMapArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ConfigMapArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("binaryData")>]
                member _.BinaryData((_cargs_, _args_: ConfigMapArgs), binaryData) =
                    _args_.BinaryData <- inputMap binaryData
                    _cargs_, _args_

                [<CustomOperation("data")>]
                member _.Data((_cargs_, _args_: ConfigMapArgs), data) =
                    _args_.Data <- inputMap data
                    _cargs_, _args_

                [<CustomOperation("immutable")>]
                member _.Immutable((_cargs_, _args_: ConfigMapArgs), immutable) =
                    _args_.Immutable <- input immutable
                    _cargs_, _args_

                member _.Immutable((_cargs_, _args_: ConfigMapArgs), immutable) =
                    _args_.Immutable <- io immutable
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ConfigMapArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ConfigMapArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ConfigMapArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let configMap = ConfigMapBuilder()

        [<AutoOpen>]
        module ConfigMapList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ConfigMapListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ConfigMapListArgs()
                member _.Run(_cargs_, _args_: ConfigMapListArgs) = ConfigMapList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ConfigMapListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ConfigMapListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ConfigMapListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ConfigMapListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ConfigMapListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ConfigMapListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ConfigMapListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let configMapList = ConfigMapListBuilder()

        [<AutoOpen>]
        module Endpoints =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type EndpointsBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EndpointsArgs()
                member _.Run(_cargs_, _args_: EndpointsArgs) = Endpoints(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EndpointsArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EndpointsArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EndpointsArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EndpointsArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EndpointsArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EndpointsArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("subsets")>]
                member _.Subsets((_cargs_, _args_: EndpointsArgs), subsets) =
                    _args_.Subsets <- inputList subsets
                    _cargs_, _args_

            let endpoints = EndpointsBuilder()

        [<AutoOpen>]
        module EndpointsList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type EndpointsListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EndpointsListArgs()
                member _.Run(_cargs_, _args_: EndpointsListArgs) = EndpointsList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EndpointsListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EndpointsListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EndpointsListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: EndpointsListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EndpointsListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EndpointsListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EndpointsListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let endpointsList = EndpointsListBuilder()

        [<AutoOpen>]
        module Event =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type EventBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EventArgs()
                member _.Run(_cargs_, _args_: EventArgs) = Event(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EventArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("action")>]
                member _.Action((_cargs_, _args_: EventArgs), action) =
                    _args_.Action <- input action
                    _cargs_, _args_

                member _.Action((_cargs_, _args_: EventArgs), action) =
                    _args_.Action <- io action
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EventArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EventArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("count")>]
                member _.Count((_cargs_, _args_: EventArgs), count) =
                    _args_.Count <- input count
                    _cargs_, _args_

                member _.Count((_cargs_, _args_: EventArgs), count) =
                    _args_.Count <- io count
                    _cargs_, _args_

                [<CustomOperation("eventTime")>]
                member _.EventTime((_cargs_, _args_: EventArgs), eventTime) =
                    _args_.EventTime <- input eventTime
                    _cargs_, _args_

                member _.EventTime((_cargs_, _args_: EventArgs), eventTime) =
                    _args_.EventTime <- io eventTime
                    _cargs_, _args_

                [<CustomOperation("firstTimestamp")>]
                member _.FirstTimestamp((_cargs_, _args_: EventArgs), firstTimestamp) =
                    _args_.FirstTimestamp <- input firstTimestamp
                    _cargs_, _args_

                member _.FirstTimestamp((_cargs_, _args_: EventArgs), firstTimestamp) =
                    _args_.FirstTimestamp <- io firstTimestamp
                    _cargs_, _args_

                [<CustomOperation("involvedObject")>]
                member _.InvolvedObject((_cargs_, _args_: EventArgs), involvedObject) =
                    _args_.InvolvedObject <- input involvedObject
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EventArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EventArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("lastTimestamp")>]
                member _.LastTimestamp((_cargs_, _args_: EventArgs), lastTimestamp) =
                    _args_.LastTimestamp <- input lastTimestamp
                    _cargs_, _args_

                member _.LastTimestamp((_cargs_, _args_: EventArgs), lastTimestamp) =
                    _args_.LastTimestamp <- io lastTimestamp
                    _cargs_, _args_

                [<CustomOperation("message")>]
                member _.Message((_cargs_, _args_: EventArgs), message) =
                    _args_.Message <- input message
                    _cargs_, _args_

                member _.Message((_cargs_, _args_: EventArgs), message) =
                    _args_.Message <- io message
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EventArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("reason")>]
                member _.Reason((_cargs_, _args_: EventArgs), reason) =
                    _args_.Reason <- input reason
                    _cargs_, _args_

                member _.Reason((_cargs_, _args_: EventArgs), reason) =
                    _args_.Reason <- io reason
                    _cargs_, _args_

                [<CustomOperation("related")>]
                member _.Related((_cargs_, _args_: EventArgs), related) =
                    _args_.Related <- input related
                    _cargs_, _args_

                [<CustomOperation("reportingComponent")>]
                member _.ReportingComponent((_cargs_, _args_: EventArgs), reportingComponent) =
                    _args_.ReportingComponent <- input reportingComponent
                    _cargs_, _args_

                member _.ReportingComponent((_cargs_, _args_: EventArgs), reportingComponent) =
                    _args_.ReportingComponent <- io reportingComponent
                    _cargs_, _args_

                [<CustomOperation("reportingInstance")>]
                member _.ReportingInstance((_cargs_, _args_: EventArgs), reportingInstance) =
                    _args_.ReportingInstance <- input reportingInstance
                    _cargs_, _args_

                member _.ReportingInstance((_cargs_, _args_: EventArgs), reportingInstance) =
                    _args_.ReportingInstance <- io reportingInstance
                    _cargs_, _args_

                [<CustomOperation("series")>]
                member _.Series((_cargs_, _args_: EventArgs), series) =
                    _args_.Series <- input series
                    _cargs_, _args_

                [<CustomOperation("source")>]
                member _.Source((_cargs_, _args_: EventArgs), source) =
                    _args_.Source <- input source
                    _cargs_, _args_

                [<CustomOperation("type")>]
                member _.Type((_cargs_, _args_: EventArgs), ``type``) =
                    _args_.Type <- input ``type``
                    _cargs_, _args_

                member _.Type((_cargs_, _args_: EventArgs), ``type``) =
                    _args_.Type <- io ``type``
                    _cargs_, _args_

            let event = EventBuilder()

        [<AutoOpen>]
        module EventList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type EventListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EventListArgs()
                member _.Run(_cargs_, _args_: EventListArgs) = EventList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EventListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EventListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EventListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: EventListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EventListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EventListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EventListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let eventList = EventListBuilder()

        [<AutoOpen>]
        module LimitRange =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type LimitRangeBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LimitRangeArgs()
                member _.Run(_cargs_, _args_: LimitRangeArgs) = LimitRange(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LimitRangeArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LimitRangeArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LimitRangeArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LimitRangeArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LimitRangeArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LimitRangeArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: LimitRangeArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let limitRange = LimitRangeBuilder()

        [<AutoOpen>]
        module LimitRangeList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type LimitRangeListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, LimitRangeListArgs()
                member _.Run(_cargs_, _args_: LimitRangeListArgs) = LimitRangeList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: LimitRangeListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: LimitRangeListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: LimitRangeListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: LimitRangeListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: LimitRangeListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: LimitRangeListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: LimitRangeListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let limitRangeList = LimitRangeListBuilder()

        [<AutoOpen>]
        module Namespace =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type NamespaceBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NamespaceArgs()
                member _.Run(_cargs_, _args_: NamespaceArgs) = Namespace(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NamespaceArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NamespaceArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NamespaceArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NamespaceArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NamespaceArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NamespaceArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: NamespaceArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let ``namespace`` = NamespaceBuilder()

        [<AutoOpen>]
        module NamespaceList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type NamespaceListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NamespaceListArgs()
                member _.Run(_cargs_, _args_: NamespaceListArgs) = NamespaceList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NamespaceListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NamespaceListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NamespaceListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: NamespaceListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NamespaceListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NamespaceListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NamespaceListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let namespaceList = NamespaceListBuilder()

        [<AutoOpen>]
        module Node =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type NodeBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NodeArgs()
                member _.Run(_cargs_, _args_: NodeArgs) = Node(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NodeArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NodeArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NodeArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NodeArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NodeArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NodeArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: NodeArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let node = NodeBuilder()

        [<AutoOpen>]
        module NodeList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type NodeListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NodeListArgs()
                member _.Run(_cargs_, _args_: NodeListArgs) = NodeList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NodeListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NodeListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NodeListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: NodeListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NodeListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NodeListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NodeListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let nodeList = NodeListBuilder()

        [<AutoOpen>]
        module PersistentVolume =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PersistentVolumeBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PersistentVolumeArgs()
                member _.Run(_cargs_, _args_: PersistentVolumeArgs) = PersistentVolume(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PersistentVolumeArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PersistentVolumeArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PersistentVolumeArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PersistentVolumeArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PersistentVolumeArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PersistentVolumeArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PersistentVolumeArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let persistentVolume = PersistentVolumeBuilder()

        [<AutoOpen>]
        module PersistentVolumeClaim =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PersistentVolumeClaimBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimArgs()
                member _.Run(_cargs_, _args_: PersistentVolumeClaimArgs) = PersistentVolumeClaim(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PersistentVolumeClaimArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PersistentVolumeClaimArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PersistentVolumeClaimArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PersistentVolumeClaimArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PersistentVolumeClaimArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PersistentVolumeClaimArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PersistentVolumeClaimArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let persistentVolumeClaim = PersistentVolumeClaimBuilder()

        [<AutoOpen>]
        module PersistentVolumeClaimList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PersistentVolumeClaimListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PersistentVolumeClaimListArgs()

                member _.Run(_cargs_, _args_: PersistentVolumeClaimListArgs) =
                    PersistentVolumeClaimList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PersistentVolumeClaimListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PersistentVolumeClaimListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PersistentVolumeClaimListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PersistentVolumeClaimListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PersistentVolumeClaimListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PersistentVolumeClaimListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PersistentVolumeClaimListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let persistentVolumeClaimList = PersistentVolumeClaimListBuilder()

        [<AutoOpen>]
        module PersistentVolumeList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PersistentVolumeListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PersistentVolumeListArgs()
                member _.Run(_cargs_, _args_: PersistentVolumeListArgs) = PersistentVolumeList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PersistentVolumeListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PersistentVolumeListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PersistentVolumeListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PersistentVolumeListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PersistentVolumeListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PersistentVolumeListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PersistentVolumeListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let persistentVolumeList = PersistentVolumeListBuilder()

        [<AutoOpen>]
        module Pod =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PodBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodArgs()
                member _.Run(_cargs_, _args_: PodArgs) = Pod(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PodArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let pod = PodBuilder()

        [<AutoOpen>]
        module PodList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PodListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodListArgs()
                member _.Run(_cargs_, _args_: PodListArgs) = PodList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podList = PodListBuilder()

        [<AutoOpen>]
        module PodTemplate =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PodTemplateBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodTemplateArgs()
                member _.Run(_cargs_, _args_: PodTemplateArgs) = PodTemplate(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodTemplateArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodTemplateArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodTemplateArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodTemplateArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodTemplateArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodTemplateArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("template")>]
                member _.Template((_cargs_, _args_: PodTemplateArgs), template) =
                    _args_.Template <- input template
                    _cargs_, _args_

            let podTemplate = PodTemplateBuilder()

        [<AutoOpen>]
        module PodTemplateList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type PodTemplateListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodTemplateListArgs()
                member _.Run(_cargs_, _args_: PodTemplateListArgs) = PodTemplateList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodTemplateListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodTemplateListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodTemplateListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodTemplateListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodTemplateListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodTemplateListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodTemplateListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podTemplateList = PodTemplateListBuilder()

        [<AutoOpen>]
        module ReplicationController =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ReplicationControllerBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicationControllerArgs()
                member _.Run(_cargs_, _args_: ReplicationControllerArgs) = ReplicationController(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicationControllerArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicationControllerArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicationControllerArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicationControllerArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicationControllerArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicationControllerArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ReplicationControllerArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let replicationController = ReplicationControllerBuilder()

        [<AutoOpen>]
        module ReplicationControllerList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ReplicationControllerListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicationControllerListArgs()

                member _.Run(_cargs_, _args_: ReplicationControllerListArgs) =
                    ReplicationControllerList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicationControllerListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicationControllerListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicationControllerListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ReplicationControllerListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicationControllerListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicationControllerListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicationControllerListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let replicationControllerList = ReplicationControllerListBuilder()

        [<AutoOpen>]
        module ResourceQuota =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ResourceQuotaBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ResourceQuotaArgs()
                member _.Run(_cargs_, _args_: ResourceQuotaArgs) = ResourceQuota(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ResourceQuotaArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ResourceQuotaArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ResourceQuotaArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ResourceQuotaArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ResourceQuotaArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ResourceQuotaArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ResourceQuotaArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let resourceQuota = ResourceQuotaBuilder()

        [<AutoOpen>]
        module ResourceQuotaList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ResourceQuotaListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ResourceQuotaListArgs()
                member _.Run(_cargs_, _args_: ResourceQuotaListArgs) = ResourceQuotaList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ResourceQuotaListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ResourceQuotaListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ResourceQuotaListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ResourceQuotaListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ResourceQuotaListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ResourceQuotaListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ResourceQuotaListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let resourceQuotaList = ResourceQuotaListBuilder()

        [<AutoOpen>]
        module Secret =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type SecretBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SecretArgs()
                member _.Run(_cargs_, _args_: SecretArgs) = Secret(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SecretArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SecretArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SecretArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("data")>]
                member _.Data((_cargs_, _args_: SecretArgs), data) =
                    _args_.Data <- inputMap data
                    _cargs_, _args_

                [<CustomOperation("immutable")>]
                member _.Immutable((_cargs_, _args_: SecretArgs), immutable) =
                    _args_.Immutable <- input immutable
                    _cargs_, _args_

                member _.Immutable((_cargs_, _args_: SecretArgs), immutable) =
                    _args_.Immutable <- io immutable
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SecretArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SecretArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SecretArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("stringData")>]
                member _.StringData((_cargs_, _args_: SecretArgs), stringData) =
                    _args_.StringData <- inputMap stringData
                    _cargs_, _args_

                [<CustomOperation("type")>]
                member _.Type((_cargs_, _args_: SecretArgs), ``type``) =
                    _args_.Type <- input ``type``
                    _cargs_, _args_

                member _.Type((_cargs_, _args_: SecretArgs), ``type``) =
                    _args_.Type <- io ``type``
                    _cargs_, _args_

            let secret = SecretBuilder()

        [<AutoOpen>]
        module SecretList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type SecretListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, SecretListArgs()
                member _.Run(_cargs_, _args_: SecretListArgs) = SecretList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: SecretListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: SecretListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: SecretListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: SecretListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: SecretListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: SecretListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: SecretListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let secretList = SecretListBuilder()

        [<AutoOpen>]
        module Service =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ServiceBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ServiceArgs()
                member _.Run(_cargs_, _args_: ServiceArgs) = Service(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ServiceArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ServiceArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ServiceArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ServiceArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ServiceArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ServiceArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ServiceArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let service = ServiceBuilder()

        [<AutoOpen>]
        module ServiceAccount =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ServiceAccountBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ServiceAccountArgs()
                member _.Run(_cargs_, _args_: ServiceAccountArgs) = ServiceAccount(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ServiceAccountArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ServiceAccountArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ServiceAccountArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("automountServiceAccountToken")>]
                member _.AutomountServiceAccountToken(
                    (_cargs_, _args_: ServiceAccountArgs),
                    automountServiceAccountToken)
                    =
                    _args_.AutomountServiceAccountToken <- input automountServiceAccountToken
                    _cargs_, _args_

                member _.AutomountServiceAccountToken(
                    (_cargs_, _args_: ServiceAccountArgs),
                    automountServiceAccountToken)
                    =
                    _args_.AutomountServiceAccountToken <- io automountServiceAccountToken
                    _cargs_, _args_

                [<CustomOperation("imagePullSecrets")>]
                member _.ImagePullSecrets((_cargs_, _args_: ServiceAccountArgs), imagePullSecrets) =
                    _args_.ImagePullSecrets <- inputList imagePullSecrets
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ServiceAccountArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ServiceAccountArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ServiceAccountArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("secrets")>]
                member _.Secrets((_cargs_, _args_: ServiceAccountArgs), secrets) =
                    _args_.Secrets <- inputList secrets
                    _cargs_, _args_

            let serviceAccount = ServiceAccountBuilder()

        [<AutoOpen>]
        module ServiceAccountList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ServiceAccountListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ServiceAccountListArgs()
                member _.Run(_cargs_, _args_: ServiceAccountListArgs) = ServiceAccountList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ServiceAccountListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ServiceAccountListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ServiceAccountListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ServiceAccountListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ServiceAccountListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ServiceAccountListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ServiceAccountListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let serviceAccountList = ServiceAccountListBuilder()

        [<AutoOpen>]
        module ServiceList =
            open Pulumi.Kubernetes.Core.V1
            open Pulumi.Kubernetes.Types.Inputs.Core.V1

            type ServiceListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ServiceListArgs()
                member _.Run(_cargs_, _args_: ServiceListArgs) = ServiceList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ServiceListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ServiceListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ServiceListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ServiceListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ServiceListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ServiceListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let serviceList = ServiceListBuilder()

module Discovery =
    module V1Beta1 =
        [<AutoOpen>]
        module EndpointSlice =
            open Pulumi.Kubernetes.Discovery.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Discovery.V1Beta1

            type EndpointSliceBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EndpointSliceArgs()
                member _.Run(_cargs_, _args_: EndpointSliceArgs) = EndpointSlice(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EndpointSliceArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("addressType")>]
                member _.AddressType((_cargs_, _args_: EndpointSliceArgs), addressType) =
                    _args_.AddressType <- input addressType
                    _cargs_, _args_

                member _.AddressType((_cargs_, _args_: EndpointSliceArgs), addressType) =
                    _args_.AddressType <- io addressType
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EndpointSliceArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EndpointSliceArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("endpoints")>]
                member _.Endpoints((_cargs_, _args_: EndpointSliceArgs), endpoints) =
                    _args_.Endpoints <- inputList endpoints
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EndpointSliceArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EndpointSliceArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EndpointSliceArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("ports")>]
                member _.Ports((_cargs_, _args_: EndpointSliceArgs), ports) =
                    _args_.Ports <- inputList ports
                    _cargs_, _args_

            let endpointSlice = EndpointSliceBuilder()

        [<AutoOpen>]
        module EndpointSliceList =
            open Pulumi.Kubernetes.Discovery.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Discovery.V1Beta1

            type EndpointSliceListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EndpointSliceListArgs()
                member _.Run(_cargs_, _args_: EndpointSliceListArgs) = EndpointSliceList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EndpointSliceListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EndpointSliceListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EndpointSliceListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: EndpointSliceListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EndpointSliceListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EndpointSliceListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EndpointSliceListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let endpointSliceList = EndpointSliceListBuilder()

module Events =
    module V1Beta1 =
        [<AutoOpen>]
        module Event =
            open Pulumi.Kubernetes.Events.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Events.V1Beta1

            type EventBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EventArgs()
                member _.Run(_cargs_, _args_: EventArgs) = Event(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EventArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("action")>]
                member _.Action((_cargs_, _args_: EventArgs), action) =
                    _args_.Action <- input action
                    _cargs_, _args_

                member _.Action((_cargs_, _args_: EventArgs), action) =
                    _args_.Action <- io action
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EventArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EventArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("deprecatedCount")>]
                member _.DeprecatedCount((_cargs_, _args_: EventArgs), deprecatedCount) =
                    _args_.DeprecatedCount <- input deprecatedCount
                    _cargs_, _args_

                member _.DeprecatedCount((_cargs_, _args_: EventArgs), deprecatedCount) =
                    _args_.DeprecatedCount <- io deprecatedCount
                    _cargs_, _args_

                [<CustomOperation("deprecatedFirstTimestamp")>]
                member _.DeprecatedFirstTimestamp((_cargs_, _args_: EventArgs), deprecatedFirstTimestamp) =
                    _args_.DeprecatedFirstTimestamp <- input deprecatedFirstTimestamp
                    _cargs_, _args_

                member _.DeprecatedFirstTimestamp((_cargs_, _args_: EventArgs), deprecatedFirstTimestamp) =
                    _args_.DeprecatedFirstTimestamp <- io deprecatedFirstTimestamp
                    _cargs_, _args_

                [<CustomOperation("deprecatedLastTimestamp")>]
                member _.DeprecatedLastTimestamp((_cargs_, _args_: EventArgs), deprecatedLastTimestamp) =
                    _args_.DeprecatedLastTimestamp <- input deprecatedLastTimestamp
                    _cargs_, _args_

                member _.DeprecatedLastTimestamp((_cargs_, _args_: EventArgs), deprecatedLastTimestamp) =
                    _args_.DeprecatedLastTimestamp <- io deprecatedLastTimestamp
                    _cargs_, _args_

                [<CustomOperation("deprecatedSource")>]
                member _.DeprecatedSource((_cargs_, _args_: EventArgs), deprecatedSource) =
                    _args_.DeprecatedSource <- input deprecatedSource
                    _cargs_, _args_

                [<CustomOperation("eventTime")>]
                member _.EventTime((_cargs_, _args_: EventArgs), eventTime) =
                    _args_.EventTime <- input eventTime
                    _cargs_, _args_

                member _.EventTime((_cargs_, _args_: EventArgs), eventTime) =
                    _args_.EventTime <- io eventTime
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EventArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EventArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EventArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("note")>]
                member _.Note((_cargs_, _args_: EventArgs), note) =
                    _args_.Note <- input note
                    _cargs_, _args_

                member _.Note((_cargs_, _args_: EventArgs), note) =
                    _args_.Note <- io note
                    _cargs_, _args_

                [<CustomOperation("reason")>]
                member _.Reason((_cargs_, _args_: EventArgs), reason) =
                    _args_.Reason <- input reason
                    _cargs_, _args_

                member _.Reason((_cargs_, _args_: EventArgs), reason) =
                    _args_.Reason <- io reason
                    _cargs_, _args_

                [<CustomOperation("regarding")>]
                member _.Regarding((_cargs_, _args_: EventArgs), regarding) =
                    _args_.Regarding <- input regarding
                    _cargs_, _args_

                [<CustomOperation("related")>]
                member _.Related((_cargs_, _args_: EventArgs), related) =
                    _args_.Related <- input related
                    _cargs_, _args_

                [<CustomOperation("reportingController")>]
                member _.ReportingController((_cargs_, _args_: EventArgs), reportingController) =
                    _args_.ReportingController <- input reportingController
                    _cargs_, _args_

                member _.ReportingController((_cargs_, _args_: EventArgs), reportingController) =
                    _args_.ReportingController <- io reportingController
                    _cargs_, _args_

                [<CustomOperation("reportingInstance")>]
                member _.ReportingInstance((_cargs_, _args_: EventArgs), reportingInstance) =
                    _args_.ReportingInstance <- input reportingInstance
                    _cargs_, _args_

                member _.ReportingInstance((_cargs_, _args_: EventArgs), reportingInstance) =
                    _args_.ReportingInstance <- io reportingInstance
                    _cargs_, _args_

                [<CustomOperation("series")>]
                member _.Series((_cargs_, _args_: EventArgs), series) =
                    _args_.Series <- input series
                    _cargs_, _args_

                [<CustomOperation("type")>]
                member _.Type((_cargs_, _args_: EventArgs), ``type``) =
                    _args_.Type <- input ``type``
                    _cargs_, _args_

                member _.Type((_cargs_, _args_: EventArgs), ``type``) =
                    _args_.Type <- io ``type``
                    _cargs_, _args_

            let event = EventBuilder()

        [<AutoOpen>]
        module EventList =
            open Pulumi.Kubernetes.Events.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Events.V1Beta1

            type EventListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, EventListArgs()
                member _.Run(_cargs_, _args_: EventListArgs) = EventList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: EventListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: EventListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: EventListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: EventListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: EventListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: EventListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: EventListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let eventList = EventListBuilder()

module Extensions =
    module V1Beta1 =
        [<AutoOpen>]
        module DaemonSet =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type DaemonSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetArgs()
                member _.Run(_cargs_, _args_: DaemonSetArgs) = DaemonSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DaemonSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let daemonSet = DaemonSetBuilder()

        [<AutoOpen>]
        module DaemonSetList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type DaemonSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DaemonSetListArgs()
                member _.Run(_cargs_, _args_: DaemonSetListArgs) = DaemonSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DaemonSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DaemonSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DaemonSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DaemonSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DaemonSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let daemonSetList = DaemonSetListBuilder()

        [<AutoOpen>]
        module Deployment =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type DeploymentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentArgs()
                member _.Run(_cargs_, _args_: DeploymentArgs) = Deployment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: DeploymentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let deployment = DeploymentBuilder()

        [<AutoOpen>]
        module DeploymentList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type DeploymentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, DeploymentListArgs()
                member _.Run(_cargs_, _args_: DeploymentListArgs) = DeploymentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: DeploymentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: DeploymentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: DeploymentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: DeploymentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: DeploymentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let deploymentList = DeploymentListBuilder()

        [<AutoOpen>]
        module Ingress =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type IngressBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressArgs()
                member _.Run(_cargs_, _args_: IngressArgs) = Ingress(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: IngressArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let ingress = IngressBuilder()

        [<AutoOpen>]
        module IngressList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type IngressListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressListArgs()
                member _.Run(_cargs_, _args_: IngressListArgs) = IngressList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: IngressListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let ingressList = IngressListBuilder()

        [<AutoOpen>]
        module NetworkPolicy =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type NetworkPolicyBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NetworkPolicyArgs()
                member _.Run(_cargs_, _args_: NetworkPolicyArgs) = NetworkPolicy(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NetworkPolicyArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NetworkPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NetworkPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NetworkPolicyArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NetworkPolicyArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NetworkPolicyArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: NetworkPolicyArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let networkPolicy = NetworkPolicyBuilder()

        [<AutoOpen>]
        module NetworkPolicyList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type NetworkPolicyListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NetworkPolicyListArgs()
                member _.Run(_cargs_, _args_: NetworkPolicyListArgs) = NetworkPolicyList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NetworkPolicyListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NetworkPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NetworkPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: NetworkPolicyListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NetworkPolicyListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NetworkPolicyListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NetworkPolicyListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let networkPolicyList = NetworkPolicyListBuilder()

        [<AutoOpen>]
        module PodSecurityPolicy =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type PodSecurityPolicyBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicyArgs()
                member _.Run(_cargs_, _args_: PodSecurityPolicyArgs) = PodSecurityPolicy(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodSecurityPolicyArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodSecurityPolicyArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodSecurityPolicyArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodSecurityPolicyArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PodSecurityPolicyArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let podSecurityPolicy = PodSecurityPolicyBuilder()

        [<AutoOpen>]
        module PodSecurityPolicyList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type PodSecurityPolicyListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicyListArgs()
                member _.Run(_cargs_, _args_: PodSecurityPolicyListArgs) = PodSecurityPolicyList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodSecurityPolicyListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodSecurityPolicyListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodSecurityPolicyListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodSecurityPolicyListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodSecurityPolicyListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podSecurityPolicyList = PodSecurityPolicyListBuilder()

        [<AutoOpen>]
        module ReplicaSet =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type ReplicaSetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetArgs()
                member _.Run(_cargs_, _args_: ReplicaSetArgs) = ReplicaSet(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: ReplicaSetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let replicaSet = ReplicaSetBuilder()

        [<AutoOpen>]
        module ReplicaSetList =
            open Pulumi.Kubernetes.Extensions.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Extensions.V1Beta1

            type ReplicaSetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ReplicaSetListArgs()
                member _.Run(_cargs_, _args_: ReplicaSetListArgs) = ReplicaSetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ReplicaSetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ReplicaSetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ReplicaSetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ReplicaSetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ReplicaSetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let replicaSetList = ReplicaSetListBuilder()

module FlowControl =
    module V1Alpha1 =
        [<AutoOpen>]
        module FlowSchema =
            open Pulumi.Kubernetes.FlowControl.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

            type FlowSchemaBuilder() =
                member _.Yield _ = KubernetesResource.Zero, FlowSchemaArgs()
                member _.Run(_cargs_, _args_: FlowSchemaArgs) = FlowSchema(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: FlowSchemaArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: FlowSchemaArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: FlowSchemaArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: FlowSchemaArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: FlowSchemaArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: FlowSchemaArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: FlowSchemaArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let flowSchema = FlowSchemaBuilder()

        [<AutoOpen>]
        module FlowSchemaList =
            open Pulumi.Kubernetes.FlowControl.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

            type FlowSchemaListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, FlowSchemaListArgs()
                member _.Run(_cargs_, _args_: FlowSchemaListArgs) = FlowSchemaList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: FlowSchemaListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: FlowSchemaListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: FlowSchemaListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: FlowSchemaListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: FlowSchemaListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: FlowSchemaListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: FlowSchemaListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let flowSchemaList = FlowSchemaListBuilder()

        [<AutoOpen>]
        module PriorityLevelConfiguration =
            open Pulumi.Kubernetes.FlowControl.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

            type PriorityLevelConfigurationBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationArgs()

                member _.Run(_cargs_, _args_: PriorityLevelConfigurationArgs) =
                    PriorityLevelConfiguration(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityLevelConfigurationArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityLevelConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityLevelConfigurationArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityLevelConfigurationArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityLevelConfigurationArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityLevelConfigurationArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PriorityLevelConfigurationArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let priorityLevelConfiguration = PriorityLevelConfigurationBuilder()

        [<AutoOpen>]
        module PriorityLevelConfigurationList =
            open Pulumi.Kubernetes.FlowControl.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.FlowControl.V1Alpha1

            type PriorityLevelConfigurationListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityLevelConfigurationListArgs()

                member _.Run(_cargs_, _args_: PriorityLevelConfigurationListArgs) =
                    PriorityLevelConfigurationList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityLevelConfigurationListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityLevelConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityLevelConfigurationListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PriorityLevelConfigurationListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityLevelConfigurationListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityLevelConfigurationListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityLevelConfigurationListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let priorityLevelConfigurationList = PriorityLevelConfigurationListBuilder()

module Meta =
    module V1 =
        [<AutoOpen>]
        module Status =
            open Pulumi.Kubernetes.Meta.V1
            open Pulumi.Kubernetes.Types.Inputs.Meta.V1

            type StatusBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StatusArgs()
                member _.Run(_cargs_, _args_: StatusArgs) = Status(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StatusArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StatusArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StatusArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("code")>]
                member _.Code((_cargs_, _args_: StatusArgs), code) =
                    _args_.Code <- input code
                    _cargs_, _args_

                member _.Code((_cargs_, _args_: StatusArgs), code) =
                    _args_.Code <- io code
                    _cargs_, _args_

                [<CustomOperation("details")>]
                member _.Details((_cargs_, _args_: StatusArgs), details) =
                    _args_.Details <- input details
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StatusArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StatusArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("message")>]
                member _.Message((_cargs_, _args_: StatusArgs), message) =
                    _args_.Message <- input message
                    _cargs_, _args_

                member _.Message((_cargs_, _args_: StatusArgs), message) =
                    _args_.Message <- io message
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StatusArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("reason")>]
                member _.Reason((_cargs_, _args_: StatusArgs), reason) =
                    _args_.Reason <- input reason
                    _cargs_, _args_

                member _.Reason((_cargs_, _args_: StatusArgs), reason) =
                    _args_.Reason <- io reason
                    _cargs_, _args_

            let status = StatusBuilder()

module Networking =
    module V1 =
        [<AutoOpen>]
        module NetworkPolicy =
            open Pulumi.Kubernetes.Networking.V1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1

            type NetworkPolicyBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NetworkPolicyArgs()
                member _.Run(_cargs_, _args_: NetworkPolicyArgs) = NetworkPolicy(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NetworkPolicyArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NetworkPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NetworkPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NetworkPolicyArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NetworkPolicyArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NetworkPolicyArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: NetworkPolicyArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let networkPolicy = NetworkPolicyBuilder()

        [<AutoOpen>]
        module NetworkPolicyList =
            open Pulumi.Kubernetes.Networking.V1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1

            type NetworkPolicyListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, NetworkPolicyListArgs()
                member _.Run(_cargs_, _args_: NetworkPolicyListArgs) = NetworkPolicyList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: NetworkPolicyListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: NetworkPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: NetworkPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: NetworkPolicyListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: NetworkPolicyListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: NetworkPolicyListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: NetworkPolicyListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let networkPolicyList = NetworkPolicyListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module Ingress =
            open Pulumi.Kubernetes.Networking.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

            type IngressBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressArgs()
                member _.Run(_cargs_, _args_: IngressArgs) = Ingress(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: IngressArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let ingress = IngressBuilder()

        [<AutoOpen>]
        module IngressClass =
            open Pulumi.Kubernetes.Networking.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

            type IngressClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressClassArgs()
                member _.Run(_cargs_, _args_: IngressClassArgs) = IngressClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: IngressClassArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let ingressClass = IngressClassBuilder()

        [<AutoOpen>]
        module IngressClassList =
            open Pulumi.Kubernetes.Networking.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

            type IngressClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressClassListArgs()
                member _.Run(_cargs_, _args_: IngressClassListArgs) = IngressClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: IngressClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let ingressClassList = IngressClassListBuilder()

        [<AutoOpen>]
        module IngressList =
            open Pulumi.Kubernetes.Networking.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Networking.V1Beta1

            type IngressListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, IngressListArgs()
                member _.Run(_cargs_, _args_: IngressListArgs) = IngressList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: IngressListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: IngressListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: IngressListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: IngressListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: IngressListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: IngressListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: IngressListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let ingressList = IngressListBuilder()

module Node =
    module V1Alpha1 =
        [<AutoOpen>]
        module RuntimeClass =
            open Pulumi.Kubernetes.Node.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Node.V1Alpha1

            type RuntimeClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RuntimeClassArgs()
                member _.Run(_cargs_, _args_: RuntimeClassArgs) = RuntimeClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RuntimeClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RuntimeClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RuntimeClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RuntimeClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RuntimeClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RuntimeClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: RuntimeClassArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let runtimeClass = RuntimeClassBuilder()

        [<AutoOpen>]
        module RuntimeClassList =
            open Pulumi.Kubernetes.Node.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Node.V1Alpha1

            type RuntimeClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RuntimeClassListArgs()
                member _.Run(_cargs_, _args_: RuntimeClassListArgs) = RuntimeClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RuntimeClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RuntimeClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RuntimeClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RuntimeClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RuntimeClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RuntimeClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RuntimeClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let runtimeClassList = RuntimeClassListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module RuntimeClass =
            open Pulumi.Kubernetes.Node.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Node.V1Beta1

            type RuntimeClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RuntimeClassArgs()
                member _.Run(_cargs_, _args_: RuntimeClassArgs) = RuntimeClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RuntimeClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RuntimeClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RuntimeClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("handler")>]
                member _.Handler((_cargs_, _args_: RuntimeClassArgs), handler) =
                    _args_.Handler <- input handler
                    _cargs_, _args_

                member _.Handler((_cargs_, _args_: RuntimeClassArgs), handler) =
                    _args_.Handler <- io handler
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RuntimeClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RuntimeClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RuntimeClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("overhead")>]
                member _.Overhead((_cargs_, _args_: RuntimeClassArgs), overhead) =
                    _args_.Overhead <- input overhead
                    _cargs_, _args_

                [<CustomOperation("scheduling")>]
                member _.Scheduling((_cargs_, _args_: RuntimeClassArgs), scheduling) =
                    _args_.Scheduling <- input scheduling
                    _cargs_, _args_

            let runtimeClass = RuntimeClassBuilder()

        [<AutoOpen>]
        module RuntimeClassList =
            open Pulumi.Kubernetes.Node.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Node.V1Beta1

            type RuntimeClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RuntimeClassListArgs()
                member _.Run(_cargs_, _args_: RuntimeClassListArgs) = RuntimeClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RuntimeClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RuntimeClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RuntimeClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RuntimeClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RuntimeClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RuntimeClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RuntimeClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let runtimeClassList = RuntimeClassListBuilder()

module Policy =
    module V1Beta1 =
        [<AutoOpen>]
        module PodDisruptionBudget =
            open Pulumi.Kubernetes.Policy.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

            type PodDisruptionBudgetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodDisruptionBudgetArgs()
                member _.Run(_cargs_, _args_: PodDisruptionBudgetArgs) = PodDisruptionBudget(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodDisruptionBudgetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodDisruptionBudgetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodDisruptionBudgetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodDisruptionBudgetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodDisruptionBudgetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodDisruptionBudgetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PodDisruptionBudgetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let podDisruptionBudget = PodDisruptionBudgetBuilder()

        [<AutoOpen>]
        module PodDisruptionBudgetList =
            open Pulumi.Kubernetes.Policy.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

            type PodDisruptionBudgetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodDisruptionBudgetListArgs()

                member _.Run(_cargs_, _args_: PodDisruptionBudgetListArgs) =
                    PodDisruptionBudgetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodDisruptionBudgetListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodDisruptionBudgetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodDisruptionBudgetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodDisruptionBudgetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodDisruptionBudgetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodDisruptionBudgetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodDisruptionBudgetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podDisruptionBudgetList = PodDisruptionBudgetListBuilder()

        [<AutoOpen>]
        module PodSecurityPolicy =
            open Pulumi.Kubernetes.Policy.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

            type PodSecurityPolicyBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicyArgs()
                member _.Run(_cargs_, _args_: PodSecurityPolicyArgs) = PodSecurityPolicy(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodSecurityPolicyArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodSecurityPolicyArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodSecurityPolicyArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodSecurityPolicyArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PodSecurityPolicyArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let podSecurityPolicy = PodSecurityPolicyBuilder()

        [<AutoOpen>]
        module PodSecurityPolicyList =
            open Pulumi.Kubernetes.Policy.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Policy.V1Beta1

            type PodSecurityPolicyListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodSecurityPolicyListArgs()
                member _.Run(_cargs_, _args_: PodSecurityPolicyListArgs) = PodSecurityPolicyList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodSecurityPolicyListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodSecurityPolicyListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodSecurityPolicyListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodSecurityPolicyListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodSecurityPolicyListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodSecurityPolicyListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podSecurityPolicyList = PodSecurityPolicyListBuilder()

module Rbac =
    module V1 =
        [<AutoOpen>]
        module ClusterRole =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type ClusterRoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleArgs()
                member _.Run(_cargs_, _args_: ClusterRoleArgs) = ClusterRole(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("aggregationRule")>]
                member _.AggregationRule((_cargs_, _args_: ClusterRoleArgs), aggregationRule) =
                    _args_.AggregationRule <- input aggregationRule
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: ClusterRoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let clusterRole = ClusterRoleBuilder()

        [<AutoOpen>]
        module ClusterRoleBinding =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type ClusterRoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingArgs) = ClusterRoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: ClusterRoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: ClusterRoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let clusterRoleBinding = ClusterRoleBindingBuilder()

        [<AutoOpen>]
        module ClusterRoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type ClusterRoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingListArgs) = ClusterRoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleBindingList = ClusterRoleBindingListBuilder()

        [<AutoOpen>]
        module ClusterRoleList =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type ClusterRoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleListArgs) = ClusterRoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleList = ClusterRoleListBuilder()

        [<AutoOpen>]
        module Role =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type RoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleArgs()
                member _.Run(_cargs_, _args_: RoleArgs) = Role(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: RoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let role = RoleBuilder()

        [<AutoOpen>]
        module RoleBinding =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type RoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingArgs()
                member _.Run(_cargs_, _args_: RoleBindingArgs) = RoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: RoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: RoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let roleBinding = RoleBindingBuilder()

        [<AutoOpen>]
        module RoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type RoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingListArgs()
                member _.Run(_cargs_, _args_: RoleBindingListArgs) = RoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleBindingList = RoleBindingListBuilder()

        [<AutoOpen>]
        module RoleList =
            open Pulumi.Kubernetes.Rbac.V1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1

            type RoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleListArgs()
                member _.Run(_cargs_, _args_: RoleListArgs) = RoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleList = RoleListBuilder()

    module V1Alpha1 =
        [<AutoOpen>]
        module ClusterRole =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type ClusterRoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleArgs()
                member _.Run(_cargs_, _args_: ClusterRoleArgs) = ClusterRole(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("aggregationRule")>]
                member _.AggregationRule((_cargs_, _args_: ClusterRoleArgs), aggregationRule) =
                    _args_.AggregationRule <- input aggregationRule
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: ClusterRoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let clusterRole = ClusterRoleBuilder()

        [<AutoOpen>]
        module ClusterRoleBinding =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type ClusterRoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingArgs) = ClusterRoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: ClusterRoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: ClusterRoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let clusterRoleBinding = ClusterRoleBindingBuilder()

        [<AutoOpen>]
        module ClusterRoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type ClusterRoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingListArgs) = ClusterRoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleBindingList = ClusterRoleBindingListBuilder()

        [<AutoOpen>]
        module ClusterRoleList =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type ClusterRoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleListArgs) = ClusterRoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleList = ClusterRoleListBuilder()

        [<AutoOpen>]
        module Role =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type RoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleArgs()
                member _.Run(_cargs_, _args_: RoleArgs) = Role(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: RoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let role = RoleBuilder()

        [<AutoOpen>]
        module RoleBinding =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type RoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingArgs()
                member _.Run(_cargs_, _args_: RoleBindingArgs) = RoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: RoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: RoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let roleBinding = RoleBindingBuilder()

        [<AutoOpen>]
        module RoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type RoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingListArgs()
                member _.Run(_cargs_, _args_: RoleBindingListArgs) = RoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleBindingList = RoleBindingListBuilder()

        [<AutoOpen>]
        module RoleList =
            open Pulumi.Kubernetes.Rbac.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Alpha1

            type RoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleListArgs()
                member _.Run(_cargs_, _args_: RoleListArgs) = RoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleList = RoleListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module ClusterRole =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type ClusterRoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleArgs()
                member _.Run(_cargs_, _args_: ClusterRoleArgs) = ClusterRole(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("aggregationRule")>]
                member _.AggregationRule((_cargs_, _args_: ClusterRoleArgs), aggregationRule) =
                    _args_.AggregationRule <- input aggregationRule
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: ClusterRoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let clusterRole = ClusterRoleBuilder()

        [<AutoOpen>]
        module ClusterRoleBinding =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type ClusterRoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingArgs) = ClusterRoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: ClusterRoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: ClusterRoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let clusterRoleBinding = ClusterRoleBindingBuilder()

        [<AutoOpen>]
        module ClusterRoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type ClusterRoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleBindingListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleBindingListArgs) = ClusterRoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleBindingListArgs), name) =
                    { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleBindingList = ClusterRoleBindingListBuilder()

        [<AutoOpen>]
        module ClusterRoleList =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type ClusterRoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, ClusterRoleListArgs()
                member _.Run(_cargs_, _args_: ClusterRoleListArgs) = ClusterRoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: ClusterRoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: ClusterRoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: ClusterRoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: ClusterRoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: ClusterRoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let clusterRoleList = ClusterRoleListBuilder()

        [<AutoOpen>]
        module Role =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type RoleBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleArgs()
                member _.Run(_cargs_, _args_: RoleArgs) = Role(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("rules")>]
                member _.Rules((_cargs_, _args_: RoleArgs), rules) =
                    _args_.Rules <- inputList rules
                    _cargs_, _args_

            let role = RoleBuilder()

        [<AutoOpen>]
        module RoleBinding =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type RoleBindingBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingArgs()
                member _.Run(_cargs_, _args_: RoleBindingArgs) = RoleBinding(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("roleRef")>]
                member _.RoleRef((_cargs_, _args_: RoleBindingArgs), roleRef) =
                    _args_.RoleRef <- input roleRef
                    _cargs_, _args_

                [<CustomOperation("subjects")>]
                member _.Subjects((_cargs_, _args_: RoleBindingArgs), subjects) =
                    _args_.Subjects <- inputList subjects
                    _cargs_, _args_

            let roleBinding = RoleBindingBuilder()

        [<AutoOpen>]
        module RoleBindingList =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type RoleBindingListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleBindingListArgs()
                member _.Run(_cargs_, _args_: RoleBindingListArgs) = RoleBindingList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleBindingListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleBindingListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleBindingListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleBindingListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleBindingListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleBindingList = RoleBindingListBuilder()

        [<AutoOpen>]
        module RoleList =
            open Pulumi.Kubernetes.Rbac.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Rbac.V1Beta1

            type RoleListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, RoleListArgs()
                member _.Run(_cargs_, _args_: RoleListArgs) = RoleList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: RoleListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: RoleListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: RoleListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: RoleListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: RoleListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let roleList = RoleListBuilder()

module Scheduling =
    module V1 =
        [<AutoOpen>]
        module PriorityClass =
            open Pulumi.Kubernetes.Scheduling.V1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1

            type PriorityClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassArgs()
                member _.Run(_cargs_, _args_: PriorityClassArgs) = PriorityClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("description")>]
                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- input description
                    _cargs_, _args_

                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- io description
                    _cargs_, _args_

                [<CustomOperation("globalDefault")>]
                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- input globalDefault
                    _cargs_, _args_

                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- io globalDefault
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("preemptionPolicy")>]
                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- input preemptionPolicy
                    _cargs_, _args_

                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- io preemptionPolicy
                    _cargs_, _args_

                [<CustomOperation("value")>]
                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- input value
                    _cargs_, _args_

                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- io value
                    _cargs_, _args_

            let priorityClass = PriorityClassBuilder()

        [<AutoOpen>]
        module PriorityClassList =
            open Pulumi.Kubernetes.Scheduling.V1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1

            type PriorityClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassListArgs()
                member _.Run(_cargs_, _args_: PriorityClassListArgs) = PriorityClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PriorityClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let priorityClassList = PriorityClassListBuilder()

    module V1Alpha1 =
        [<AutoOpen>]
        module PriorityClass =
            open Pulumi.Kubernetes.Scheduling.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1Alpha1

            type PriorityClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassArgs()
                member _.Run(_cargs_, _args_: PriorityClassArgs) = PriorityClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("description")>]
                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- input description
                    _cargs_, _args_

                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- io description
                    _cargs_, _args_

                [<CustomOperation("globalDefault")>]
                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- input globalDefault
                    _cargs_, _args_

                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- io globalDefault
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("preemptionPolicy")>]
                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- input preemptionPolicy
                    _cargs_, _args_

                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- io preemptionPolicy
                    _cargs_, _args_

                [<CustomOperation("value")>]
                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- input value
                    _cargs_, _args_

                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- io value
                    _cargs_, _args_

            let priorityClass = PriorityClassBuilder()

        [<AutoOpen>]
        module PriorityClassList =
            open Pulumi.Kubernetes.Scheduling.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1Alpha1

            type PriorityClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassListArgs()
                member _.Run(_cargs_, _args_: PriorityClassListArgs) = PriorityClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PriorityClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let priorityClassList = PriorityClassListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module PriorityClass =
            open Pulumi.Kubernetes.Scheduling.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1Beta1

            type PriorityClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassArgs()
                member _.Run(_cargs_, _args_: PriorityClassArgs) = PriorityClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("description")>]
                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- input description
                    _cargs_, _args_

                member _.Description((_cargs_, _args_: PriorityClassArgs), description) =
                    _args_.Description <- io description
                    _cargs_, _args_

                [<CustomOperation("globalDefault")>]
                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- input globalDefault
                    _cargs_, _args_

                member _.GlobalDefault((_cargs_, _args_: PriorityClassArgs), globalDefault) =
                    _args_.GlobalDefault <- io globalDefault
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("preemptionPolicy")>]
                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- input preemptionPolicy
                    _cargs_, _args_

                member _.PreemptionPolicy((_cargs_, _args_: PriorityClassArgs), preemptionPolicy) =
                    _args_.PreemptionPolicy <- io preemptionPolicy
                    _cargs_, _args_

                [<CustomOperation("value")>]
                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- input value
                    _cargs_, _args_

                member _.Value((_cargs_, _args_: PriorityClassArgs), value) =
                    _args_.Value <- io value
                    _cargs_, _args_

            let priorityClass = PriorityClassBuilder()

        [<AutoOpen>]
        module PriorityClassList =
            open Pulumi.Kubernetes.Scheduling.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Scheduling.V1Beta1

            type PriorityClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PriorityClassListArgs()
                member _.Run(_cargs_, _args_: PriorityClassListArgs) = PriorityClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PriorityClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PriorityClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PriorityClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PriorityClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PriorityClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let priorityClassList = PriorityClassListBuilder()

module Settings =
    module V1Alpha1 =
        [<AutoOpen>]
        module PodPreset =
            open Pulumi.Kubernetes.Settings.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Settings.V1Alpha1

            type PodPresetBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodPresetArgs()
                member _.Run(_cargs_, _args_: PodPresetArgs) = PodPreset(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodPresetArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodPresetArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodPresetArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodPresetArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodPresetArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodPresetArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: PodPresetArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let podPreset = PodPresetBuilder()

        [<AutoOpen>]
        module PodPresetList =
            open Pulumi.Kubernetes.Settings.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Settings.V1Alpha1

            type PodPresetListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, PodPresetListArgs()
                member _.Run(_cargs_, _args_: PodPresetListArgs) = PodPresetList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: PodPresetListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: PodPresetListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: PodPresetListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: PodPresetListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: PodPresetListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: PodPresetListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: PodPresetListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let podPresetList = PodPresetListBuilder()

module Storage =
    module V1 =
        [<AutoOpen>]
        module CSIDriver =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type CSIDriverBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSIDriverArgs()
                member _.Run(_cargs_, _args_: CSIDriverArgs) = CSIDriver(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSIDriverArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSIDriverArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSIDriverArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSIDriverArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSIDriverArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSIDriverArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CSIDriverArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cSIDriver = CSIDriverBuilder()

        [<AutoOpen>]
        module CSIDriverList =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type CSIDriverListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSIDriverListArgs()
                member _.Run(_cargs_, _args_: CSIDriverListArgs) = CSIDriverList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSIDriverListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSIDriverListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSIDriverListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CSIDriverListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSIDriverListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSIDriverListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSIDriverListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cSIDriverList = CSIDriverListBuilder()

        [<AutoOpen>]
        module CSINode =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type CSINodeBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSINodeArgs()
                member _.Run(_cargs_, _args_: CSINodeArgs) = CSINode(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSINodeArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSINodeArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSINodeArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSINodeArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSINodeArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSINodeArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CSINodeArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cSINode = CSINodeBuilder()

        [<AutoOpen>]
        module CSINodeList =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type CSINodeListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSINodeListArgs()
                member _.Run(_cargs_, _args_: CSINodeListArgs) = CSINodeList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSINodeListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSINodeListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSINodeListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CSINodeListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSINodeListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSINodeListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSINodeListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cSINodeList = CSINodeListBuilder()

        [<AutoOpen>]
        module StorageClass =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type StorageClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StorageClassArgs()
                member _.Run(_cargs_, _args_: StorageClassArgs) = StorageClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StorageClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("allowVolumeExpansion")>]
                member _.AllowVolumeExpansion((_cargs_, _args_: StorageClassArgs), allowVolumeExpansion) =
                    _args_.AllowVolumeExpansion <- input allowVolumeExpansion
                    _cargs_, _args_

                member _.AllowVolumeExpansion((_cargs_, _args_: StorageClassArgs), allowVolumeExpansion) =
                    _args_.AllowVolumeExpansion <- io allowVolumeExpansion
                    _cargs_, _args_

                [<CustomOperation("allowedTopologies")>]
                member _.AllowedTopologies((_cargs_, _args_: StorageClassArgs), allowedTopologies) =
                    _args_.AllowedTopologies <- inputList allowedTopologies
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StorageClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StorageClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StorageClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StorageClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StorageClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("mountOptions")>]
                member _.MountOptions((_cargs_, _args_: StorageClassArgs), mountOptions) =
                    _args_.MountOptions <- inputList mountOptions
                    _cargs_, _args_

                [<CustomOperation("parameters")>]
                member _.Parameters((_cargs_, _args_: StorageClassArgs), parameters) =
                    _args_.Parameters <- inputMap parameters
                    _cargs_, _args_

                [<CustomOperation("provisioner")>]
                member _.Provisioner((_cargs_, _args_: StorageClassArgs), provisioner) =
                    _args_.Provisioner <- input provisioner
                    _cargs_, _args_

                member _.Provisioner((_cargs_, _args_: StorageClassArgs), provisioner) =
                    _args_.Provisioner <- io provisioner
                    _cargs_, _args_

                [<CustomOperation("reclaimPolicy")>]
                member _.ReclaimPolicy((_cargs_, _args_: StorageClassArgs), reclaimPolicy) =
                    _args_.ReclaimPolicy <- input reclaimPolicy
                    _cargs_, _args_

                member _.ReclaimPolicy((_cargs_, _args_: StorageClassArgs), reclaimPolicy) =
                    _args_.ReclaimPolicy <- io reclaimPolicy
                    _cargs_, _args_

                [<CustomOperation("volumeBindingMode")>]
                member _.VolumeBindingMode((_cargs_, _args_: StorageClassArgs), volumeBindingMode) =
                    _args_.VolumeBindingMode <- input volumeBindingMode
                    _cargs_, _args_

                member _.VolumeBindingMode((_cargs_, _args_: StorageClassArgs), volumeBindingMode) =
                    _args_.VolumeBindingMode <- io volumeBindingMode
                    _cargs_, _args_

            let storageClass = StorageClassBuilder()

        [<AutoOpen>]
        module StorageClassList =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type StorageClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StorageClassListArgs()
                member _.Run(_cargs_, _args_: StorageClassListArgs) = StorageClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StorageClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StorageClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StorageClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: StorageClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StorageClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StorageClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StorageClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let storageClassList = StorageClassListBuilder()

        [<AutoOpen>]
        module VolumeAttachment =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type VolumeAttachmentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentArgs) = VolumeAttachment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: VolumeAttachmentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let volumeAttachment = VolumeAttachmentBuilder()

        [<AutoOpen>]
        module VolumeAttachmentList =
            open Pulumi.Kubernetes.Storage.V1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1

            type VolumeAttachmentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentListArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentListArgs) = VolumeAttachmentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: VolumeAttachmentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let volumeAttachmentList = VolumeAttachmentListBuilder()

    module V1Alpha1 =
        [<AutoOpen>]
        module VolumeAttachment =
            open Pulumi.Kubernetes.Storage.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

            type VolumeAttachmentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentArgs) = VolumeAttachment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: VolumeAttachmentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let volumeAttachment = VolumeAttachmentBuilder()

        [<AutoOpen>]
        module VolumeAttachmentList =
            open Pulumi.Kubernetes.Storage.V1Alpha1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Alpha1

            type VolumeAttachmentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentListArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentListArgs) = VolumeAttachmentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: VolumeAttachmentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let volumeAttachmentList = VolumeAttachmentListBuilder()

    module V1Beta1 =
        [<AutoOpen>]
        module CSIDriver =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type CSIDriverBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSIDriverArgs()
                member _.Run(_cargs_, _args_: CSIDriverArgs) = CSIDriver(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSIDriverArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSIDriverArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSIDriverArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSIDriverArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSIDriverArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSIDriverArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CSIDriverArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cSIDriver = CSIDriverBuilder()

        [<AutoOpen>]
        module CSIDriverList =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type CSIDriverListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSIDriverListArgs()
                member _.Run(_cargs_, _args_: CSIDriverListArgs) = CSIDriverList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSIDriverListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSIDriverListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSIDriverListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CSIDriverListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSIDriverListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSIDriverListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSIDriverListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cSIDriverList = CSIDriverListBuilder()

        [<AutoOpen>]
        module CSINode =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type CSINodeBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSINodeArgs()
                member _.Run(_cargs_, _args_: CSINodeArgs) = CSINode(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSINodeArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSINodeArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSINodeArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSINodeArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSINodeArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSINodeArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: CSINodeArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let cSINode = CSINodeBuilder()

        [<AutoOpen>]
        module CSINodeList =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type CSINodeListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, CSINodeListArgs()
                member _.Run(_cargs_, _args_: CSINodeListArgs) = CSINodeList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: CSINodeListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: CSINodeListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: CSINodeListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: CSINodeListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: CSINodeListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: CSINodeListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: CSINodeListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let cSINodeList = CSINodeListBuilder()

        [<AutoOpen>]
        module StorageClass =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type StorageClassBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StorageClassArgs()
                member _.Run(_cargs_, _args_: StorageClassArgs) = StorageClass(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StorageClassArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("allowVolumeExpansion")>]
                member _.AllowVolumeExpansion((_cargs_, _args_: StorageClassArgs), allowVolumeExpansion) =
                    _args_.AllowVolumeExpansion <- input allowVolumeExpansion
                    _cargs_, _args_

                member _.AllowVolumeExpansion((_cargs_, _args_: StorageClassArgs), allowVolumeExpansion) =
                    _args_.AllowVolumeExpansion <- io allowVolumeExpansion
                    _cargs_, _args_

                [<CustomOperation("allowedTopologies")>]
                member _.AllowedTopologies((_cargs_, _args_: StorageClassArgs), allowedTopologies) =
                    _args_.AllowedTopologies <- inputList allowedTopologies
                    _cargs_, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StorageClassArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StorageClassArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StorageClassArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StorageClassArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StorageClassArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("mountOptions")>]
                member _.MountOptions((_cargs_, _args_: StorageClassArgs), mountOptions) =
                    _args_.MountOptions <- inputList mountOptions
                    _cargs_, _args_

                [<CustomOperation("parameters")>]
                member _.Parameters((_cargs_, _args_: StorageClassArgs), parameters) =
                    _args_.Parameters <- inputMap parameters
                    _cargs_, _args_

                [<CustomOperation("provisioner")>]
                member _.Provisioner((_cargs_, _args_: StorageClassArgs), provisioner) =
                    _args_.Provisioner <- input provisioner
                    _cargs_, _args_

                member _.Provisioner((_cargs_, _args_: StorageClassArgs), provisioner) =
                    _args_.Provisioner <- io provisioner
                    _cargs_, _args_

                [<CustomOperation("reclaimPolicy")>]
                member _.ReclaimPolicy((_cargs_, _args_: StorageClassArgs), reclaimPolicy) =
                    _args_.ReclaimPolicy <- input reclaimPolicy
                    _cargs_, _args_

                member _.ReclaimPolicy((_cargs_, _args_: StorageClassArgs), reclaimPolicy) =
                    _args_.ReclaimPolicy <- io reclaimPolicy
                    _cargs_, _args_

                [<CustomOperation("volumeBindingMode")>]
                member _.VolumeBindingMode((_cargs_, _args_: StorageClassArgs), volumeBindingMode) =
                    _args_.VolumeBindingMode <- input volumeBindingMode
                    _cargs_, _args_

                member _.VolumeBindingMode((_cargs_, _args_: StorageClassArgs), volumeBindingMode) =
                    _args_.VolumeBindingMode <- io volumeBindingMode
                    _cargs_, _args_

            let storageClass = StorageClassBuilder()

        [<AutoOpen>]
        module StorageClassList =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type StorageClassListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, StorageClassListArgs()
                member _.Run(_cargs_, _args_: StorageClassListArgs) = StorageClassList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: StorageClassListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: StorageClassListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: StorageClassListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: StorageClassListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: StorageClassListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: StorageClassListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: StorageClassListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let storageClassList = StorageClassListBuilder()

        [<AutoOpen>]
        module VolumeAttachment =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type VolumeAttachmentBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentArgs) = VolumeAttachment(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

                [<CustomOperation("spec")>]
                member _.Spec((_cargs_, _args_: VolumeAttachmentArgs), spec) =
                    _args_.Spec <- input spec
                    _cargs_, _args_

            let volumeAttachment = VolumeAttachmentBuilder()

        [<AutoOpen>]
        module VolumeAttachmentList =
            open Pulumi.Kubernetes.Storage.V1Beta1
            open Pulumi.Kubernetes.Types.Inputs.Storage.V1Beta1

            type VolumeAttachmentListBuilder() =
                member _.Yield _ = KubernetesResource.Zero, VolumeAttachmentListArgs()
                member _.Run(_cargs_, _args_: VolumeAttachmentListArgs) = VolumeAttachmentList(_cargs_.Name, _args_)

                [<CustomOperation("name")>]
                member _.Name((_cargs_, _args_: VolumeAttachmentListArgs), name) = { _cargs_ with Name = name }, _args_

                [<CustomOperation("apiVersion")>]
                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- input apiVersion
                    _cargs_, _args_

                member _.ApiVersion((_cargs_, _args_: VolumeAttachmentListArgs), apiVersion) =
                    _args_.ApiVersion <- io apiVersion
                    _cargs_, _args_

                [<CustomOperation("items")>]
                member _.Items((_cargs_, _args_: VolumeAttachmentListArgs), items) =
                    _args_.Items <- inputList items
                    _cargs_, _args_

                [<CustomOperation("kind")>]
                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- input kind
                    _cargs_, _args_

                member _.Kind((_cargs_, _args_: VolumeAttachmentListArgs), kind) =
                    _args_.Kind <- io kind
                    _cargs_, _args_

                [<CustomOperation("metadata")>]
                member _.Metadata((_cargs_, _args_: VolumeAttachmentListArgs), metadata) =
                    _args_.Metadata <- input metadata
                    _cargs_, _args_

            let volumeAttachmentList = VolumeAttachmentListBuilder()
